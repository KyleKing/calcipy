# TODO: Sync with https://github.com/pawamoy/copier-uv

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
classifiers = [
  "Development Status :: 4 - Beta",
  "Framework :: Pytest",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.9",
  "Topic :: Software Development :: Libraries",
  "Topic :: Utilities",
] # https://pypi.org/classifiers/
dependencies = [
  "beartype >=0.19.0",
  "corallium >=2.0.1",
  "invoke >=2.2.0",
  "pydantic >=2.9.2",
]
description = "Python package to simplify development"
documentation = "https://calcipy.kyleking.me"
keywords = ["calcipy_template"]
license = "MIT"
maintainers = []
name = "calcipy"
readme = "docs/README.md"
repository = "https://github.com/kyleking/calcipy"
requires-python = ">=3.9.13"
version = "4.1.0"

[project.optional-dependencies]
ddict = [
  "python-box >=7.2.0",
]
doc = [
  "commitizen >=3.29.1",
  "mkdocs >=1.6.1",
  "mkdocs-gen-files >=0.5.0",
  "mkdocs-material >=9.5.39",
  "mkdocstrings[python] >=0.26.1",
  "pymdown-extensions >=10.11.2",
]
experimental = [
  "griffe >=1.3.2",
  "semver >=3.0.2",
]
lint = [
  "ruff >=0.6.9",
]
nox = [
  "nox >=2024.10.9",
  "virtualenv >=20.26.6", # Prevents 'scripts' KeyError with Python 3.12
]
tags = [
  "arrow >=1.3.0",
  "pyyaml >=6.0.2",
]
test = [
  "pytest >=8.3.3",
  "pytest-cov >=5.0.0",
  "pytest-randomly >=3.15.0",
  "pytest-watcher >=0.4.3",
]
types = [
  "mypy >=1.11.2",
]

[project.scripts] # Docs: https://setuptools.pypa.io/en/latest/userguide/entry_point.html#console-scripts
calcipy = "calcipy.scripts:start"
calcipy-docs = "calcipy.scripts:start_docs"
calcipy-lint = "calcipy.scripts:start_lint"
calcipy-pack = "calcipy.scripts:start_pack"
calcipy-tags = "calcipy.scripts:start_tags"
calcipy-test = "calcipy.scripts:start_test"
calcipy-types = "calcipy.scripts:start_types"

[tool.commitizen]
version = "4.3.0"
version_files = ["calcipy/__init__.py:^__version", "pyproject.toml:^version"]

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
enable_error_code = ["ignore-without-code", "possibly-undefined", "redundant-expr", "truthy-bool"]
extra_checks = true
files = ["calcipy", "tests"]
no_implicit_reexport = true
plugins = [
]
python_version = "3.9"
show_column_numbers = true
show_error_codes = true
strict_equality = true
warn_no_return = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/kyleking/calcipy/issues"
"Changelog" = "https://github.com/kyleking/calcipy/blob/main/docs/docs/CHANGELOG.md"

[tool.pyright]
include = ["calcipy", "tests"]
pythonVersion = "3.9"

[tool.ruff]
# Docs: https://github.com/charliermarsh/ruff
# Tip: uv run python -m ruff rule RUF100
line-length = 120
target-version = 'py39'

[tool.ruff.lint]
ignore = [
  'ANN002', # Missing type annotation for `*args`
  'ANN003', # Missing type annotation for `**kwargs`
  'ANN101', # Missing type annotation for `self` in method (automatically inferred)
  'ANN102', # Missing type annotation for `cls` in classmethod (automatically inferred)
  'ANN401', # Dynamically typed expressions (typing.Any) are disallowed in `pop_key`
  'BLE001', # Do not catch blind exception: `Exception`
  'CPY001', # Missing copyright notice at top of file
  'D203', # "1 blank line required before class docstring" (Conflicts with D211)
  'D213', # "Multi-line docstring summary should start at the second line" (Conflicts with D212)
  'DOC201', # PLANNED: finish updating docstrings for Returns
  'DOC501', # Raised exception `RuntimeError` missing from docstring
  'EM101', # Exception must not use a string literal, assign to variable first
  'FIX001', # Line contains FIXME
  'FIX002', # Line contains TODO
  'FIX004', # Line contains HACK
  'PLR0913', # Too many arguments in function definition (6 > 5)
  'TCH001', # Move application import `tail_jsonl.config.Config` into a type-checking block (Conflicts with Beartype)
  'TCH002', # Move third-party import `rich.console.Console` into a type-checking block (Conflicts with Beartype)
  'TCH003', # Move standard library import `argparse` into a type-checking block (Conflicts with Beartype)
  'TD001', # Invalid TODO tag: `FIXME`
  'TD002', # Missing author in TODO; try: `# TODO(<author_name>): ...`
  'TD003', # Missing issue link on the line following this TODO
  'TRY003', # Avoid specifying long messages outside the exception class
]
preview = true
select = ['ALL']
unfixable = [
  'ERA001', # Commented out code
]

[tool.ruff.lint.flake8-quotes]
inline-quotes = 'single'

[tool.ruff.lint.flake8-tidy-imports.banned-api]
'invoke.collection.Collection'.msg = 'Use calcipy.collection.Collection instead.'
'invoke.tasks.task'.msg = 'Use calcipy.cli.task instead.'
'typing.Callable'.msg = 'Use beartype.typing.* instead.'
'typing.Dict'.msg = 'Use beartype.typing.* instead.'
'typing.List'.msg = 'Use beartype.typing.* instead.'
'typing.Optional'.msg = 'Use beartype.typing.* instead.'
'typing.Protocol'.msg = 'Use beartype.typing.* instead.'
'typing.TypeVar'.msg = 'Use beartype.typing.* instead.'

[tool.ruff.lint.isort]
known-first-party = ['calcipy']

[tool.ruff.lint.per-file-ignores]
'./calcipy/../*.py' = [
  'INP001', # File `/<>.py` is part of an implicit namespace package. Add an `__init__.py`.
]
'__init__.py' = [
  'D104', # Missing docstring in public package
]
'scripts/*.py' = [
  'INP001', # File `scripts/*.py` is part of an implicit namespace package. Add an `__init__.py`.
]
'scripts/check_imports.py' = [
  'F401', # imported but unused; consider adding to __all__ or using a redundant alias
]
'tests/*.py' = [
  'ANN001', # Missing type annotation for function argument
  'ANN201', # Missing return type annotation for public function
  'ANN202', # Missing return type annotation for private function `test_make_diffable`
  'ARG001', # Unused function argument: `line`
  'D100', # Missing docstring in public module
  'D103', # Missing docstring in public function
  'PLC2701', # Private name import `_<>` from external module
  'PT004', # flake8-pytest-style: fixture does not return
  'S101', # Use of `assert` detected
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.tomlsort]
all = true
in_place = true
sort_first = ["python"]
trailing_comma_inline_array = true

[tool.uv]
dev-dependencies = [
  "hypothesis[cli] >=6.112.4", # Use CLI with: "uv run hypothesis write calcipy.dot_dict.ddict"
  "pytest-asyncio >=0.24.0",
  "pytest-subprocess >=1.5.2",
  "syrupy >=4.7.2",
  "types-pyyaml >=6.0.12.20240917",
  "types-setuptools >=75.1.0.20240917",
]
