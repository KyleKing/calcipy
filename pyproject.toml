[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core"]

[tool.commitizen]
version = "3.0.0"
version_files = ["calcipy/__init__.py:^__version", "pyproject.toml:^version"]

[tool.mypy]
disallow_any_generics = true
enable_error_code = ["ignore-without-code", "possibly-undefined", "redundant-expr", "truthy-bool"]
no_implicit_reexport = true
plugins = [
  "pydantic.mypy", # Most settings are from: https://pydantic-docs.helpmanual.io/mypy_plugin
]
python_version = "3.9"
show_column_numbers = true
show_error_codes = true
strict_equality = true
warn_no_return = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true

[tool.poetry]
authors = ["Kyle King <dev.act.kyle@gmail.com>"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Framework :: Pytest",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.9",
  "Topic :: Software Development :: Libraries",
  "Topic :: Utilities",
] # https://pypi.org/classifiers/
description = "Python package to simplify development"
documentation = "https://calcipy.kyleking.me"
include = ["LICENSE"]
keywords = ["calcipy_template", "nox"]
license = "MIT"
maintainers = []
name = "calcipy"
readme = "docs/README.md"
repository = "https://github.com/kyleking/calcipy"
version = "3.0.0"

[tool.poetry.dependencies]
python = "^3.9.13"
arrow = {optional = true, version = ">=1.2.3"} # tags
basedpyright = {optional = true, version = ">=1.6.0"} # types
beartype = ">=0.18.2"
bidict = {optional = true, version = ">=0.22.1"} # stale
commitizen = {optional = true, version = ">=3.22.0"} # doc
corallium = ">=1.0.3"
griffe = {optional = true, version = ">=0.45.2"} # experimental
httpx = {optional = true, version = ">=0.24.1"} # stale
invoke = ">=2.2.0"
mkdocs = {optional = true, version = ">=1.5.3"} # doc
mkdocs-build-plantuml-plugin = {optional = true, version = ">=1.9.0,!=1.10.0"} # doc
mkdocs-gen-files = {optional = true, version = ">=0.4.0"} # doc
mkdocs-git-revision-date-localized-plugin = {optional = true, version = ">=1.0.1"} # doc
mkdocs-include-markdown-plugin = {markers = "python_version < '3.12'", optional = true, version = ">=4.0.3"} # doc
mkdocs-literate-nav = {optional = true, version = ">=0.5.0"} # doc
mkdocs-material = {optional = true, version = ">=9.4.8"} # doc
mkdocs-section-index = {optional = true, version = ">=0.3.4"} # doc
mkdocstrings = {extras = ["python"], optional = true, version = ">=0.24.2"} # doc
mypy = {optional = true, version = ">=1.0.0"} # types
nox-poetry = {optional = true, version = ">=1.0.3"} # test
pandas = {optional = true, version = ">=1.5.3"} # docs,tags
pydantic = ">=2.7.0"
pylint = {optional = true, version = ">=3.0.2"} # doc,pylint
pymdown-extensions = {optional = true, version = ">=10.0.1"} # docs
pyrate_limiter = {optional = true, version = ">=3.0.2"} # stale
pytest = {optional = true, version = ">=7.2.1"} # test
pytest-cov = {optional = true, version = ">=5.0.0"} # test
pytest-randomly = {optional = true, version = ">=3.12.0"} # test
pytest-watcher = {optional = true, version = ">=0.4.2"} # test
python-box = {optional = true, version = ">=6.0.2"} # ddict
pyyaml = {optional = true, version = ">=5.2"} # doc,tags
ruff = {optional = true, version = ">=0.4.8"} # lint
semver = {optional = true, version = ">=3.0.2"} # experimental
tabulate = {optional = true, version = ">=0.9.0"} # tags: Required for pandas to markdown
transitions = {optional = true, version = ">=0.9.0"} # tags: docs
virtualenv = {optional = true, version = ">=20.24.0"} # tags: nox. Prevents 'scripts' KeyError with Python 3.12

[tool.poetry.extras]
ddict = ["python-box"]
doc = [
  "commitizen",
  "mkdocs",
  "mkdocs-build-plantuml-plugin",
  "mkdocs-gen-files",
  "mkdocs-git-revision-date-localized-plugin",
  "mkdocs-include-markdown-plugin",
  "mkdocs-literate-nav",
  "mkdocs-material",
  "mkdocs-section-index",
  "mkdocstrings",
  "pandas",
  "pylint", # for 'pyreverse'
  "pymdown-extensions",
  "pyyaml",
  "transitions",
]
experimental = [
  "griffe",
  "semver",
]
lint = [
  "ruff",
]
nox = ["nox-poetry", "virtualenv"]
pylint = ["pylint"]
stale = [
  "arrow",
  "bidict",
  "httpx",
  "pyrate_limiter",
]
tags = [
  "arrow",
  "pandas",
  "pyyaml",
  "tabulate",
]
test = [
  "pytest",
  "pytest-cov",
  "pytest-randomly",
  "pytest-watcher",
]
types = [
  "basedpyright",
  "mypy",
]

[tool.poetry.group.dev.dependencies]
# pytest-benchmark = ">=3.4.1"  # Provides the benchmark fixture
hypothesis = {extras = ["cli"], version = ">=6.100.1"} # Use CLI with: "poetry run hypothesis write calcipy.dot_dict.ddict"
pandas-stubs = ">=2.2.2.240603"
pytest-asyncio = ">=0.21.0"
pytest-recording = ">=0.13.0"
pytest-subprocess = ">=1.4.1"
syrupy = ">=4.4.0"
types-pyyaml = ">=6.0.12.6"
types-setuptools = ">=67.3.0.1"
vcrpy = ">=5.1.0" # FYI: Pinned to indirectly manage the urllib3 version

[tool.poetry.scripts]
calcipy = "calcipy.scripts:start"
calcipy-docs = "calcipy.scripts:start_docs"
calcipy-lint = "calcipy.scripts:start_lint"
calcipy-pack = "calcipy.scripts:start_pack"
calcipy-tags = "calcipy.scripts:start_tags"
calcipy-test = "calcipy.scripts:start_test"
calcipy-types = "calcipy.scripts:start_types"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/kyleking/calcipy/issues"
"Changelog" = "https://github.com/kyleking/calcipy/blob/main/docs/docs/CHANGELOG.md"

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.pyright]
include = ["calcipy"]
pythonVersion = "3.9"

[tool.ruff]
# Docs: https://github.com/charliermarsh/ruff
# Tip: poetry run python -m ruff --explain RUF100
line-length = 120
target-version = 'py39'

[tool.ruff.lint]
ignore = [
  'ANN002', # Missing type annotation for `*args`
  'ANN003', # Missing type annotation for `**kwargs`
  'ANN101', # Missing type annotation for `self` in method (automatically inferred)
  'ANN102', # Missing type annotation for `cls` in classmethod (automatically inferred)
  'BLE001', # Do not catch blind exception: `Exception`
  'CPY001', # Missing copyright notice at top of file
  'D203', # "1 blank line required before class docstring" (Conflicts with D211)
  'D213', # "Multi-line docstring summary should start at the second line" (Conflicts with D212)
  'EM101', # Exception must not use a string literal, assign to variable first
  'FIX001', # Line contains FIXME
  'FIX002', # Line contains TODO
  'FIX004', # Line contains HACK
  'PLR0913', # Too many arguments in function definition (6 > 5)
  'TD001', # Invalid TODO tag: `FIXME`
  'TD002', # Missing author in TODO; try: `# TODO(<author_name>): ...`
  'TD003', # Missing issue link on the line following this TODO
  'TRY003', # Avoid specifying long messages outside the exception class
]
preview = true
select = ['ALL']
unfixable = [
  'ERA001', # Commented out code
]

[tool.ruff.lint.flake8-quotes]
inline-quotes = 'single'

[tool.ruff.lint.flake8-tidy-imports.banned-api]
'invoke.collection.Collection'.msg = 'Use calcipy.cli.Collection instead.'
'invoke.tasks.task'.msg = 'Use calcipy.cli.task instead.'
'typing.Callable'.msg = 'Use beartype.typing.* instead.'
'typing.Dict'.msg = 'Use beartype.typing.* instead.'
'typing.List'.msg = 'Use beartype.typing.* instead.'
'typing.Optional'.msg = 'Use beartype.typing.* instead.'
'typing.Protocol'.msg = 'Use beartype.typing.* instead.'
'typing.TypeVar'.msg = 'Use beartype.typing.* instead.'

[tool.ruff.lint.isort]
known-first-party = ['calcipy']

[tool.ruff.lint.per-file-ignores]
'./calcipy/../*.py' = [
  'INP001', # File `/<>.py` is part of an implicit namespace package. Add an `__init__.py`.
]
'__init__.py' = [
  'D104', # Missing docstring in public package
]
'scripts/*.py' = [
  'INP001', # File `scripts/*.py` is part of an implicit namespace package. Add an `__init__.py`.
]
'scripts/check_imports.py' = [
  'F401', # imported but unused; consider adding to __all__ or using a redundant alias
]
'tests/*.py' = [
  'ANN001', # Missing type annotation for function argument
  'ANN201', # Missing return type annotation for public function
  'ANN202', # Missing return type annotation for private function `test_make_diffable`
  'D100', # Missing docstring in public module
  'D103', # Missing docstring in public function
  'PLC2701', # Private name import `_<>` from external module
  'PT004', # flake8-pytest-style: fixture does not return
  'S101', # Use of `assert` detected
]

[tool.tomlsort]
all = true
in_place = true
sort_first = ["python"]
trailing_comma_inline_array = true
