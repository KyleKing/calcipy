[build-system]
requires = ["poetry-core>=1.0.7"]
build-backend = "poetry.core.masonry.api"

[tool.calcipy]
ignore_patterns = [
    ".test_calcipy_project/*",
    ".test_calcipy_project/*/*",
    ".test_calcipy_project/*/*/*",
    "tests/**/cassettes/**/*.yaml",
    "tests/data/sample_doc_files/*",
]

[tool.calcipy.test]
pythons = ["3.7", "3.9"]

[tool.commitizen]
name = "cz_legacy"
change_type_order = [
    "BREAKING CHANGE",
    "Feat",
    "Fix",
    "Refactor",
    "Perf",
    "New (Old)",
    "Change (Old)",
    "Fix (Old)",
]
version = "0.14.3"
version_files = ["pyproject.toml", "calcipy/__init__.py"]

[tool.commitizen.cz_legacy_map]
Chg = "Change (Old)"
Fix = "Fix (Old)"
New = "New (Old)"

[tool.isort]
balanced_wrapping = true
default_section = "THIRDPARTY"
force_grid_wrap = 0
include_trailing_comma = true
known_first_party = "calcipy"
length_sort = false
line_length = 120
multi_line_output = 5

[tool.poetry]
name = "calcipy"
version = "0.14.3"
description = "Python package to simplify development. Includes functionality for task running, testing, linting, documenting, and more"
license = "MIT"
authors = ["Kyle King <dev.act.kyle@gmail.com>"]
maintainers = []
repository = "https://github.com/kyleking/calcipy"
documentation = "https://calcipy.kyleking.me"
readme = "docs/README.md"
include = ["LICENSE.md"]
keywords = ["python-poetry", "doit", "nox", "flake8"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: Flake8",
    "Framework :: Pytest",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Topic :: Software Development :: Libraries",
    "Topic :: Utilities",
] # https://pypi.org/classifiers/

[tool.poetry.scripts]
calcipy = "calcipy:run"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/kyleking/calcipy/issues"
"Changelog" = "https://github.com/kyleking/calcipy/blob/main/docs/docs/CHANGELOG.md"

[tool.poetry.dependencies]
python = "^3.7.6"
attrs = ">=21"
attrs_strict = ">=0.2.2"
beartype = ">=0.10.0"    # dyce has nice no-op decorator for beartype, but shouldn't be optional
cement = ">=3.0.6"
decorator = ">=5"
loguru = ">=0.5"
pandas = ">=1.0"         # Lowered to support Python 3.7
pendulum = ">=2"
punq = ">=0.6.2"
python-box = ">=5.4"
returns = ">=0.18.0"
tabulate = ">=0.8"       # Required for pandas.to_markdown

# TODO: Implement fully optional imports with: https://github.com/KyleKing/calcipy/issues/19#issuecomment-807886404
doit = ">=0.33"          # Should be optional, but needed for doit_tasks
pre-commit = ">=2.15"    # Should be optional, but needed for doit_globals
pyrate_limiter = ">=2.4" # Should be optional, but needed for packaging task
sty = ">=1.0.4"          # Should be optional, but needed for Custom Summary
tomli = ">=2.0.0"        # Should be optional, but needed for doit_globals
transitions = ">=0.8"    # Should be optional, but needed for doc tasks
# Indirect imports necessary only to comply with check_imports
pyyaml = "*"   # Should be optional, but needed for doit_globals
requests = "*" # Should be optional, but needed for packaging tasks

# Development
better-exceptions = { version = ">=0.3", optional = true }
commitizen = { version = ">=2", optional = true }                                                              # Prevent install of 1.X
mkdocs-git-revision-date-localized-plugin = { version = ">=1.0", optional = true }
mkdocs-material = { version = ">=7.1", optional = true }
livereload = { version = "*", optional = true }                                                                # PLANNED: Temporary - a plugin expected livereload to be installed...
pdbpp = { version = ">=0.10", optional = true, markers = "sys_platform != 'win32' or python_version < '3.9'" }
pdocs = { version = ">=1.1", optional = true }
pyupgrade = { version = ">=2.19.1", optional = true }

# Lint
absolufy-imports = { version = ">=0.3.1", optional = true }
add-trailing-comma = { version = ">=2.1.0", optional = true }
autoflake = { version = ">=1.4", optional = true }
autopep8 = { version = ">=1.5", optional = true }
cohesion = { version = ">=1", optional = true }
darglint = { version = ">=1.8", optional = true }
dlint = { version = ">=0.11", optional = true }
flake8 = { version = ">=3.8.4", optional = true }
flake8-2020 = { version = ">=1.6", optional = true }
flake8-aaa = { version = ">=0.12", optional = true }
flake8-annotations = { version = ">=2.6", optional = true }
flake8-assertive = { version = ">=1.3", optional = true }
flake8-bandit = { version = ">=2.1", optional = true }
flake8-blind-except = { version = ">=0.2", optional = true }
flake8-breakpoint = { version = ">=1.1", optional = true }
flake8-broken-line = { version = ">=0.3", optional = true }
flake8-bugbear = { version = ">=22.1.11", optional = true }
flake8-builtins = { version = ">=1.5", optional = true }
flake8-cognitive-complexity = { version = ">=0.1", optional = true }
flake8-comprehensions = { version = ">=3.5", optional = true }
flake8-debugger = { version = ">=4.0", optional = true }
flake8-docstrings = { version = ">=1.6", optional = true }
flake8-eradicate = { version = ">=1.0", optional = true }
flake8-expression-complexity = { version = ">=0.0.9", optional = true }
flake8-fixme = { version = ">=1.1", optional = true }
flake8-functions = { version = ">=0.0.6", optional = true }                             # See: https://github.com/best-doctor/flake8-functions/issues/7
flake8-isort = { version = ">=4.0", optional = true }
flake8-logging-format = { version = ">=0.6", optional = true }
flake8-markdown = { version = ">=0.2", optional = true }
flake8-pep3101 = { version = ">=1.3", optional = true }
flake8-plone-hasattr = { version = ">=0.2", optional = true, allow-prereleases = true }
flake8-print = { version = ">=4.0", optional = true }
flake8-printf-formatting = { version = ">=1.1", optional = true }
flake8-pytest-style = { version = ">=1.4", optional = true }
flake8-quotes = { version = ">=3.2", optional = true }
flake8-return = { version = ">=1.1", optional = true }
flake8-SQL = { version = ">=0.4", optional = true }
flake8-string-format = { version = ">=0.3", optional = true }
flake8-tuple = { version = ">=0.4", optional = true }
flake8-variables-names = { version = ">=0.0.4", optional = true }
hacking = { version = ">=4", optional = true }                                          # Version set to prevent oscillation back to 3
isort = { version = ">=5", optional = true }                                            # Use latest isort
licensecheck = { extras = ["full"], version = "^2022", optional = true }
pandas-vet = { version = ">=0.2", optional = true }
pep8-naming = { version = ">=0.11", optional = true }
pip-check = { version = ">=2.7", optional = true }
proselint = { version = ">=0.10", optional = true }
pycln = { version = ">=1.2.0", optional = true }
pylint = { version = ">=2.8", optional = true }
vulture = { version = ">=2.3", optional = true }
xenon = { version = ">=0.8", optional = true }
yamllint = { version = ">=1.26", optional = true }

# Test
coverage = { version = ">=6", optional = true }
diff-cover = { version = ">=6.4", optional = true }
hypothesis = { extras = [
    "cli",
], version = ">=6.38.0", optional = true } # Use CLI with: "poetry run hypothesis write calcipy.dot_dict.ddict"
lxml = { version = ">=4.7.1", optional = true } # required for the HTML mypy report format
mypy = { version = ">=0.812", optional = true }
nox-poetry = { version = ">=0.8", optional = true }
pytest = { version = ">=6", optional = true }
pytest-benchmark = { version = ">=3.4.1", optional = true }
pytest-cache-assert = { version = ">=1.3.1", optional = true }
pytest-html = { version = ">=3.1", optional = true }
pytest-randomly = { version = ">=3.8", optional = true }
pytest-recording = { version = ">=0.11", optional = true }
pytest-subprocess = { version = ">=1.4.1", optional = true }
pytest-watcher = { version = ">=0.2", optional = true } # https://github.com/joeyespo/pytest-watch/issues/121

# commitizen_legacy
cz_legacy = { version = ">=0.1.2", optional = true }

[tool.poetry.extras]
dev = [
    "better-exceptions",
    "commitizen",
    "livereload",
    "mkdocs-git-revision-date-localized-plugin",
    "mkdocs-material",
    "pdbpp",
    "pdocs",
    "pyupgrade",
]
lint = [
    "absolufy-imports",
    "add-trailing-comma",
    "autoflake",
    "autopep8",
    "cohesion",
    "darglint",
    "demjson",
    "dlint",
    "flake8",
    "flake8-2020",
    "flake8-aaa",
    "flake8-annotations",
    "flake8-assertive",
    "flake8-bandit",
    "flake8-blind-except",
    "flake8-breakpoint",
    "flake8-broken-line",
    "flake8-bugbear",
    "flake8-builtins",
    "flake8-cognitive-complexity",
    "flake8-comprehensions",
    "flake8-debugger",
    "flake8-docstrings",
    "flake8-eradicate",
    "flake8-expression-complexity",
    "flake8-fixme",
    "flake8-functions",
    "flake8-isort",
    "flake8-logging-format",
    "flake8-markdown",
    "flake8-pep3101",
    "flake8-plone-hasattr",
    "flake8-print",
    "flake8-printf-formatting",
    "flake8-pytest-style",
    "flake8-quotes",
    "flake8-return",
    "flake8-SQL",
    "flake8-string-format",
    "flake8-tuple",
    "flake8-variables-names",
    "hacking",
    "isort",
    "licensecheck",
    "pandas-vet",
    "pep8-naming",
    "pip-check",
    "proselint",
    "pycln",
    "pylint",
    "vulture",
    "xenon",
    "yamllint",
]
test = [
    "coverage",
    "diff-cover",
    "hypothesis",
    "lxml",
    "mypy",
    "nox-poetry",
    "pytest",
    "pytest-benchmark",
    "pytest-cache-assert",
    "pytest-html",
    "pytest-randomly",
    "pytest-recording",
    "pytest-subprocess",
    "pytest-watcher",
]
commitizen_legacy = ["cz_legacy"]

[tool.poetry.dev-dependencies]
matplotlib = "^3.5.1"
