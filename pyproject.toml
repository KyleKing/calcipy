[build-system]
requires = [ "poetry-core>=1.0",]
build-backend = "poetry.core.masonry.api"

[tool.commitizen]
name = "cz_legacy"
change_type_order = [
    "BREAKING CHANGE", "Feat", "Fix", "Refactor", "Perf",
    "New (Old)", "Change (Old)", "Fix (Old)",
]
version = "0.1.0"
tag_format = "$version"
version_files = [ "pyproject.toml", "calcipy/__init__.py",]

[tool.commitizen.cz_legacy_map]
Chg = "Change (Old)"
Fix = "Fix (Old)"
New = "New (Old)"

[tool.isort]
balanced_wrapping = true
default_section = "THIRDPARTY"
force_grid_wrap = 0
length_sort = false
line_length = 120

[tool.poetry]
name = "calcipy"
version = "0.1.0"
description = "Python package to simplify development. Includes functionality for task running, testing, linting, documenting, and more"
license = "MIT"
authors = [ "Kyle King <dev.act.kyle@gmail.com>",]
maintainers = []
repository = "https://github.com/kyleking/calcipy"
documentation = "https://github.com/kyleking/calcipy"
readme = "README.md"
include = [ "LICENSE.md",]
keywords = [ "python-poetry", "doit",]
classifiers = [
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/kyleking/calcipy/issues"

[tool.poetry.dependencies]
python = "^3.7"
attrs = "*"
decorator = "*"
loguru = "*"
transitions = "*"

# Development
add-trailing-comma = {version = "*", optional = true}
autopep8 = {version = "*", optional = true}
better-exceptions = {version = "*", optional = true}
cohesion = {version = "*", optional = true}
commitizen = {version = "*", optional = true}
darglint = {version = "*", optional = true}
dlint = {version = "*", optional = true}
doit = {version = "*", optional = true}
flake8 = {version = "*", optional = true}
flake8-2020 = {version = "*", optional = true}
flake8-aaa = {version = "*", optional = true}
flake8-annotations = {version = "*", optional = true}
flake8-assertive = {version = "*", optional = true}
flake8-bandit = {version = "*", optional = true}
flake8-blind-except = {version = "*", optional = true}
flake8-breakpoint = {version = "*", optional = true}
flake8-broken-line = {version = "*", optional = true}
flake8-bugbear = {version = "*", optional = true}
flake8-builtins = {version = "*", optional = true}
flake8-cognitive-complexity = {version = "*", optional = true}
flake8-commas = {version = "*", optional = true}
flake8-comprehensions = {version = "*", optional = true}
flake8-debugger = {version = "*", optional = true}
flake8-deprecated = {version = "*", optional = true}
flake8-docstrings = {version = "*", optional = true}
flake8-eradicate = {version = "*", optional = true}
flake8-expression-complexity = {version = "*", optional = true}
flake8-fixme = {version = "*", optional = true}
flake8-functions = {version = "*", optional = true}
flake8-isort = {version = "*", optional = true}
flake8-logging-format = {version = "*", optional = true}
flake8-markdown = {version = "*", optional = true}
flake8-mock = {version = "*", optional = true}
flake8-mutable = {version = "*", optional = true}
flake8-pep3101 = {version = "*", optional = true}
flake8-plone-hasattr = {version = "*", optional = true}
flake8-print = {version = "*", optional = true}
flake8-printf-formatting = {version = "*", optional = true}
flake8-pytest-style = {version = "*", optional = true}
flake8-quotes = {version = "*", optional = true}
flake8-return = {version = "*", optional = true}
flake8-SQL = {version = "*", optional = true}
flake8-string-format = {version = "*", optional = true}
flake8-tuple = {version = "*", optional = true}
flake8-variables-names = {version = "*", optional = true}
hacking = {version = "*", optional = true}
iniparse = {version = "*", optional = true}
isort = {version = "*", optional = true}
markdown-include = {version = "*", optional = true}
mkdocs-material = {version = "*", optional = true}
mkdocstrings = {version = "*", optional = true}
pandas-vet = {version = "*", optional = true}
pep8-naming = {version = "*", optional = true}
pre-commit = {version = "*", optional = true}
proselint = {version = "*", optional = true}
pystache = {version = "*", optional = true}
pytest = {version = "*", optional = true}
pytest-cov = {version = "*", optional = true}
pytest-html = {version = "*", optional = true}
pytest-watch = {version = "*", optional = true}
pyupgrade = {version = "*", optional = true}
radon = {version = "*", optional = true}
subprocess-tee = {version = "*", optional = true}
toml = {version = "*", optional = true}
tqdm = {version = "*", optional = true}

# commitizen_legacy
cz_legacy = {version = "*", optional = true}

# Serializers
preconvert = {version = "*", optional = true}
preconvert_numpy = {version = "*", optional = true}

[tool.poetry.dev-dependencies]

[tool.poetry.dev-dependencies.commitizen]
git = "https://github.com/kyleking/commitizen.git"
branch = "issues/319"
optional = true

[tool.poetry.extras]
development = [ "add-trailing-comma", "autopep8", "better-exceptions", "cohesion", "commitizen", "darglint", "dlint", "doit", "flake8", "flake8-2020", "flake8-aaa", "flake8-annotations", "flake8-assertive", "flake8-bandit", "flake8-blind-except", "flake8-breakpoint", "flake8-broken-line", "flake8-bugbear", "flake8-builtins", "flake8-cognitive-complexity", "flake8-commas", "flake8-comprehensions", "flake8-debugger", "flake8-deprecated", "flake8-docstrings", "flake8-eradicate", "flake8-expression-complexity", "flake8-fixme", "flake8-functions", "flake8-isort", "flake8-logging-format", "flake8-markdown", "flake8-mock", "flake8-mutable", "flake8-pep3101", "flake8-plone-hasattr", "flake8-print", "flake8-printf-formatting", "flake8-pytest-style", "flake8-quotes", "flake8-return", "flake8-SQL", "flake8-string-format", "flake8-tuple", "flake8-variables-names", "hacking", "iniparse", "isort", "markdown-include", "mkdocs-material", "mkdocstrings", "pandas-vet", "pep8-naming", "pre-commit", "proselint", "pystache", "pytest", "pytest-cov", "pytest-html", "pytest-watch", "pyupgrade", "radon", "subprocess-tee", "toml", "tqdm",]
commitizen_legacy = [ "cz_legacy",]
serializers = [ "preconvert", "preconvert_numpy",]
