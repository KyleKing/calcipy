---
version: 0.2.0a0.{build}

image:
  - Ubuntu
  - Visual Studio 2019

environment:
  # Python versions
  #   Windows: https://www.appveyor.com/docs/windows-images-software/#python
  #   Linux: https://www.appveyor.com/docs/linux-images-software/#python
  matrix:
    # Use a single global Python version for pipx/poetry/etc.
    #   Nox will handle specific python version testing
    - PYTHON_WIN: C:/Python39
      PYTHON_STACK: 3.9

  APPVEYOR_SAVE_CACHE_ON_ERROR: true
  CODECOV_TOKEN: d414dacb-5b8d-4c0b-94e1-42fe8393187d

  # To encrypt passwords, go to Account -> "Settings" -> "Encrypt YAML"

# Must be after the declaration of "PYTHON_STACK" variable
# yamllint disable-line rule:line-length
# https://help.appveyor.com/discussions/questions/32001-ubuntu-python-3-as-default
stack: python %PYTHON_STACK%

cache:
  - .venv -> poetry.lock

build: false

# Specify commands specific to platform (cmd-Windows/sh-Linux/None-Both)
install:
  # Force Python to use UTF-8 encoding instead of cp1252 on Windows
  - cmd: SET PYTHONUTF8=1
  # Set Python paths based on environment variable from matrix
  - cmd: set PATH=%PYTHON_WIN%/Scripts;%PYTHON_WIN%;%PATH%
  - python --version
  # Install pipx to manage CLI installations (poetry, codecov)
  - python -m pip install pipx
  # Manually set the path because "pipx ensurepath" needs a reload to apply
  - pipx ensurepath
  - cmd: set PATH=%USERPROFILE%\.local\bin;%PATH%
  - sh: PATH=~/.local/bin:$PATH
  # Check the PATH
  - cmd: echo %PATH%
  - sh: echo $PATH
  # Install poetry and configure
  - pipx install poetry
  - poetry config virtualenvs.in-project true
  - poetry config --list
  # Figure out what is wrong with the missing .venv
  # https://github.com/python-poetry/poetry/discussions/4141
  - sh: export POETRY_VIRTUALENVS_CREATE=1
  - cmd: echo.%VIRTUAL_ENV%
  - sh: echo $VIRTUAL_ENV
  - sh: deactivate
  - sh: echo $VIRTUAL_ENV
  - sh: unset VIRTUAL_ENV
  - sh: echo $VIRTUAL_ENV
  # Install project-specific dependencies and extras
  - poetry install -E dev -E lint -E test -E commitizen_legacy -vvv

  - poetry env list
  - sh: ls -a
  - sh: poetry show -v

test_script:
  - poetry run doit --continue
  # Install codecov and upload the coverage results
  - python -m pipx install codecov
  - codecov

deploy_script:
  - echo "Deploying..."

on_success:
  - echo "On Success..."

on_failure:
  - echo "On Error..."

artifacts:
  # PLANNED: Specify single files, like wheels, but zip the docs/reports
  - path: releases/tests/*
