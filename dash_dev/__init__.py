"""
# [Dash_Dev](https://github.com/KyleKing/dash_dev)

Python package to simplify developing Python applications. Includes functionality for task running, testing, linting, documenting, and more

Note: the package name is a misnomer and I haven't thought of a better replacement. Use [dash_charts](https://github.com/KyleKing/dash_charts) for building plotly/Dash applications

## Quick Start

Add to a poetry project in `pyproject.toml`:

```toml
[tool.poetry.dev-dependencies.dash_dev]
git = \"https://github.com/KyleKing/dash_dev.git\"
branch = \"main\"
```

Then copy the [`https://github.com/KyleKing/dash_dev/blob/master/dodo.py`](https://github.com/KyleKing/dash_dev/blob/master/dodo.py) file into your project and call with `poetry run doit`

If you have any questions, please [open an issue on Github](https://github.com/KyleKing/dash_dev/issues/new)

## Where Used

- [KyleKing/dash_charts](https://github.com/KyleKing/dash_charts)
- [KyleKing/PiAlarm](https://github.com/KyleKing/PiAlarm)
- [KyleKing/Kitsu_Library_Availability](https://github.com/KyleKing/Kitsu_Library_Availability)
- [KyleKing/Goodreads_Library_Availability](https://github.com/KyleKing/Goodreads_Library_Availability) - *Planned*

## Task list (Dash Charts)

- TODO: Show call chain in dash_charts: https://github.com/vmdesenvolvimento/pycallgraph3

```py
from pycallgraph3 import PyCallGraph
from pycallgraph3.output import GraphvizOutput

with PyCallGraph(output=GraphvizOutput()):
    from datetime import datetime
    time_str = datetime.now().strftime('%Y%m%d%H%M%S')
    filename = f'profile-{time_str}.png'
```

## Test Coverage

<!-- COVERAGE -->

| File | Statements | Missing | Excluded | Coverage |
| --: | --: | --: | --: | --: |
| `dash_dev/__init__.py` | 11 | 0 | 0 | 100.0% |
| `dash_dev/conftest.py` | 22 | 3 | 0 | 86.4% |
| `dash_dev/doit_base.py` | 112 | 27 | 0 | 75.9% |
| `dash_dev/doit_doc.py` | 109 | 70 | 0 | 35.8% |
| `dash_dev/doit_lint.py` | 68 | 20 | 0 | 70.6% |
| `dash_dev/doit_test.py` | 27 | 13 | 0 | 51.9% |
| `dash_dev/log_helpers.py` | 15 | 5 | 0 | 66.7% |

Generated on: 2020-11-12T08:49:01.408303

<!-- /COVERAGE -->
"""  # noqa

__version__ = '0.0.1'
__pkg_name__ = 'dash_dev'

import logging
import sys
from pathlib import Path

from loguru import logger

logger.disable(__pkg_name__)

LOG_DIR = Path(__file__).resolve().parent / '.logs'
"""Output directory for log files."""
LOG_DIR.mkdir(exist_ok=True)

LOGGER_CONFIG = {
    'handlers': [
        {'sink': sys.stdout,
         'backtrace': True, 'diagnose': False},
        {'sink': LOG_DIR / 'debug-{time}.jsonl', 'mode': 'w', 'level': logging.DEBUG, 'serialize': True,
         'rotation': '1 hour', 'backtrace': True, 'diagnose': True},
        {'sink': LOG_DIR / 'debug-{time}.log', 'mode': 'w', 'level': logging.DEBUG,
         'rotation': '1 hour', 'backtrace': True, 'diagnose': True},
    ],
    'extra': {'package': __pkg_name__},
}
"""Loguru configuration. Loguru is deactivated for this package by default and must be activated.

```py
from this_package import __pkg__name__

logger.configure(**LOGGER_CONFIG)
logger.enable(__pkg__name__)

# You can continue to import and enable additional packages as needed, but you should only call configure once
```

"""

# =============== Above Content is Auto-Generated by dash_dev. User content should go below ===============
