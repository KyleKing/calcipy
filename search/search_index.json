{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"calcipy","text":"<p><code>calcipy</code> is a Python package that implements best practices such as code style (linting, auto-fixes), documentation, CI/CD, and logging. Like the calcium carbonate in hard coral, packages can be built on the <code>calcipy</code> foundation.</p> <p><code>calcipy</code> has some configurability, but is tailored for my particular use cases. If you want the same sort of functionality, there are a number of alternatives to consider:</p> <ul> <li>pyscaffold is a much more mature project that aims for the same goals, but with a slightly different approach and tech stack (tox vs. nox, cookiecutter vs. copier, etc.)</li> <li>tidypy, pylama, and codecheck offer similar functionality of bundling and running static checkers, but makes far fewer assumptions</li> <li>pytoil is a general CLI tool for developer automation</li> <li>And many more such as pyta, prospector, wemake-python-styleguide / cjolowicz/cookiecutter-hypermodern-python, formate, johnthagen/python-blueprint, oxsecurity/megalinter, etc.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Calcipy needs a few static files managed using copier and a template project: kyleking/calcipy_template</p> <p>You can quickly use the template to create a new project or add calcipy to an existing one:</p> <pre><code># Install copier. pipx is recommended\npipx install copier\n\n# To create a new project\ncopier copy gh:KyleKing/calcipy_template new_project\ncd new_project\n\n# Or convert/update an existing one\ncd my_project\ncopier copy gh:KyleKing/calcipy_template .\ncopier update\n</code></pre>"},{"location":"#calcipy-cli","title":"Calcipy CLI","text":"<p>Additionally, <code>calcipy</code> can be run as a CLI application without adding the package as a dependency.</p> <p>Quick Start:</p> <pre><code># For the CLI, only install a few of the extras which can be used from a few different CLI commands\npipx install 'calcipy[lint,tags]'\n\n# Use 'tags' to create a CODE_TAG_SUMMARY of the specified directory\ncalcipy-tags tags --help\ncalcipy-tags tags --base-dir=~/path/to/my_project\n\n# You can list all provided CLI commands with\npipx list\n</code></pre> <pre><code>venvs are in ~/.local/pipx/venvs\napps are exposed on your $PATH at ~/.local/bin\n   package calcipy 1.4.0, installed using Python 3.11.4\n    - calcipy\n    - calcipy-lint\n    - calcipy-pack\n    - calcipy-tags\n    - calcipy-types\n</code></pre> <p>Note: the CLI output below is compressed for readability, but you can try running each of these commands locally to see the most up-to-date documentation and the full set of options. The \u201cUsage\u201d, \u201cCore options\u201d, and \u201cGlobal Task Options\u201d are the same for each subsequent command, so they are excluded for brevity.</p> <pre><code>&gt; calcipy-lint\nUsage: calcipy-lint [--core-opts] &lt;subcommand&gt; [--subcommand-opts] ...\n\nCore options:\n\n  --complete                         Print tab-completion candidates for given parse remainder.\n  --hide=STRING                      Set default value of run()'s 'hide' kwarg.\n  --print-completion-script=STRING   Print the tab-completion script for your preferred shell (bash|zsh|fish).\n  --prompt-for-sudo-password         Prompt user at start of session for the sudo.password config value.\n  --write-pyc                        Enable creation of .pyc files.\n  -d, --debug                        Enable debug output.\n  -D INT, --list-depth=INT           When listing tasks, only show the first INT levels.\n  -e, --echo                         Echo executed commands before running.\n  -f STRING, --config=STRING         Runtime configuration file to use.\n  -F STRING, --list-format=STRING    Change the display format used when listing tasks. Should be one of: flat (default), nested, json.\n  -h [STRING], --help[=STRING]       Show core or per-task help and exit.\n  -l [STRING], --list[=STRING]       List available tasks, optionally limited to a namespace.\n  -p, --pty                          Use a pty when executing shell commands.\n  -R, --dry                          Echo commands instead of running.\n  -T INT, --command-timeout=INT      Specify a global command execution timeout, in seconds.\n  -V, --version                      Show version and exit.\n  -w, --warn-only                    Warn, instead of failing, when shell commands fail.\n\nSubcommands:\n\n  lint.autopep8       Run autopep8.\n  lint.check (lint)   Run ruff as check-only.\n  lint.fix            Run ruff and apply fixes.\n  lint.pre-commit     Run pre-commit.\n  lint.pylint         Run pylint.\n  lint.security       Attempt to identify possible security vulnerabilities.\n  lint.watch          Run ruff as check-only.\n\nGlobal Task Options:\n\n  *file_args             List of Paths available globally to all tasks. Will resolve paths with working_dir\n  --keep-going           Continue running tasks even on failure\n  --working_dir=STRING   Set the cwd for the program. Example: \"../run --working-dir .. lint test\"\n  -v,-vv,-vvv            Globally configure logger verbosity (-vvv for most verbose)\n\n&gt; calcipy-pack\n\nSubcommands:\n\n  pack.check-licenses   Check licenses for compatibility with `licensecheck`.\n  pack.install-extras   Run poetry install with all extras.\n  pack.lock             Ensure poetry.lock is  up-to-date.\n  pack.publish          Build the distributed format(s) and publish.\n\n&gt; calcipy-tags\n\nSubcommands:\n\n  tags.collect-code-tags (tags)   Create a `CODE_TAG_SUMMARY.md` with a table          for TODO- and FIXME-style code comments.\n\n&gt; calcipy-types\n\nSubcommands:\n\n  types.basedpyright   Run basedpyright.\n  types.mypy      Run mypy.\n  types.pyright   Run pyright.\n</code></pre>"},{"location":"#calcipy-pre-commit","title":"Calcipy Pre-Commit","text":"<p><code>calcipy</code> can also be used as a <code>pre-commit</code> task by adding the below snippet to your <code>pre-commit</code> file:</p> <pre><code>repos:\n  - repo: https://github.com/KyleKing/calcipy\n    rev: main\n    hooks:\n      - id: tags\n      - id: lint-fix\n      - id: types\n</code></pre>"},{"location":"#project-status","title":"Project Status","text":"<p>See the <code>Open Issues</code> and/or the CODE_TAG_SUMMARY. For release history, see the CHANGELOG.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome pull requests! For your pull request to be accepted smoothly, we suggest that you first open a GitHub issue to discuss your idea. For resources on getting started with the code base, see the below documentation:</p> <ul> <li>DEVELOPER_GUIDE</li> <li>STYLE_GUIDE</li> </ul>"},{"location":"#code-of-conduct","title":"Code of Conduct","text":"<p>We follow the Contributor Covenant Code of Conduct.</p>"},{"location":"#open-source-status","title":"Open Source Status","text":"<p>We try to reasonably meet most aspects of the \u201cOpenSSF scorecard\u201d from Open Source Insights</p>"},{"location":"#responsible-disclosure","title":"Responsible Disclosure","text":"<p>If you have any security issue to report, please contact the project maintainers privately. You can reach us at dev.act.kyle@gmail.com.</p>"},{"location":"#license","title":"License","text":"<p>LICENSE</p>"},{"location":"docs/CHANGELOG/","title":"Docs","text":""},{"location":"docs/CHANGELOG/#unreleased","title":"Unreleased","text":""},{"location":"docs/CHANGELOG/#feat","title":"Feat","text":"<ul> <li>remove bandit/security task</li> <li>remove flake8</li> </ul>"},{"location":"docs/CHANGELOG/#fix","title":"Fix","text":"<ul> <li>shorten main task list</li> <li>remove autopep8</li> <li>remove semgrep</li> </ul>"},{"location":"docs/CHANGELOG/#210-2024-04-17","title":"2.1.0 (2024-04-17)","text":""},{"location":"docs/CHANGELOG/#feat_1","title":"Feat","text":"<ul> <li>add basedpyright</li> </ul>"},{"location":"docs/CHANGELOG/#fix_1","title":"Fix","text":"<ul> <li>exclude plantuml package 1.10.0</li> </ul>"},{"location":"docs/CHANGELOG/#refactor","title":"Refactor","text":"<ul> <li>replace filter with iterator</li> </ul>"},{"location":"docs/CHANGELOG/#204-2024-01-31","title":"2.0.4 (2024-01-31)","text":""},{"location":"docs/CHANGELOG/#fix_2","title":"Fix","text":"<ul> <li>add \u2013doc-sub-dir for Code Tag generation without copier-answers</li> <li>create the code tag summary directory if it doesn\u2019t already exist</li> </ul>"},{"location":"docs/CHANGELOG/#203-2023-11-21","title":"2.0.3 (2023-11-21)","text":""},{"location":"docs/CHANGELOG/#fix_3","title":"Fix","text":"<ul> <li>pin a recent version of virtualenv for Python 3.12 + Nox</li> </ul>"},{"location":"docs/CHANGELOG/#202-2023-11-08","title":"2.0.2 (2023-11-08)","text":""},{"location":"docs/CHANGELOG/#refactor_1","title":"Refactor","text":"<ul> <li>copier-auto-update</li> </ul>"},{"location":"docs/CHANGELOG/#201-2023-09-08","title":"2.0.1 (2023-09-08)","text":""},{"location":"docs/CHANGELOG/#fix_4","title":"Fix","text":"<ul> <li>add missing setuptools for some mkdocs dependencies</li> <li>add calcipy-docs and restore missing extras for type checking</li> <li>add scoped \u2018calcipy-test\u2019</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_2","title":"Refactor","text":"<ul> <li>really move nox</li> <li>use ruff.external to allow list flake8 rules</li> </ul>"},{"location":"docs/CHANGELOG/#200-2023-09-02","title":"2.0.0 (2023-09-02)","text":""},{"location":"docs/CHANGELOG/#feat_2","title":"Feat","text":"<ul> <li>drop Python 3.8</li> </ul>"},{"location":"docs/CHANGELOG/#fix_5","title":"Fix","text":"<ul> <li>specify a unique name when binding new kwargs</li> </ul>"},{"location":"docs/CHANGELOG/#164-2023-08-28","title":"1.6.4 (2023-08-28)","text":""},{"location":"docs/CHANGELOG/#fix_6","title":"Fix","text":"<ul> <li>update pyrate-limiter</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_3","title":"Refactor","text":"<ul> <li>address pydantic v2 migration warnings</li> </ul>"},{"location":"docs/CHANGELOG/#163-2023-08-13","title":"1.6.3 (2023-08-13)","text":""},{"location":"docs/CHANGELOG/#fix_7","title":"Fix","text":"<ul> <li>remove redundant beartype to lru_cache</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_4","title":"Refactor","text":"<ul> <li>resolve asdf</li> <li>tried get_env_vars</li> </ul>"},{"location":"docs/CHANGELOG/#162-2023-08-12","title":"1.6.2 (2023-08-12)","text":""},{"location":"docs/CHANGELOG/#161rc0-2023-08-12","title":"1.6.1rc0 (2023-08-12)","text":""},{"location":"docs/CHANGELOG/#fix_8","title":"Fix","text":"<ul> <li>support partial kwargs for pre/post</li> <li>defer Task to support decorator chaining</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_5","title":"Refactor","text":"<ul> <li>setup for deferred task refactor</li> <li>update dependency versions</li> <li>update copier for a more generic environment variable</li> </ul>"},{"location":"docs/CHANGELOG/#160-2023-07-23","title":"1.6.0 (2023-07-23)","text":""},{"location":"docs/CHANGELOG/#feat_3","title":"Feat","text":"<ul> <li>experiment with griffe for version bumping</li> </ul>"},{"location":"docs/CHANGELOG/#fix_9","title":"Fix","text":"<ul> <li>resolve minor bugs in griffe experiment</li> <li>remove dependency on flake8-beartype</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_6","title":"Refactor","text":"<ul> <li>downgrade replacement machine error to warning</li> </ul>"},{"location":"docs/CHANGELOG/#150-2023-07-22","title":"1.5.0 (2023-07-22)","text":""},{"location":"docs/CHANGELOG/#feat_4","title":"Feat","text":"<ul> <li>add configurable ignore patterns for tags</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_7","title":"Refactor","text":"<ul> <li>resolve pylint warnings</li> <li>run bump-pydantic</li> </ul>"},{"location":"docs/CHANGELOG/#142-2023-07-16","title":"1.4.2 (2023-07-16)","text":""},{"location":"docs/CHANGELOG/#fix_10","title":"Fix","text":"<ul> <li>use the correct exclude rule for semgrep</li> <li>support pydantic v2 serialization</li> <li>skip SemGrep rule to pin GitHub Actions to commit IDs</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_8","title":"Refactor","text":"<ul> <li>resolve local test suite problems</li> </ul>"},{"location":"docs/CHANGELOG/#141-2023-07-07","title":"1.4.1 (2023-07-07)","text":""},{"location":"docs/CHANGELOG/#fix_11","title":"Fix","text":"<ul> <li>retrieve only unique python versions from .tool-versions</li> </ul>"},{"location":"docs/CHANGELOG/#140-2023-06-25","title":"1.4.0 (2023-06-25)","text":""},{"location":"docs/CHANGELOG/#feat_5","title":"Feat","text":"<ul> <li>add calcipy-pack to use install-extras without the extras</li> </ul>"},{"location":"docs/CHANGELOG/#fix_12","title":"Fix","text":"<ul> <li>show a readable warning when gh, pyright, and/or pre-commit are not installed</li> <li>use calcipy\u2019s python environment when installed with pipx</li> </ul>"},{"location":"docs/CHANGELOG/#130-2023-06-21","title":"1.3.0 (2023-06-21)","text":""},{"location":"docs/CHANGELOG/#feat_6","title":"Feat","text":"<ul> <li>switch to httpx for async requests</li> </ul>"},{"location":"docs/CHANGELOG/#perf","title":"Perf","text":"<ul> <li>lazy cache compiling the regex</li> </ul>"},{"location":"docs/CHANGELOG/#126-2023-06-17","title":"1.2.6 (2023-06-17)","text":""},{"location":"docs/CHANGELOG/#fix_13","title":"Fix","text":"<ul> <li>handle missing git remotes in code tag collection</li> <li>always re-cache packages if empty</li> <li>ignore new TD002 &amp; TD003 linting rules</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_9","title":"Refactor","text":"<ul> <li>try to handle exceptions when no git origin URL</li> </ul>"},{"location":"docs/CHANGELOG/#125-2023-05-23","title":"1.2.5 (2023-05-23)","text":""},{"location":"docs/CHANGELOG/#fix_14","title":"Fix","text":"<ul> <li>resolve typing and import errors</li> <li>upgrade to invoke 2.1.2</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_10","title":"Refactor","text":"<ul> <li>suppress ruff autofix</li> </ul>"},{"location":"docs/CHANGELOG/#124-2023-05-16","title":"1.2.4 (2023-05-16)","text":""},{"location":"docs/CHANGELOG/#fix_15","title":"Fix","text":"<ul> <li>add pack.install-extras</li> <li>bump minimum pymdown dependency</li> <li>pydantic alias doesn\u2019t work like that</li> <li>refactor for higher pylint quality</li> <li>update the help string to include \u2013keep-going</li> <li>support branch coverage</li> <li>move pyright to \u2018main\u2019 tasks</li> </ul>"},{"location":"docs/CHANGELOG/#123-2023-04-08","title":"1.2.3 (2023-04-08)","text":""},{"location":"docs/CHANGELOG/#fix_16","title":"Fix","text":"<ul> <li>handle dev installs when only calcipy</li> </ul>"},{"location":"docs/CHANGELOG/#122-2023-04-08","title":"1.2.2 (2023-04-08)","text":""},{"location":"docs/CHANGELOG/#fix_17","title":"Fix","text":"<ul> <li>add preview of \u2013keep-going</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_11","title":"Refactor","text":"<ul> <li>extract task logic from wrapper</li> </ul>"},{"location":"docs/CHANGELOG/#121-2023-04-07","title":"1.2.1 (2023-04-07)","text":""},{"location":"docs/CHANGELOG/#fix_18","title":"Fix","text":"<ul> <li>skip assert_used in bandit</li> </ul>"},{"location":"docs/CHANGELOG/#120-2023-04-06","title":"1.2.0 (2023-04-06)","text":""},{"location":"docs/CHANGELOG/#feat_7","title":"Feat","text":"<ul> <li>add test.check with duplicate name logic</li> </ul>"},{"location":"docs/CHANGELOG/#fix_19","title":"Fix","text":"<ul> <li>remove lru_cache, which was causing mypy errors</li> </ul>"},{"location":"docs/CHANGELOG/#111-2023-04-06","title":"1.1.1 (2023-04-06)","text":""},{"location":"docs/CHANGELOG/#fix_20","title":"Fix","text":"<ul> <li>resolve linting errors</li> <li>use copier copy</li> </ul>"},{"location":"docs/CHANGELOG/#110-2023-04-06","title":"1.1.0 (2023-04-06)","text":""},{"location":"docs/CHANGELOG/#feat_8","title":"Feat","text":"<ul> <li>add experimental check duplicate test names</li> </ul>"},{"location":"docs/CHANGELOG/#fix_21","title":"Fix","text":"<ul> <li>suppress unexpected exit errors in update docs</li> <li>skip pre-commit uninstall for doc.deploy when pre-commit not available</li> <li>skip pre-commit on doc.deploy</li> </ul>"},{"location":"docs/CHANGELOG/#101-2023-03-01","title":"1.0.1 (2023-03-01)","text":""},{"location":"docs/CHANGELOG/#fix_22","title":"Fix","text":"<ul> <li>bump minimum ruff version</li> </ul>"},{"location":"docs/CHANGELOG/#100-2023-02-25","title":"1.0.0 (2023-02-25)","text":""},{"location":"docs/CHANGELOG/#fix_23","title":"Fix","text":"<ul> <li>lower default logging level</li> </ul>"},{"location":"docs/CHANGELOG/#100rc7-2023-02-23","title":"1.0.0rc7 (2023-02-23)","text":""},{"location":"docs/CHANGELOG/#feat_9","title":"Feat","text":"<ul> <li>add lint.security to pre-commit lint-fix hook</li> </ul>"},{"location":"docs/CHANGELOG/#fix_24","title":"Fix","text":"<ul> <li>remove types hook, which doesn\u2019t work when not local</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_12","title":"Refactor","text":"<ul> <li>make task summary optional</li> <li>configure start program inline</li> </ul>"},{"location":"docs/CHANGELOG/#100rc6-2023-02-22","title":"1.0.0rc6 (2023-02-22)","text":""},{"location":"docs/CHANGELOG/#fix_25","title":"Fix","text":"<ul> <li>provide subcommands to support pre-commit</li> </ul>"},{"location":"docs/CHANGELOG/#100rc5-2023-02-22","title":"1.0.0rc5 (2023-02-22)","text":""},{"location":"docs/CHANGELOG/#feat_10","title":"Feat","text":"<ul> <li>add pre-commit hooks and update docs</li> </ul>"},{"location":"docs/CHANGELOG/#fix_26","title":"Fix","text":"<ul> <li>handle KeyError when not yet on PyPi\u2019s JSON API</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_13","title":"Refactor","text":"<ul> <li>sync with corallium ruff and remove flake8 class-attr-order</li> </ul>"},{"location":"docs/CHANGELOG/#100rc4-2023-02-22","title":"1.0.0rc4 (2023-02-22)","text":""},{"location":"docs/CHANGELOG/#fix_27","title":"Fix","text":"<ul> <li>fully support nox and corallium</li> </ul>"},{"location":"docs/CHANGELOG/#100rc3-2023-02-22","title":"1.0.0rc3 (2023-02-22)","text":""},{"location":"docs/CHANGELOG/#fix_28","title":"Fix","text":"<ul> <li>add depedency on corallium</li> </ul>"},{"location":"docs/CHANGELOG/#100rc2-2023-02-21","title":"1.0.0rc2 (2023-02-21)","text":""},{"location":"docs/CHANGELOG/#feat_11","title":"Feat","text":"<ul> <li>merge shoal source code into calcipy</li> </ul>"},{"location":"docs/CHANGELOG/#100rc1-2023-02-21","title":"1.0.0rc1 (2023-02-21)","text":""},{"location":"docs/CHANGELOG/#fix_29","title":"Fix","text":"<ul> <li>upgrade shoal dependency and add summary</li> <li>add pylint to document</li> <li>move autopep8 to the lint extras</li> </ul>"},{"location":"docs/CHANGELOG/#100rc0-2023-02-20","title":"1.0.0rc0 (2023-02-20)","text":""},{"location":"docs/CHANGELOG/#feat_12","title":"Feat","text":"<ul> <li>fully support working-dir by wrapping ctx.run</li> <li>recursively find the tool versions file</li> <li>add dont_skip for testing</li> <li>add tests for code tag collector</li> <li>replace dg with user configuration file</li> <li>better support min-cover</li> <li>unit test write_autoformatted_md_sections</li> <li>start using check_imports</li> <li>support prereleases and add autopep8</li> <li>introduce cl namespace</li> <li>run lint on file_args and use absolufy</li> <li>add initial version of doc namespace</li> <li>remove pre-commit; add doc and ddict extras</li> <li>add progress indicator to tasks</li> <li>add lint.security</li> <li>add ./run to generlize local entrypoint</li> <li>add lint.pre-commit</li> <li>restore most of noxfile</li> <li>run mypy-silent and add main task</li> <li>use can_skip for the package_lock file</li> <li>start manually fixing lint issues</li> <li>add linting</li> <li>migrate over stale package logic</li> <li>add pyright, mypy, and DEFAULTS</li> <li>add write_json and cached pyproject reader</li> <li>add pytest-based tasks and first unit tests</li> <li>experiment with parallel processing</li> <li>init placeholders for new namespaces</li> <li>add can_skip</li> <li>add initial nox task to invoke</li> <li>switch to invoke</li> <li>start restoring files and switching to shoal</li> <li>add shoal</li> </ul>"},{"location":"docs/CHANGELOG/#fix_30","title":"Fix","text":"<ul> <li>correct ignore pattern logic and expand task tests</li> <li>get doc and cl tasks working</li> <li>code tag summary and rename default tasks</li> <li>properly map CLI arguments to code tag collector</li> <li>show all URLs on the same line in CTC</li> <li>write Code Tags to docs/docs</li> <li>resolve issues with test.watch-json</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_14","title":"Refactor","text":"<ul> <li>update Progress task</li> <li>extract use_pty to a default in shoal</li> <li>generlize find_in_parents for pyproject.toml as well</li> <li>introduce logger.print and print_debug</li> <li>drop absolufy-imports task</li> <li>simplify configuration</li> <li>fix remaining pyright and flake8 errors</li> <li>rename write-json to coverage</li> <li>resolve pylint issues</li> <li>reorder main tasks</li> <li>resolve flake8 warnings and better manage filenames</li> <li>apply autopep8 to fix whitespace issues</li> <li>import initialized logger directly</li> <li>try to wrap running tasks programmatically\u2026</li> <li>run prc main</li> <li>move log configuration to shoal.cli.task</li> <li>resolve typecheck errors</li> <li>manually resolve additional linting errors</li> <li>make lint.check default</li> <li>extract start program to shoal</li> <li>another round of manual lint corrections</li> <li>move can_skip to shoal</li> <li> <p>nest invoke-specific code in tasks/</p> </li> <li> <p>drop pytest-html and conftest completely</p> </li> </ul>"},{"location":"docs/CHANGELOG/#0216-2023-01-31","title":"0.21.6 (2023-01-31)","text":""},{"location":"docs/CHANGELOG/#feat_13","title":"Feat","text":"<ul> <li>use the \u2013now flag for ptw!</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_15","title":"Refactor","text":"<ul> <li>remove autoflake in favor of unimport</li> </ul>"},{"location":"docs/CHANGELOG/#0215-2022-11-27","title":"0.21.5 (2022-11-27)","text":""},{"location":"docs/CHANGELOG/#fix_31","title":"Fix","text":"<ul> <li>escape % in yaml files as well</li> </ul>"},{"location":"docs/CHANGELOG/#0214-2022-11-20","title":"0.21.4 (2022-11-20)","text":""},{"location":"docs/CHANGELOG/#fix_32","title":"Fix","text":"<ul> <li>handle % in path names for ctt</li> <li>suppress code tag failures when not a git directory</li> <li>add support for tomllib in Python 3.11!</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_16","title":"Refactor","text":"<ul> <li>copier update</li> </ul>"},{"location":"docs/CHANGELOG/#0213-2022-11-13","title":"0.21.3 (2022-11-13)","text":""},{"location":"docs/CHANGELOG/#fix_33","title":"Fix","text":"<ul> <li>remove unimplemented diff-cover</li> <li>exit 1 on semgrep errors</li> </ul>"},{"location":"docs/CHANGELOG/#0212-2022-11-12","title":"0.21.2 (2022-11-12)","text":""},{"location":"docs/CHANGELOG/#fix_34","title":"Fix","text":"<ul> <li>add relative path prefix for linting \u2018./\u2019</li> <li>ensure that cz bump doesn\u2019t break the requirements file</li> <li>bump minimum pip-check</li> </ul>"},{"location":"docs/CHANGELOG/#0211-2022-11-05","title":"0.21.1 (2022-11-05)","text":""},{"location":"docs/CHANGELOG/#fix_35","title":"Fix","text":"<ul> <li>install poetry for \u2018doit publish\u2019</li> <li>bump minimum mkdocs for deploy_docs</li> </ul>"},{"location":"docs/CHANGELOG/#0210-2022-11-05","title":"0.21.0 (2022-11-05)","text":""},{"location":"docs/CHANGELOG/#feat_14","title":"Feat","text":"<ul> <li>remove if-expr and other unnecessary new flake8 plugins</li> <li>merge extra flake8 packages based on flake8-aggressive</li> </ul>"},{"location":"docs/CHANGELOG/#fix_36","title":"Fix","text":"<ul> <li>prevent line break in table for Code Tag summary</li> <li>add pdbr with rich to replace pdbpp</li> </ul>"},{"location":"docs/CHANGELOG/#0201-2022-10-19","title":"0.20.1 (2022-10-19)","text":""},{"location":"docs/CHANGELOG/#fix_37","title":"Fix","text":"<ul> <li>drop pdbpp and add flake8-fine-pytest</li> </ul>"},{"location":"docs/CHANGELOG/#0200-2022-10-16","title":"0.20.0 (2022-10-16)","text":""},{"location":"docs/CHANGELOG/#feat_15","title":"Feat","text":"<ul> <li>sign commitizen tags</li> <li>add plantuml generation to mkdocs</li> </ul>"},{"location":"docs/CHANGELOG/#fix_38","title":"Fix","text":"<ul> <li>remove version conflict with flake8-simplify and cl_bump</li> </ul>"},{"location":"docs/CHANGELOG/#0191-2022-10-13","title":"0.19.1 (2022-10-13)","text":""},{"location":"docs/CHANGELOG/#fix_39","title":"Fix","text":"<ul> <li>don\u2019t auto-install types</li> </ul>"},{"location":"docs/CHANGELOG/#0190-2022-10-06","title":"0.19.0 (2022-10-06)","text":""},{"location":"docs/CHANGELOG/#feat_16","title":"Feat","text":"<ul> <li>support optional logging of arguments</li> </ul>"},{"location":"docs/CHANGELOG/#fix_40","title":"Fix","text":"<ul> <li>split mypy install from mypy run</li> </ul>"},{"location":"docs/CHANGELOG/#0180-2022-09-27","title":"0.18.0 (2022-09-27)","text":""},{"location":"docs/CHANGELOG/#feat_17","title":"Feat","text":"<ul> <li>support Arrow in pydantic and mypy (ArrowType was causing errors)</li> <li>remove pdoc(s) from document task</li> <li>add gen_ref_nav!</li> <li>tried pybetter, but too focused on adding all</li> <li>#102: sort-of-replace pdocs, but pdoc only shows one function</li> <li>add mypy install argument</li> <li>expand flake8 and reduce tests</li> </ul>"},{"location":"docs/CHANGELOG/#fix_41","title":"Fix","text":"<ul> <li>re-run prdc</li> <li>lower fail-under for diff. Raise for regular test</li> <li>standardize on a single doit task list</li> <li>Pathlib.absolute is not documented. Use .resolve</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_17","title":"Refactor","text":"<ul> <li>add type hints and minor changes for mypy</li> <li>make python files non-executable (chmod -x)</li> </ul>"},{"location":"docs/CHANGELOG/#0171-2022-09-22","title":"0.17.1 (2022-09-22)","text":""},{"location":"docs/CHANGELOG/#fix_42","title":"Fix","text":"<ul> <li>pytest cache assert circular reference</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_18","title":"Refactor","text":"<ul> <li>move check_security from nox into doit</li> </ul>"},{"location":"docs/CHANGELOG/#0170-2022-09-17","title":"0.17.0 (2022-09-17)","text":""},{"location":"docs/CHANGELOG/#feat_18","title":"Feat","text":"<ul> <li>add docformat</li> <li>make pyupgrade flag configurable based on minimum python version</li> <li>replace pendulum with arrow</li> <li>update to latest copier</li> </ul>"},{"location":"docs/CHANGELOG/#fix_43","title":"Fix","text":"<ul> <li>move yamllint configuration to project-specific config</li> <li>naive datetimes can\u2019t be subtracted on Windows</li> <li>hack together a dictionary instead of punq</li> <li>drop safety because of false positives on Calcipy CalVer</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_19","title":"Refactor","text":"<ul> <li>experiment with custom semgrep rules</li> <li>formalize solution from last commit</li> <li>try to fix punq by switching to functions</li> <li>fix one test, refactor a little, but punq is still not working</li> <li>begin replacing attrs with pydantic</li> <li>update semgrep nox task</li> <li>upgrade copier with linting fixes</li> </ul>"},{"location":"docs/CHANGELOG/#0160-2022-08-04","title":"0.16.0 (2022-08-04)","text":""},{"location":"docs/CHANGELOG/#feat_19","title":"Feat","text":"<ul> <li>add flake8-simplify</li> </ul>"},{"location":"docs/CHANGELOG/#fix_44","title":"Fix","text":"<ul> <li>show only date in coverage table</li> </ul>"},{"location":"docs/CHANGELOG/#0150-2022-08-03","title":"0.15.0 (2022-08-03)","text":""},{"location":"docs/CHANGELOG/#fix_45","title":"Fix","text":"<ul> <li>resolve pyroma errors by installing poetry as a module</li> </ul>"},{"location":"docs/CHANGELOG/#0150rc0-2022-07-24","title":"0.15.0rc0 (2022-07-24)","text":""},{"location":"docs/CHANGELOG/#feat_20","title":"Feat","text":"<ul> <li>init update workflow and toml sorter</li> <li>create script to bump toml minimum requirements</li> </ul>"},{"location":"docs/CHANGELOG/#fix_46","title":"Fix","text":"<ul> <li>properly handle missing datetime</li> <li>try to use separate sqlite files for pre-commit and doit</li> <li>correct safety arguments</li> <li>use the unversioned API for releases</li> <li>try to handle pypi response when no \u201creleases\u201d</li> <li>handle prefix of \u201c*\u201d</li> <li>improve error message when \u201creleases\u201d not present</li> <li> <p>use sqlite3 for pre-commit concurrent doit access</p> </li> <li> <p>bump Python to 3.8.4 and drop 3.7</p> </li> </ul>"},{"location":"docs/CHANGELOG/#0145-2022-03-05","title":"0.14.5 (2022-03-05)","text":""},{"location":"docs/CHANGELOG/#fix_47","title":"Fix","text":"<ul> <li>#91: prevent minified files from appearing in Code Tag Summary</li> </ul>"},{"location":"docs/CHANGELOG/#0144-2022-03-01","title":"0.14.4 (2022-03-01)","text":""},{"location":"docs/CHANGELOG/#fix_48","title":"Fix","text":"<ul> <li>set upper limit to fix flake8-bandit compat</li> </ul>"},{"location":"docs/CHANGELOG/#0143-2022-03-01","title":"0.14.3 (2022-03-01)","text":""},{"location":"docs/CHANGELOG/#fix_49","title":"Fix","text":"<ul> <li>suppress only known git blame errors</li> <li>use Github tables to prevent multi-line rows in Code Tag Summary</li> </ul>"},{"location":"docs/CHANGELOG/#0142-2022-02-27","title":"0.14.2 (2022-02-27)","text":""},{"location":"docs/CHANGELOG/#fix_50","title":"Fix","text":"<ul> <li>don\u2019t allow multi-line tables</li> </ul>"},{"location":"docs/CHANGELOG/#0141-2022-02-27","title":"0.14.1 (2022-02-27)","text":""},{"location":"docs/CHANGELOG/#fix_51","title":"Fix","text":"<ul> <li>lower pandas constraint for better 3.7 support</li> <li>drop generation of requirements.txt</li> </ul>"},{"location":"docs/CHANGELOG/#0140-2022-02-27","title":"0.14.0 (2022-02-27)","text":""},{"location":"docs/CHANGELOG/#feat_21","title":"Feat","text":"<ul> <li>use next-gen attrs syntax</li> <li>improve code tag regex</li> </ul>"},{"location":"docs/CHANGELOG/#fix_52","title":"Fix","text":"<ul> <li>correct type annotations</li> <li>undo silent nox step</li> <li>make coverage.json optional for task_doc</li> </ul>"},{"location":"docs/CHANGELOG/#0130-2022-02-23","title":"0.13.0 (2022-02-23)","text":""},{"location":"docs/CHANGELOG/#feat_22","title":"Feat","text":"<ul> <li>drop AppVeyor and update with copier</li> <li>#67: initialize GH CI Action</li> </ul>"},{"location":"docs/CHANGELOG/#fix_53","title":"Fix","text":"<ul> <li>drop appveyor from cz version files</li> <li>attempt to resolve UnicodeError on Windows action</li> <li>address more minor CI errors</li> <li>make yamllint more relaxed</li> <li>attempt to resolve CI issues</li> <li>remove diff-quality check until fixed for CI</li> <li>always use Interactive when using /dev/null</li> <li>run push hook stage and format subproject</li> <li>support Python 3.7.12</li> <li>don\u2019t suppress nox missing interpreter errors</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_20","title":"Refactor","text":"<ul> <li>pre-commit can be run in one command</li> <li>resolve LGTM error</li> </ul>"},{"location":"docs/CHANGELOG/#0122-2022-02-21","title":"0.12.2 (2022-02-21)","text":""},{"location":"docs/CHANGELOG/#fix_54","title":"Fix","text":"<ul> <li>skip cassette files</li> </ul>"},{"location":"docs/CHANGELOG/#0121-2022-02-18","title":"0.12.1 (2022-02-18)","text":""},{"location":"docs/CHANGELOG/#fix_55","title":"Fix","text":"<ul> <li>always return 0 to complete format task</li> <li>use short paths when formatting Python code if available</li> </ul>"},{"location":"docs/CHANGELOG/#0120-2022-02-18","title":"0.12.0 (2022-02-18)","text":""},{"location":"docs/CHANGELOG/#feat_23","title":"Feat","text":"<ul> <li>initialize calcipy pre-commit hook</li> </ul>"},{"location":"docs/CHANGELOG/#0110-2022-02-18","title":"0.11.0 (2022-02-18)","text":""},{"location":"docs/CHANGELOG/#feat_24","title":"Feat","text":"<ul> <li>don\u2019t verify on cz_bump</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_21","title":"Refactor","text":"<ul> <li>format fixes</li> <li>reduce noise on matched vulnerabilities</li> <li>make run_cmd public</li> <li>remove jsonlint action</li> <li>use beartype typing</li> <li>move pre-commit hooks into doit</li> </ul>"},{"location":"docs/CHANGELOG/#0100-2022-01-19","title":"0.10.0 (2022-01-19)","text":""},{"location":"docs/CHANGELOG/#feat_25","title":"Feat","text":"<ul> <li>create Github release if gh CLI is installed</li> </ul>"},{"location":"docs/CHANGELOG/#091-2022-01-17","title":"0.9.1 (2022-01-17)","text":""},{"location":"docs/CHANGELOG/#fix_56","title":"Fix","text":"<ul> <li>correct code-tag-collector for CLI use</li> <li>use target file\u2019s directory for git info</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_22","title":"Refactor","text":"<ul> <li>drop template echo command</li> </ul>"},{"location":"docs/CHANGELOG/#090-2022-01-17","title":"0.9.0 (2022-01-17)","text":""},{"location":"docs/CHANGELOG/#feat_26","title":"Feat","text":"<ul> <li>show code tag summary as a table</li> <li>add date of last blame to code tag summary</li> <li>only link code tag from line number</li> <li>use revision-specific commit hashes</li> <li>add git links to code tag summary</li> <li>add python format pre-commit hook</li> <li>add support for TOML formatting with taplo</li> </ul>"},{"location":"docs/CHANGELOG/#fix_57","title":"Fix","text":"<ul> <li>handle \u201c0000..\u201d hash by using branch name</li> <li>handle non-git directories</li> <li>use correct line number for pinned hash</li> <li>handle git dependencies when checking stale packages</li> <li>use positional arguments for pre-commit commands</li> <li>correct syntax error in pre-commit command</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_23","title":"Refactor","text":"<ul> <li>make slow python pre-commit push-only</li> <li>apply auto-format tools to test project</li> </ul>"},{"location":"docs/CHANGELOG/#082-2022-01-16","title":"0.8.2 (2022-01-16)","text":""},{"location":"docs/CHANGELOG/#fix_58","title":"Fix","text":"<ul> <li>drop all references to CalVer</li> </ul>"},{"location":"docs/CHANGELOG/#081-2022-01-16","title":"0.8.1 (2022-01-16)","text":""},{"location":"docs/CHANGELOG/#refactor_24","title":"Refactor","text":"<ul> <li>drop tag_format and use semver-only</li> </ul>"},{"location":"docs/CHANGELOG/#080-2022-01-16","title":"0.8.0 (2022-01-16)","text":""},{"location":"docs/CHANGELOG/#feat_27","title":"Feat","text":"<ul> <li>add pip-check for prettier outdated</li> <li>add cct command</li> <li>initialize the cement CLI application</li> <li>replace toml with tomli (#74)</li> <li>move wily to nox to reduce version conflicts</li> <li>add pip-audit</li> <li>add attrs_strict</li> <li>trim trailing whitespace from doc output</li> </ul>"},{"location":"docs/CHANGELOG/#fix_59","title":"Fix","text":"<ul> <li>bump year to 2022</li> <li>code_tag_collector must return doit-compliant value (None)</li> <li>only run pre-commit once</li> <li>Code Tag Collector cannot return a Path for DoIt tasks</li> <li>cct was not being created as an alias. Use full command</li> <li>wily</li> <li>properly exclude auto-generated doc files from code tag collector</li> <li>run ptw on whole directory, not just test files</li> <li>drop FYI and NOTE from Code Tags</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_25","title":"Refactor","text":"<ul> <li>fix PY-W2000 by using all</li> <li>move file_search to top-level</li> <li>just run pre-commit install</li> <li>replace pass with \u2026 to keep it from being removed</li> </ul>"},{"location":"docs/CHANGELOG/#060rc2-2022-08-04","title":"0.6.0rc2 (2022-08-04)","text":""},{"location":"docs/CHANGELOG/#feat_28","title":"Feat","text":"<ul> <li>drop pytest-cov and run coverage directly</li> </ul>"},{"location":"docs/CHANGELOG/#fix_60","title":"Fix","text":"<ul> <li>swap pytest-watch(er) and other version bumps</li> <li>pin min-version (xenon) &amp; drop preconvert and flake8-mock</li> </ul>"},{"location":"docs/CHANGELOG/#060rc1-2022-08-04","title":"0.6.0rc1 (2022-08-04)","text":""},{"location":"docs/CHANGELOG/#fix_61","title":"Fix","text":"<ul> <li>bug in noxfile and code tags reading doc output files</li> </ul>"},{"location":"docs/CHANGELOG/#060rc0-2022-08-04","title":"0.6.0rc0 (2022-08-04)","text":""},{"location":"docs/CHANGELOG/#feat_29","title":"Feat","text":"<ul> <li>implement pylint rules</li> <li>add xenon (wraps radon)</li> <li>condense doit output in show_cmd</li> <li>initial semgrep implementation</li> <li>add code diagrams to doc-site</li> <li>add notes on wily and pylint</li> <li>add vulture</li> <li>diff-quality (lint)</li> <li>add it</li> <li>add output if no stale packages found</li> <li>add autoflake</li> </ul>"},{"location":"docs/CHANGELOG/#fix_62","title":"Fix","text":"<ul> <li>try to fix issues found with pytest_cache_assert</li> <li>drop unused Python2 demjson</li> <li>error in noxfile with poetry install</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_26","title":"Refactor","text":"<ul> <li>decouple code tag collector from DG</li> <li>improve lint_py and the return type check is working</li> <li>zip release task</li> <li>cleanup a few minor errors</li> <li>use Interactive instead of Chrome</li> <li>apply fixes found from semgrep</li> <li>rename \u201cwrappers\u201d to \u201cdot_dict\u201d</li> <li>prevent mutation in DG.set_paths</li> </ul>"},{"location":"docs/CHANGELOG/#031rc0-2022-08-04","title":"0.3.1rc0 (2022-08-04)","text":""},{"location":"docs/CHANGELOG/#feat_30","title":"Feat","text":"<ul> <li>add task to zip artifacts from testing</li> <li>implement pandas.to_markdown for cov table</li> <li>#58: implement doc task and merge serve_docs</li> <li>make loading YAML files more generic</li> <li>create doit summary report</li> <li>add task to check license compliance</li> <li>move lock into doit tasks with file-dependency</li> <li>#38: re-implement coverage and write source</li> <li>drop subprocess-tee</li> <li>#36: WIP implementation of doc formatting</li> <li>implement publish tasks</li> <li>add pip outdated to stale check</li> <li>implement check for stale packages</li> <li>begin implementing stale package check</li> <li>smart default tasks for CI vs. local</li> <li>make nox imports optional</li> <li>try doit rather than CWD for initial path</li> <li>move noxfile into calcipy</li> <li>integrate nox to doit tasks</li> <li>WIP check for stale dep &amp; placeholder publish</li> <li>add additional configuration options</li> <li>add nox tasks</li> <li>add detect-secrets as pre-commit</li> <li>lint non-Python files</li> <li>read doc_dir from copier file</li> <li>make most settings configurable</li> <li>added dotted-dict wrapper of Box</li> <li>delete old files rather than full directory</li> <li>filter with glob-like ignore_patterns (2/2)</li> <li>add security check task</li> <li>add skip_phrase for code tag skipping</li> <li>beartype - roar!</li> <li>optionally clear log directory. Move file_helpers from base</li> <li>new tail-like reverse read_lines</li> <li>rename DIG to DG because doit is one word</li> <li>retrieve doc_dir from copier</li> <li>add log-setup fun for doit</li> <li>make (source) doc_dir configurable</li> <li>add sanitizer</li> <li>add pytype</li> <li>#36: start WIP ReadMeMachine</li> <li>#36: merge logic of markdown auto-formatters</li> <li>make code tag partially configurable</li> <li>move check_types into calcipy</li> <li>import templates from pdocs</li> </ul>"},{"location":"docs/CHANGELOG/#fix_63","title":"Fix","text":"<ul> <li>install full dev-dep as temporary nox workaround</li> <li>prevent committing changelog at base dir</li> <li>remove type_name from docstring for Google-style</li> <li>run pytest as a module for nox</li> <li>resolve doc_dir and style errors</li> <li>#58: remove None from pdocs output</li> <li>deconflict doit/nox</li> <li>repair failing test</li> <li>packaging needed keyword argument</li> <li>import and nox syntax errors</li> <li>run push pre-commit hooks with doit</li> <li>show log warning instead of error for stale dep</li> <li>improve output from check_stale</li> <li>errors caught in testing</li> <li>suppress beartype warnings for now</li> <li>drop logger middleware</li> <li>catch most calcipy section typos in toml</li> <li>remove check-secrets but keep snippets</li> <li>errors in ignore patterns</li> <li>import doit and expand nox test file</li> <li>skip tags must be at bottom</li> <li>reset Lint paths instead of extend</li> <li>use find_files for code tag summary</li> <li>don\u2019t manually add the package source dir</li> <li>lint typing and improve tests</li> <li>create separate file_search file to fix imports</li> <li>#51: replace glob with git-based file identification</li> <li>#53: Use Interact instead of LongRunning</li> <li>undo PEP585 for runtime beartype</li> <li>resolve file explosion from _find_files</li> <li>import the loguru Logger class safely</li> <li>additional problems found with mypy</li> <li>fix Doit Types and start beartype</li> <li>add no-verify to cl_bump</li> <li>correct isort configuration</li> <li>restore ReadMeMachine</li> <li>repair small bugs found in tests</li> <li>make transitions optional</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_27","title":"Refactor","text":"<ul> <li>see if only one space is okay for skipcq</li> <li>fix anti-pattern with nox session decorator and arg</li> <li>improve code quality</li> <li>try to suppress deepsource errors</li> <li>address DeepSource issues</li> <li>split up set_paths from DG</li> <li>fix formatting error from pre-push</li> <li>rename doc_dir to doc_sub_dir for clarity</li> <li>apply 0.0.10 template</li> <li>move markdown to subdirectory for mkdocs</li> <li>move isort back to toml</li> <li>fix edge case in diff-cov failing and lint errors</li> <li>relicense with MIT for better compliance</li> <li>create generic doit-runner for noxfile</li> <li>fix some type issues</li> <li>minor fixes from AppVeyor testing</li> <li>#38: reduce complexity</li> <li>minor cleanup to docs</li> <li>apply pre-commit autoformat</li> <li>auto-drop skipcq comment</li> <li>format with VSCode</li> <li>fix lint errors in YAML files</li> <li>move find file paths to DG.meta</li> <li>move if_found_unlink to file_helpers</li> <li>fix formatting with pre-commit</li> <li>fix attribute names for path types (1/2)</li> <li>use calcipy:skip-tags</li> <li>fix minor code tags</li> <li>move __temp_chdir and improve fix_dg</li> <li>narrow type ignore use</li> <li>use path_file of file_path</li> <li>apply auto-fixes from pre-commit</li> <li>replace all glob-search with find_files</li> <li>remove find_files from code_tag script</li> <li>update isort for trailing-comma</li> <li>move excluded lint rules to DG</li> <li>apply PEP585 and add pre-commit hook</li> <li>fix capitalization for doit (one word, all lowercase)</li> <li>improve activate_debug_logging</li> <li>try to replace Any with BaseAction</li> <li>apply 0.0.2 minor fixes</li> <li>apply 0.0.1 version of calcipy_template</li> <li>minor renaming for _MarkdownMachine</li> <li>fix lock file and line length</li> <li>run more pre-commit checks on commit</li> <li>standardize on code tags and cleanup</li> </ul>"},{"location":"docs/CHANGELOG/#perf_1","title":"Perf","text":"<ul> <li>combine autopep8 paths into single command</li> <li>combine files for linting in one command</li> </ul>"},{"location":"docs/CHANGELOG/#020a0-2022-08-04","title":"0.2.0a0 (2022-08-04)","text":""},{"location":"docs/CHANGELOG/#feat_31","title":"Feat","text":"<ul> <li>push tags with no pre-commit hooks on pre</li> <li>use Interactive instead of \u2014yes for cl_bump*</li> <li>remove tag create/remove tasks</li> <li>new task cl_bump_pre</li> <li>replace MIT license with Unlicense</li> <li>use cz_legacy to generate changelogs</li> <li>remove task in anticipation of copier #26</li> <li>improve git pre-commit hooks</li> <li>new add-trailing-comma and pyupgrade hooks</li> <li>new mkdocs tasks and improvements</li> <li>new optional preconvert to serialize logs</li> <li>move logger configuration to log_helpers</li> <li>new cl_bump task. Closes #21</li> </ul>"},{"location":"docs/CHANGELOG/#fix_64","title":"Fix","text":"<ul> <li>do not pass filenames to pre-commit</li> <li>#43: add year to version for pseudo-calver</li> <li>prevent legacy types for new commits</li> <li>prevent circular import in doit_tasks</li> <li>extras need to be defined as optional</li> <li>rollback hook changes as they are not working</li> <li>install hooks for push</li> <li>LongRunning passed tasks that should fail</li> <li>yesqa removed necessary noqa (H303, etc)</li> <li>incorrect output paths</li> <li>reduce false tags found (WIP). Fix #24</li> <li>regression in lint_project tasks</li> <li>unincremented version in toml</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_28","title":"Refactor","text":"<ul> <li>#22: restore MIT license</li> <li>copy+paste unmodified labels workflow</li> <li>update local TODO notes</li> <li>make toml an optional import</li> <li>rename path_source to path_project</li> <li>rename DIG_CWD as PATH_TEST_PROJECT</li> <li>rename test file</li> <li>doit is lowercase (CC looks like Dolt)</li> <li>replace sh with subprocess-tee</li> <li>reduce excess logging</li> <li>move DOIT_CONFIG to import</li> <li>move dig test to dig test file</li> </ul>"},{"location":"docs/CHANGELOG/#010-2020-12-19","title":"0.1.0 (2020-12-19)","text":""},{"location":"docs/CHANGELOG/#feat_32","title":"Feat","text":"<ul> <li>new write_cl task utilizing comittizen</li> <li>new task, pre_commit_hooks</li> </ul>"},{"location":"docs/CHANGELOG/#refactor_29","title":"Refactor","text":"<ul> <li>show STDOUT formatting in DoIt task</li> <li>remove archived code</li> </ul>"},{"location":"docs/CHANGELOG/#003-2020-12-10","title":"0.0.3 (2020-12-10)","text":""},{"location":"docs/CHANGELOG/#002-2020-11-14","title":"0.0.2 (2020-11-14)","text":""},{"location":"docs/CHANGELOG/#001-2020-11-14","title":"0.0.1 (2020-11-14)","text":""},{"location":"docs/CODE_TAG_SUMMARY/","title":"Collected Code Tags","text":"Type Comment Last Edit Source File TODO If no stale, write out five oldest? 2023-05-13 calcipy/check_for_stale_packages/_check_for_stale_packages.py:209 TODO Consider adding a configuration item for ignore_patterns 2023-02-19 calcipy/file_search.py:82 TODO Look into running tasks from within other tasks to support \u2018\u2013continue\u2019 and more readable logs \u2013&gt; 2023-02-19 docs/docs/MIGRATION.md:112 TODO Capture logging output and check\u2026 2023-02-19 tests/check_for_stale_packages/test_check_for_stale_packages.py:64 TODO Capture logging output and check\u2026 2023-02-19 tests/check_for_stale_packages/test_check_for_stale_packages.py:88 TODO Is there an easier way to maintain pytest parameter IDs? 2023-02-17 tests/tasks/test_test.py:14 PLANNED Convert to hypothesis test! 2023-02-19 tests/test_dot_dict.py:9 <p>Found code tags for TODO (6), PLANNED (1)</p>"},{"location":"docs/DEVELOPER_GUIDE/","title":"Developer Notes","text":""},{"location":"docs/DEVELOPER_GUIDE/#local-development","title":"Local Development","text":"<pre><code>git clone https://github.com/kyleking/calcipy.git\ncd calcipy\npoetry install --sync\npoetry run calcipy-pack pack.install-extras\n\n# See the available tasks\npoetry run calcipy\n# Or use a local 'run' file (so that 'calcipy' can be extended)\n./run\n\n# Run the default task list (lint, auto-format, test coverage, etc.)\n./run main\n\n# Make code changes and run specific tasks as needed:\n./run lint.fix test\n</code></pre>"},{"location":"docs/DEVELOPER_GUIDE/#publishing","title":"Publishing","text":"<p>For testing, create an account on TestPyPi. Replace <code>...</code> with the API token generated on TestPyPi or PyPi respectively</p> <pre><code>poetry config repositories.testpypi https://test.pypi.org/legacy/\npoetry config pypi-token.testpypi ...\n\n./run main pack.publish --to-test-pypi\n# If you didn't configure a token, you will need to provide your username and password to publish\n</code></pre> <p>To publish to the real PyPi</p> <pre><code>poetry config pypi-token.pypi ...\n./run release\n\n# Or for a pre-release\n./run release --suffix=rc\n</code></pre>"},{"location":"docs/DEVELOPER_GUIDE/#current-status","title":"Current Status","text":"File Statements Missing Excluded Coverage <code>calcipy/__init__.py</code> 16 0 24 100.0% <code>calcipy/can_skip.py</code> 17 1 0 89.3% <code>calcipy/check_for_stale_packages/__init__.py</code> 5 2 0 60.0% <code>calcipy/check_for_stale_packages/_check_for_stale_packages.py</code> 118 8 3 87.2% <code>calcipy/cli.py</code> 35 1 78 93.0% <code>calcipy/code_tag_collector/__init__.py</code> 5 2 0 60.0% <code>calcipy/code_tag_collector/_collector.py</code> 143 2 0 94.0% <code>calcipy/dot_dict/__init__.py</code> 4 2 0 50.0% <code>calcipy/dot_dict/_dot_dict.py</code> 8 0 0 100.0% <code>calcipy/experiments/__init__.py</code> 0 0 0 100.0% <code>calcipy/experiments/bump_programmatically.py</code> 24 24 0 0.0% <code>calcipy/experiments/check_duplicate_test_names.py</code> 36 0 2 95.0% <code>calcipy/file_search.py</code> 38 0 2 91.8% <code>calcipy/invoke_helpers.py</code> 30 2 0 81.8% <code>calcipy/md_writer/__init__.py</code> 5 2 0 60.0% <code>calcipy/md_writer/_writer.py</code> 95 6 0 88.9% <code>calcipy/noxfile/__init__.py</code> 4 2 0 50.0% <code>calcipy/noxfile/_noxfile.py</code> 44 2 51 83.8% <code>calcipy/scripts.py</code> 5 0 37 100.0% <code>calcipy/tasks/__init__.py</code> 0 0 0 100.0% <code>calcipy/tasks/_invoke.py</code> 34 0 55 97.6% <code>calcipy/tasks/all_tasks.py</code> 48 0 0 95.5% <code>calcipy/tasks/cl.py</code> 28 5 0 75.0% <code>calcipy/tasks/defaults.py</code> 20 0 0 89.3% <code>calcipy/tasks/doc.py</code> 45 0 8 90.5% <code>calcipy/tasks/executable_utils.py</code> 27 0 0 87.2% <code>calcipy/tasks/lint.py</code> 41 1 0 84.6% <code>calcipy/tasks/nox.py</code> 8 0 0 100.0% <code>calcipy/tasks/pack.py</code> 42 11 0 64.1% <code>calcipy/tasks/stale.py</code> 6 0 0 100.0% <code>calcipy/tasks/tags.py</code> 18 1 0 91.7% <code>calcipy/tasks/test.py</code> 45 1 2 89.2% <code>calcipy/tasks/types.py</code> 20 0 0 89.3% Totals 1014 75 262 86.5% <p>Generated on: 2024-06-06</p>"},{"location":"docs/MIGRATION/","title":"Migration Guide","text":""},{"location":"docs/MIGRATION/#calcipy-100","title":"<code>calcipy 1.0.0</code>","text":""},{"location":"docs/MIGRATION/#background","title":"Background","text":"<p>calcipy <code>v1</code> was a complete rewrite to switch from <code>doit</code> to <code>invoke</code>:</p> <ul> <li>with <code>invoke</code>, tasks can be run from anywhere without a <code>dodo.py</code> file</li> <li>tasks can be loaded lazily, which means that some performance gains are possible</li> <li>since there is no shared state file, tasks can be more easily run from pre-commit or generally in parallel</li> </ul> <p><code>doit</code> excelled at clearly delineated task output and run summary, but <code>invoke</code> isn\u2019t designed that way. I would like to improve the CLI output, but the benefits are worth this tradeoff.</p> <p>calcipy <code>v0</code> was built on doit and thus required a <code>dodo.py</code> file. I began adding <code>cement</code> to support a separate CLI for <code>calcipy</code> installed with <code>pipx</code>, but that required a lot of boilerplate code. With <code>doit</code>, the string command needed to be complete at task evaluation rather than runtime, so globbing files couldn\u2019t be resolved lazily.</p>"},{"location":"docs/MIGRATION/#migration","title":"Migration","text":"<p>While refactoring, the global configuration was mostly removed (<code>DoitGlobals</code>) along with a few tasks, but the main functionality is still present. Any project dependent on <code>calcipy</code> will need substantial changes. The easiest way to start migrating is to run <code>copier copy gh:KyleKing/calcipy_template .</code> for calcipy_template</p>"},{"location":"docs/MIGRATION/#speed-test","title":"Speed Test","text":"<p>It turns out that switching to <code>invoke</code> appears to have only saved 100ms</p> <pre><code>&gt; hyperfine -m 20 --warmup 5 \"poetry run python -c 'print(1)'\"\nBenchmark 1: poetry run python -c 'print(1)'\nTime (mean \u00b1 \u03c3):     377.9 ms \u00b1   3.1 ms    [User: 235.0 ms, System: 61.8 ms]\nRange (min \u2026 max):   372.7 ms \u2026 384.0 ms    20 runs\n&gt; hyperfine -m 20 --warmup 5 ./run\nBenchmark 1: ./run\nTime (mean \u00b1 \u03c3):     936.0 ms \u00b1  26.9 ms    [User: 1548.2 ms, System: 1687.7 ms]\nRange (min \u2026 max):   896.4 ms \u2026 1009.4 ms    20 runs\n&gt; hyperfine -m 20 --warmup 5 \"poetry run calcipy_tags\"\nBenchmark 1: poetry run calcipy_tags\nTime (mean \u00b1 \u03c3):     618.5 ms \u00b1  29.7 ms    [User: 1536.8 ms, System: 1066.2 ms]\nRange (min \u2026 max):   578.2 ms \u2026 694.9 ms    20 runs\n&gt; hyperfine -m 20 --warmup 5 \"poetry run doit list\"\nBenchmark 1: poetry run doit list\nTime (mean \u00b1 \u03c3):      1.002 s \u00b1  0.015 s    [User: 1.643 s, System: 1.682 s]\nRange (min \u2026 max):    0.974 s \u2026  1.023 s    20 runs\n</code></pre> <p>Additionally, the major decrease in dependencies will make install and update actions much faster. With the recommended extras installed, <code>calcipy-v1</code> has 124 dependencies (with all extras, 164) vs. <code>calcipy-v0</code>\u2019s 259. Counted with: <code>cat .calcipy_packaging.lock | jq 'keys' | wc -l</code></p>"},{"location":"docs/MIGRATION/#code-comparison","title":"Code Comparison","text":"<p>Accounting for code extracted to <code>corallium</code>, the overall number of lines decreased from 1772 to 1550 or only 12%, while increasing the CLI and <code>pre-commit</code> capabilities.</p> <pre><code>~/calcipy-v0 &gt; cloc calcipy\n-------------------------------------------------------------------------------\nLanguage                     files          blank        comment           code\n-------------------------------------------------------------------------------\nPython                          26            942           1075           1772\n-------------------------------------------------------------------------------\nSUM:                            26            942           1075           1772\n-------------------------------------------------------------------------------\n~/calcipy &gt; cloc calcipy\n-------------------------------------------------------------------------------\nLanguage                     files          blank        comment           code\n-------------------------------------------------------------------------------\nPython                          27            454            438           1185\n-------------------------------------------------------------------------------\nSUM:                            27            454            438           1185\n-------------------------------------------------------------------------------\n~/corallium &gt; cloc corallium\n-------------------------------------------------------------------------------\nLanguage                     files          blank        comment           code\n-------------------------------------------------------------------------------\nPython                           7            176            149            365\n-------------------------------------------------------------------------------\nSUM:                             7            176            149            365\n-------------------------------------------------------------------------------\n\n~/calcipy &gt; cloc tests\n-------------------------------------------------------------------------------\nLanguage                     files          blank        comment           code\n-------------------------------------------------------------------------------\nYAML                             2              0              0            580\nPython                          19            176             68            578\nJSON                             2              0              0             60\nMarkdown                         3              9             10              8\nText                             1              0              0              2\n-------------------------------------------------------------------------------\nSUM:                            27            185             78           1228\n-------------------------------------------------------------------------------\n~/calcipy-v0 &gt; cloc tests\n-------------------------------------------------------------------------------\nLanguage                     files          blank        comment           code\n-------------------------------------------------------------------------------\nJSON                            30              0              0            762\nYAML                             2              0              0            580\nPython                          24            314            186            578\nMarkdown                         3              9             10              8\n-------------------------------------------------------------------------------\nSUM:                            59            323            196           1928\n-------------------------------------------------------------------------------\n~/corallium &gt; cloc tests\n-------------------------------------------------------------------------------\nLanguage                     files          blank        comment           code\n-------------------------------------------------------------------------------\nPython                           6             36             15             69\nMarkdown                         1              1              0              2\n-------------------------------------------------------------------------------\nSUM:                             7             37             15             71\n-------------------------------------------------------------------------------\n</code></pre>"},{"location":"docs/MIGRATION/#doit-output","title":"doit output","text":"<p>I would like to restore the <code>doit</code> task summary, but <code>invoke</code>\u2019s architecture doesn\u2019t really make this possible. The <code>--continue</code> option was extremely useful, but that also might not be achievable.</p> <pre><code>&gt; poetry run doit run\n.  format_recipes &gt; [\n        Python: function format_recipes\n]\n\n2023-02-19 10:40:23.954 | INFO     | recipes.formatter:_write_toc:287 - Creating TOC for: ./recipes/docs/breakfast\n2023-02-19 10:40:23.957 | INFO     | recipes.formatter:_write_toc:287 - Creating TOC for: ./recipes/docs/rice\n2023-02-19 10:40:23.959 | INFO     | recipes.formatter:_write_toc:287 - Creating TOC for: ./recipes/docs/meals\n2023-02-19 10:40:23.964 | INFO     | recipes.formatter:_write_toc:287 - Creating TOC for: ./recipes/docs/seafood\n2023-02-19 10:40:23.967 | INFO     | recipes.formatter:_write_toc:287 - Creating TOC for: ./recipes/docs/pizza\n2023-02-19 10:40:23.969 | INFO     | recipes.formatter:_write_toc:287 - Creating TOC for: ./recipes/docs/poultry\n2023-02-19 10:40:23.972 | INFO     | recipes.formatter:_write_toc:287 - Creating TOC for: ./recipes/docs/sushi\n.  collect_code_tags &gt; [\n        Python: function write_code_tag_file\n]\n\n.  cl_write &gt; [\n        Cmd: poetry run cz changelog\n        Python: function _move_cl\n]\n\n.  lock &gt; [\n        Cmd: poetry lock --no-update\n]\n\nResolving dependencies...\n.  nox_coverage &gt; [\n        Cmd: poetry run nox --error-on-missing-interpreters --session coverage\n]\n\n...\n\ndoit&gt; Summary:\ndoit&gt; format_recipes was successful\ndoit&gt; collect_code_tags was successful\ndoit&gt; cl_write was successful\ndoit&gt; lock was successful\ndoit&gt; nox_coverage was successful\ndoit&gt; auto_format was successful\ndoit&gt; document was successful\ndoit&gt; check_for_stale_packages was successful\ndoit&gt; pre_commit_hooks failed (red)\ndoit&gt; lint_project was not run\ndoit&gt; static_checks was not run\ndoit&gt; security_checks was not run\ndoit&gt; check_types was not run\n</code></pre>"},{"location":"docs/STYLE_GUIDE/","title":"Personal Style Guides","text":""},{"location":"docs/STYLE_GUIDE/#git","title":"Git","text":"<p>We use Commitizen to manage both an auto-generated Changelog and incrementing the release version following semver. For both of these automated outputs to work well, please follow the Conventional Commits style, which is described in more detail below.</p>"},{"location":"docs/STYLE_GUIDE/#commitizen-types-and-scopes","title":"Commitizen Types and Scopes","text":"<p><code>type(scope): description</code></p> <ul> <li>Types<ul> <li>fix: A bug fix</li> <li>feat: A new feature</li> <li>docs: Documentation-only changes (code comments, separate docs)</li> <li>style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons)</li> <li>perf: A code change that improves performance</li> <li>refactor: A change to production code that is not a fix, feat, or perf</li> <li>test: Adding missing or correcting existing tests</li> <li>build: Changes that affect the build system or external dependencies</li> <li>ci: Changes to our CI configuration files and scripts</li> <li>A <code>!</code> can be used to indicate a breaking change (<code>refactor!: drop support for Node 6</code>)</li> <li>SemVer Rules<ul> <li>Based on commit type, the version will be auto-incremented: <code>fix : PATCH // feat : MINOR // BREAKING CHANGE : MAJOR</code></li> </ul> </li> </ul> </li> <li>Scopes<ul> <li>A Class, File name, Issue Number, other appropriate noun. As examples: <code>build(poetry): bump requests to v3</code> or <code>style(#32): add missing type annotations</code></li> </ul> </li> <li>Tips<ul> <li>What if a commit fits multiple types?<ul> <li>Go back and make multiple commits whenever possible. Part of the benefit of Conventional Commits is the focus on more organized and intentional changes</li> </ul> </li> <li>Use <code>git rebase -i</code> to fix commit names prior to merging if incorrect types/scopes are used</li> </ul> </li> </ul>"},{"location":"docs/STYLE_GUIDE/#git-description-guidelines","title":"Git Description Guidelines","text":"<ul> <li>Commit message guidelines<ul> <li>Full sentence with verb (lowercase) and concise description. Below are modified examples for Conventional Commits<ul> <li><code>fix(roles): bug in admin role permissions</code></li> <li><code>feat(ui): implement new button design</code></li> <li><code>build(pip): upgrade package to remove vulnerabilities</code></li> <li><code>refactor: file structure to improve code readability</code></li> <li><code>perf(cli): rewrite methods</code></li> <li><code>feat(api): endpoints to implement new customer dashboard</code></li> </ul> </li> </ul> </li> <li>How to write a good commit message<ul> <li>A diff will tell you what changed, but only the commit message can properly tell you why.</li> <li>Keep in mind: This has all been said before.</li> <li>From the seven rules of a great Git commit message:<ul> <li>(2) Try for 50 characters, but consider 72 the hard limit</li> <li>(7) Use the body to explain what and why vs. how</li> </ul> </li> </ul> </li> </ul>"},{"location":"docs/STYLE_GUIDE/#issue-labels-and-milestones","title":"Issue Labels and Milestones","text":"<p>Personal Guide</p> <ul> <li>For Issue Labels, see [labels.yml][labels]</li> <li>Milestones<ul> <li>Current Tasks: main milestone (name could change based on a specific project, sprint, or month)</li> <li>Next Tasks</li> <li>Blue Sky</li> </ul> </li> </ul> Research <ul> <li>[Sane GitHub Labels](https://medium.com/@dave_lunny/sane-github-labels-c5d2e6004b63) and see [sensible-github-labels](https://github.com/Relequestual/sensible-github-labels) for full descriptions of each</li> <ul> <li>\u201cit is much more helpful to see the status and type of all issues at a glance.\u201d</li> <li>One of each:</li> <ul> <li>Status: \u2026</li> <ul><li>Abandoned, Accepted, Available, Blocked, Completed, In Progress, On Hold, Pending, Review Needed, Revision Needed</li></ul> <li>Type: \u2026</li> <ul><li>Bug, Maintenance, Question, Enhancement</li></ul> <li>Priority: \u2026</li> <ul><li>Critical, High, Medium, Low</li></ul> </ul> </ul> <li>[Britecharts](https://britecharts.github.io/britecharts/github-labels.html)</li> <ul> <li>Status: \u2026</li> <ul> <li>On Review \u2013 Request that we are pondering if including or not</li> <li>Needs Reproducing \u2013 For bugs that need to be reproduced in order to get fixed</li> <li>Needs Design \u2013 Feature that needs a design</li> <li>Ready to Go \u2013 Issue that has been defined and is ready to get started with</li> <li>In Progress \u2013 Issue that is being worked on right now.</li> <li>Completed \u2013 Finished feature or fix</li> </ul> <li>Type: \u2026</li> <ul> <li>Bug \u2013 An unexpected problem or unintended behavior</li> <li>Feature \u2013 A new feature request</li> <li>Maintenance \u2013 A regular maintenance chore or task, including refactors, build system, CI, performance improvements</li> <li>Documentation \u2013 A documentation improvement task</li> <li>Question \u2013 An issue or PR that needs more information or a user question</li> </ul> <li>Not Included</li> <ul> <li>Priority: They would add complexity and overhead due to the discussions, but could help with the roadmap</li> <li>Technology Labels: It can create too much overhead, as properly tag with technologies all the issues could be time consuming</li> </ul> </ul> </ul> <li>[Ian Bicking Blog](https://www.ianbicking.org/blog/2014/03/use-github-issues-to-organize-a-project.html)</li> <ul> <li>Milestone Overview</li> <ul> <li>What are we doing right now?</li> <li>What aren\u2019t we doing right now?</li> <ul> <li>2a. Stuff we\u2019ll probably do soon</li> <li>2b. Stuff we probably won\u2019t do soon</li> </ul> <li>What aren\u2019t we sure about?</li> </ul> <li>Milestone Descriptions</li> <ul> <li>Stuff we are doing right now: this is the \u201cmain\u201d milestone. We give it a name (like Alpha 2 or Strawberry Rhubarb Pie) and we write down what we are trying to accomplish with the milestone. We create a new milestone when we are ready for the next iteration.</li> <li>Stuff we\u2019ll probably do soon: this is a standing \u201c**Next Tasks**\u201d milestone. We never change or rename this milestone.</li> <ul><li>We use a permanent \u201cNext Tasks\u201d milestone (as opposed to renaming it to \u201cAlpha 3\u201d or actual-next-iteration milestone) because we don\u2019t want to presume or default to including something in the real next iteration. When we\u2019re ready to start planning the next iteration we\u2019ll create a new milestone, and only deliberately move things into that milestone.</li></ul> <li>Stuff we probably won\u2019t do soon: this is a standing \u201c**Blue Sky**\u201d milestone. We refer to these tickets and sometimes look through them, but they are easy to ignore, somewhat intentionally ignored.</li> <li>What aren\u2019t we sure about?: issues with no milestone.</li> </ul> <li>Label: \u201cNeeds Discussion\u201d - (addressed in a triage meeting) - use liberally for either big or small tickets</li> <li>\u201cIt\u2019s better to give people more power: it\u2019s actually helpful if people can overreach because it is an opportunity to establish where the limits really are and what purpose those limits have\u201d</li> </ul>"},{"location":"docs/STYLE_GUIDE/#external-links","title":"External Links","text":"<ul> <li>[Git: The Simple Guide][simple_git]</li> <li>[Commit Messages][gcmsg] and why use the present tense</li> <li>GitHub\u2019s Advice on GitHub</li> <li>Most Comprehensive Guide</li> <li>Git Pro Book (free)<ul> <li>Bash Tab-Completion Snippet</li> </ul> </li> </ul>"},{"location":"docs/STYLE_GUIDE/#python","title":"Python","text":"<ul> <li>Python Style Guides<ul> <li>https://gist.github.com/sloria/7001839</li> <li>http://www.nilunder.com/blog/2013/08/03/pythonic-sensibilities/</li> <li>https://innoq.github.io/cards42org_en/</li> <li>https://docs.openstack.org/hacking/latest/user/hacking.html#styleguide</li> <li>https://www.python.org/doc/humor/</li> <li>https://docs.python-guide.org/writing/reading/</li> <li>https://realpython.com/python-refactoring/</li> </ul> </li> </ul>"},{"location":"docs/STYLE_GUIDE/#adrs","title":"ADRs","text":"<ul> <li>ADR Approaches<ul> <li>https://infraeng.dev/tech-spec Template (And associated review) vs. https://infraeng.dev/decision-log/</li> <li>Y-Statements: abbreviated shorthand. Add this as a one-line decision option if a full ADR isn\u2019t needed (or when referencing an existing ADR) (https://scribe.rip/@docsoc/y-statements-10eb07b5a177)</li> <li>https://adr.github.io</li> <li>More formal implementation of ADRs (MADR) that this is based on. Template: https://github.com/adr/madr/blob/97fb8edec60b8dc70b8166ef62de34c4e26b46c0/template/adr-template.md</li> <li>https://github.com/ethereum/EIPs/blob/confluenceuser/EIPS/eip-5639.md</li> </ul> </li> <li>Examples<ul> <li>https://github.com/pawamoy/mkdocstrings/issues/28</li> <li>https://github.com/arachne-framework/architecture/blob/060a956277a5ad71df93da49fee52463408841af/adr-002-configuration.md</li> <li>https://github.com/arachne-framework/architecture/tree/060a956277a5ad71df93da49fee52463408841af</li> <li>https://github.com/ethereum/EIPs/blob/confluenceuser/EIPS/eip-1010.md</li> <li>https://docs-v1.prefect.io/core/pins/pin-01-introduce-pins.html</li> <li>https://peps.python.org/pep-0387/</li> <li>https://github.com/AICoE/aicoe-ci/blob/39de02af86a0d1f9dcd395fa88b858f1c6880411/docs/adr/0000-use-markdown-architectural-decision-records.md</li> <li>And many others!</li> </ul> </li> </ul> <p>&lt;\u2013 Links \u2013&gt;</p>"},{"location":"modules/calcipy/_code_diagrams/","title":"Code Diagrams","text":"<p>Auto-generated with <code>pylint-pyreverse</code></p>"},{"location":"modules/calcipy/_code_diagrams/#packages","title":"Packages","text":"<p>Full Size</p>"},{"location":"modules/calcipy/_code_diagrams/#classes","title":"Classes","text":"<p>Full Size</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>calcipy<ul> <li>can_skip</li> <li>check_for_stale_packages<ul> <li>_check_for_stale_packages</li> </ul> </li> <li>cli</li> <li>code_tag_collector<ul> <li>_collector</li> </ul> </li> <li>dot_dict<ul> <li>_dot_dict</li> </ul> </li> <li>experiments<ul> <li>bump_programmatically</li> <li>check_duplicate_test_names</li> </ul> </li> <li>file_search</li> <li>invoke_helpers</li> <li>md_writer<ul> <li>_writer</li> </ul> </li> <li>noxfile<ul> <li>_noxfile</li> </ul> </li> <li>scripts</li> <li>tasks<ul> <li>_invoke</li> <li>all_tasks</li> <li>cl</li> <li>defaults</li> <li>doc</li> <li>executable_utils</li> <li>lint</li> <li>nox</li> <li>pack</li> <li>stale</li> <li>tags</li> <li>test</li> <li>types</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/calcipy/","title":"calcipy","text":"<p>calcipy.</p>"},{"location":"reference/calcipy/#calcipy-functions","title":"Functions","text":""},{"location":"reference/calcipy/#calcipy.configure_runtime_type_checking_mode","title":"configure_runtime_type_checking_mode","text":"<pre><code>configure_runtime_type_checking_mode()\n</code></pre> <p>Optionally configure runtime type checking mode globally.</p> Source code in <code>calcipy/__init__.py</code> <pre><code>def configure_runtime_type_checking_mode() -&gt; None:  # pragma: no cover\n    \"\"\"Optionally configure runtime type checking mode globally.\"\"\"\n    rtc_mode = _RuntimeTypeCheckingModes.from_environment()\n\n    if rtc_mode is not _RuntimeTypeCheckingModes.OFF:\n        from beartype.roar import BeartypeClawDecorWarning  # noqa: PLC0415\n\n        beartype_this_package(conf=BeartypeConf(\n            warning_cls_on_decorator_exception=(\n                None if rtc_mode is _RuntimeTypeCheckingModes.ERROR else BeartypeClawDecorWarning\n            ),\n        ))\n</code></pre>"},{"location":"reference/calcipy/can_skip/","title":"can_skip","text":"<p>Support can-skip logic from Make.</p>"},{"location":"reference/calcipy/can_skip/#calcipy.can_skip-functions","title":"Functions","text":""},{"location":"reference/calcipy/can_skip/#calcipy.can_skip.can_skip","title":"can_skip","text":"<pre><code>can_skip(*, prerequisites, targets)\n</code></pre> <p>Generic make-style task skipping logic based on file <code>mtime</code>.</p> <p>Example use with Invoke, but can be used anywhere:</p> <pre><code>@task\ndef test(ctx: Context) -&gt; None:\n    if can_skip(prerequisites=[*Path('src').rglob('*.py')], targets=[Path('.coverage.xml')]):\n        return  # Exit early\n\n    ...  # Task code\n</code></pre> Source code in <code>calcipy/can_skip.py</code> <pre><code>@beartype\ndef can_skip(*, prerequisites: List[Path], targets: List[Path]) -&gt; bool:\n    \"\"\"Generic make-style task skipping logic based on file `mtime`.\n\n    Example use with Invoke, but can be used anywhere:\n\n    ```py\n    @task\n    def test(ctx: Context) -&gt; None:\n        if can_skip(prerequisites=[*Path('src').rglob('*.py')], targets=[Path('.coverage.xml')]):\n            return  # Exit early\n\n        ...  # Task code\n    ```\n\n    \"\"\"\n    if not (ts_prerequisites := [pth.stat().st_mtime for pth in prerequisites]):\n        raise ValueError('Required files do not exist', prerequisites)\n\n    ts_targets = [pth.stat().st_mtime for pth in targets]\n    if ts_targets and min(ts_targets) &gt; max(ts_prerequisites):\n        logger.warning('Skipping because targets are newer', targets=targets)\n        return True\n    return False\n</code></pre>"},{"location":"reference/calcipy/can_skip/#calcipy.can_skip.dont_skip","title":"dont_skip","text":"<pre><code>dont_skip(*, prerequisites, targets)\n</code></pre> <p>To use for testing with mock; always returns False.</p> Source code in <code>calcipy/can_skip.py</code> <pre><code>@beartype\ndef dont_skip(*, prerequisites: List[Path], targets: List[Path]) -&gt; bool:\n    \"\"\"To use for testing with mock; always returns False.\"\"\"\n    logger.debug('Mocking can_skip', prerequisites=prerequisites, targets=targets)\n    return False\n</code></pre>"},{"location":"reference/calcipy/cli/","title":"cli","text":"<p>Extend Invoke for Calcipy.</p>"},{"location":"reference/calcipy/cli/#calcipy.cli-classes","title":"Classes","text":""},{"location":"reference/calcipy/cli/#calcipy.cli.CalcipyConfig","title":"CalcipyConfig","text":"<p>               Bases: <code>Config</code></p> <p>Opinionated Config with better defaults.</p> Source code in <code>calcipy/cli.py</code> <pre><code>class CalcipyConfig(Config):\n    \"\"\"Opinionated Config with better defaults.\"\"\"\n\n    @staticmethod\n    def global_defaults() -&gt; Dict:  # type: ignore[type-arg]  # pragma: no cover\n        \"\"\"Override the global defaults.\"\"\"\n        invoke_defaults = Config.global_defaults()\n        calcipy_defaults = {\n            'run': {\n                'echo': True,\n                'echo_format': '\\033[2;3;37mRunning: {command}\\033[0m',\n                'pty': use_pty(),\n            },\n        }\n        return merge_dicts(invoke_defaults, calcipy_defaults)\n</code></pre>"},{"location":"reference/calcipy/cli/#calcipy.cli.CalcipyConfig-functions","title":"Functions","text":""},{"location":"reference/calcipy/cli/#calcipy.cli.CalcipyConfig.global_defaults","title":"global_defaults  <code>staticmethod</code>","text":"<pre><code>global_defaults()\n</code></pre> <p>Override the global defaults.</p> Source code in <code>calcipy/cli.py</code> <pre><code>@staticmethod\ndef global_defaults() -&gt; Dict:  # type: ignore[type-arg]  # pragma: no cover\n    \"\"\"Override the global defaults.\"\"\"\n    invoke_defaults = Config.global_defaults()\n    calcipy_defaults = {\n        'run': {\n            'echo': True,\n            'echo_format': '\\033[2;3;37mRunning: {command}\\033[0m',\n            'pty': use_pty(),\n        },\n    }\n    return merge_dicts(invoke_defaults, calcipy_defaults)\n</code></pre>"},{"location":"reference/calcipy/cli/#calcipy.cli-functions","title":"Functions","text":""},{"location":"reference/calcipy/cli/#calcipy.cli.start_program","title":"start_program","text":"<pre><code>start_program(pkg_name, pkg_version, module=None, collection=None)\n</code></pre> <p>Run the customized Invoke Program.</p> <p>FYI: recommendation is to extend the <code>core_args</code> method, but this won\u2019t parse positional arguments: https://docs.pyinvoke.org/en/stable/concepts/library.html#modifying-core-parser-arguments</p> Source code in <code>calcipy/cli.py</code> <pre><code>@beartype\ndef start_program(  # noqa: CAC001\n    pkg_name: str,\n    pkg_version: str,\n    module: Optional[ModuleType] = None,\n    collection: Optional[Union[Collection, InvokeCollection]] = None,\n) -&gt; None:  # pragma: no cover\n    \"\"\"Run the customized Invoke Program.\n\n    FYI: recommendation is to extend the `core_args` method, but this won't parse positional arguments:\n    https://docs.pyinvoke.org/en/stable/concepts/library.html#modifying-core-parser-arguments\n\n    \"\"\"\n    # Manipulate 'sys.argv' to hide arguments that invoke can't parse\n    _gto = GlobalTaskOptions()\n    sys_argv: List[str] = sys.argv[:1]\n    last_argv = ''\n    for argv in sys.argv[1:]:\n        if not last_argv.startswith('-') and Path(argv).is_file():\n            _gto.file_args.append(Path(argv))\n        # Check for CLI flags\n        elif argv in {'-v', '-vv', '-vvv', '--verbose'}:\n            _gto.verbose = argv.count('v')\n        elif argv == '--keep-going':\n            _gto.keep_going = True\n        # Check for CLI arguments with values\n        elif last_argv == '--working-dir':\n            _gto.working_dir = Path(argv).resolve()\n        elif argv != '--working-dir':\n            sys_argv.append(argv)\n        last_argv = argv\n    _gto.file_args = [\n        _f if _f.is_absolute() else Path.cwd() / _f\n        for _f in _gto.file_args\n    ]\n    sys.argv = sys_argv\n\n    class _CalcipyConfig(CalcipyConfig):\n\n        gto: GlobalTaskOptions = _gto\n\n    if module and collection:\n        raise ValueError('Only one of collection or module can be specified')\n\n    _CalcipyProgram(\n        name=pkg_name,\n        version=pkg_version,\n        namespace=Collection.from_module(module) if module else collection,\n        config_class=_CalcipyConfig,\n    ).run()\n</code></pre>"},{"location":"reference/calcipy/cli/#calcipy.cli.task","title":"task","text":"<pre><code>task(*dec_args, **dec_kwargs)\n</code></pre> <p>Marks wrapped callable object as a valid Invoke task.</p> Source code in <code>calcipy/cli.py</code> <pre><code>def task(*dec_args: Any, **dec_kwargs: Any) -&gt; Callable:  # type: ignore[type-arg]\n    \"\"\"Marks wrapped callable object as a valid Invoke task.\"\"\"\n    def wrapper(func: Any) -&gt; Callable:  # type: ignore[type-arg]\n        # Attach arguments for Task\n        setattr(func, TASK_ARGS_ATTR, dec_args)\n        setattr(func, TASK_KWARGS_ATTR, dec_kwargs)\n        # Attach public attributes from invoke that are expected\n        func.help = dec_kwargs.pop('help', {})\n\n        def _with_kwargs(**extra_kwargs: Any) -&gt; Callable:  # type: ignore[type-arg] # nosem\n            \"\"\"Support building partial tasks.\"\"\"\n            if extra_kwargs:\n                # Set a unique name when 'extra_kwargs' was provided\n                # https://github.com/pyinvoke/invoke/blob/07b836f2663bb073a7bcef3d6c454e1dc6b867ae/invoke/tasks.py#L81-L104\n                encoded = b64encode(str(extra_kwargs).encode())\n                func.__name__ = f'{func.__name__}_{encoded.decode().rstrip(\"=\")}'\n\n            @wraps(func)  # nosem\n            def _with_kwargs_inner(*args: Any, **kwargs: Any) -&gt; Any:\n                return func(*args, **kwargs, **extra_kwargs)\n            return _with_kwargs_inner\n\n        func.with_kwargs = _with_kwargs\n\n        @wraps(func)  # nosem\n        def _inner(*args: Any, **kwargs: Any) -&gt; Any:\n            return func(*args, **kwargs)\n\n        return _inner\n\n    # Handle the case when the decorator is called without arguments\n    if (\n        len(dec_args) == 1\n        and callable(dec_args[0])\n        and not hasattr(dec_args[0], TASK_ARGS_ATTR)\n    ):\n        return wrapper(dec_args[0])\n\n    return wrapper\n</code></pre>"},{"location":"reference/calcipy/file_search/","title":"file_search","text":"<p>Find Files.</p>"},{"location":"reference/calcipy/file_search/#calcipy.file_search-functions","title":"Functions","text":""},{"location":"reference/calcipy/file_search/#calcipy.file_search.find_project_files","title":"find_project_files","text":"<pre><code>find_project_files(path_project, ignore_patterns)\n</code></pre> <p>Find project files in git version control.</p> <p>Note: uses the relative project directory and verifies that each file exists</p> PARAMETER DESCRIPTION <code>path_project</code> <p>Path to the project directory</p> <p> TYPE: <code>Path</code> </p> <code>ignore_patterns</code> <p>glob ignore patterns</p> <p> TYPE: <code>List[str]</code> </p> RETURNS DESCRIPTION <code>List[Path]</code> <p>Dict[str, List[Path]]: where keys are the suffix (without leading dot) and values the list of paths</p> Source code in <code>calcipy/file_search.py</code> <pre><code>@beartype\ndef find_project_files(path_project: Path, ignore_patterns: List[str]) -&gt; List[Path]:\n    \"\"\"Find project files in git version control.\n\n    &gt; Note: uses the relative project directory and verifies that each file exists\n\n    Args:\n        path_project: Path to the project directory\n        ignore_patterns: glob ignore patterns\n\n    Returns:\n        Dict[str, List[Path]]: where keys are the suffix (without leading dot) and values the list of paths\n\n    \"\"\"\n    file_paths = []\n    rel_filepaths = _get_all_files(cwd=path_project)\n    filtered_rel_files = _filter_files(rel_filepaths=rel_filepaths, ignore_patterns=ignore_patterns)\n    for rel_file in filtered_rel_files:\n        path_file = path_project / rel_file\n        if path_file.is_file():\n            file_paths.append(path_file)\n        else:  # pragma: no cover\n            logger.warning('Could not find the specified file', path_file=path_file)\n    return file_paths\n</code></pre>"},{"location":"reference/calcipy/file_search/#calcipy.file_search.find_project_files_by_suffix","title":"find_project_files_by_suffix","text":"<pre><code>find_project_files_by_suffix(path_project, *, ignore_patterns=None)\n</code></pre> <p>Find project files in git version control.</p> <p>Note: uses the relative project directory and verifies that each file exists</p> PARAMETER DESCRIPTION <code>path_project</code> <p>Path to the project directory</p> <p> TYPE: <code>Path</code> </p> <code>ignore_patterns</code> <p>glob ignore patterns</p> <p> TYPE: <code>Optional[List[str]]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Dict[str, List[Path]]</code> <p>Dict[str, List[Path]]: where keys are the suffix (without leading dot) and values the list of paths</p> Source code in <code>calcipy/file_search.py</code> <pre><code>@beartype\ndef find_project_files_by_suffix(\n    path_project: Path, *, ignore_patterns: Optional[List[str]] = None,\n) -&gt; Dict[str, List[Path]]:\n    \"\"\"Find project files in git version control.\n\n    &gt; Note: uses the relative project directory and verifies that each file exists\n\n    Args:\n        path_project: Path to the project directory\n        ignore_patterns: glob ignore patterns\n\n    Returns:\n        Dict[str, List[Path]]: where keys are the suffix (without leading dot) and values the list of paths\n\n    \"\"\"\n    file_lookup: Dict[str, List[Path]] = defaultdict(list)\n    for path_file in find_project_files(path_project, ignore_patterns or []):\n        file_lookup[path_file.suffix.lstrip('.')].append(path_file)\n    return dict(file_lookup)\n</code></pre>"},{"location":"reference/calcipy/invoke_helpers/","title":"invoke_helpers","text":"<p>Invoke Helpers.</p>"},{"location":"reference/calcipy/invoke_helpers/#calcipy.invoke_helpers-functions","title":"Functions","text":""},{"location":"reference/calcipy/invoke_helpers/#calcipy.invoke_helpers.get_doc_subdir","title":"get_doc_subdir","text":"<pre><code>get_doc_subdir(path_project=None)\n</code></pre> <p>Retrieve the documentation directory from the copier answer file.</p> PARAMETER DESCRIPTION <code>path_project</code> <p>Path to the project directory with contains <code>.copier-answers.yml</code></p> <p> TYPE: <code>Optional[Path]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Path</code> <p>to the source documentation directory</p> <p> TYPE: <code>Path</code> </p> Source code in <code>calcipy/invoke_helpers.py</code> <pre><code>@beartype\ndef get_doc_subdir(path_project: Optional[Path] = None) -&gt; Path:\n    \"\"\"Retrieve the documentation directory from the copier answer file.\n\n    Args:\n        path_project: Path to the project directory with contains `.copier-answers.yml`\n\n    Returns:\n        Path: to the source documentation directory\n\n    \"\"\"\n    path_copier = (path_project or get_project_path()) / COPIER_ANSWERS\n    doc_dir = read_yaml_file(path_copier).get('doc_dir', 'docs')\n    return path_copier.parent / doc_dir / 'docs'\n</code></pre>"},{"location":"reference/calcipy/invoke_helpers/#calcipy.invoke_helpers.get_project_path","title":"get_project_path  <code>cached</code>","text":"<pre><code>get_project_path()\n</code></pre> <p>Retrieve the <code>cwd</code>.</p> Source code in <code>calcipy/invoke_helpers.py</code> <pre><code>@lru_cache(maxsize=1)\ndef get_project_path() -&gt; Path:\n    \"\"\"Retrieve the `cwd`.\"\"\"\n    return Path.cwd()\n</code></pre>"},{"location":"reference/calcipy/invoke_helpers/#calcipy.invoke_helpers.run","title":"run","text":"<pre><code>run(ctx, *run_args, **run_kwargs)\n</code></pre> <p>Wrap invoke.run to run within the <code>working_dir</code>.</p> Source code in <code>calcipy/invoke_helpers.py</code> <pre><code>@beartype\ndef run(ctx: Context, *run_args: Any, **run_kwargs: Any) -&gt; Optional[Result]:\n    \"\"\"Wrap invoke.run to run within the `working_dir`.\"\"\"\n    working_dir = '.'\n    with suppress(AttributeError):\n        working_dir = ctx.config.gto.working_dir\n\n    with ctx.cd(working_dir):\n        return ctx.run(*run_args, **run_kwargs)\n</code></pre>"},{"location":"reference/calcipy/invoke_helpers/#calcipy.invoke_helpers.use_pty","title":"use_pty  <code>cached</code>","text":"<pre><code>use_pty()\n</code></pre> <p>Returns False on Windows and some CI environments.</p> Source code in <code>calcipy/invoke_helpers.py</code> <pre><code>@lru_cache(maxsize=1)\ndef use_pty() -&gt; bool:\n    \"\"\"Returns False on Windows and some CI environments.\"\"\"\n    if platform.system() == 'Windows':\n        return False\n    return not environ.get('GITHUB_ACTION')\n</code></pre>"},{"location":"reference/calcipy/scripts/","title":"scripts","text":"<p>Start the command line program.</p>"},{"location":"reference/calcipy/scripts/#calcipy.scripts-classes","title":"Classes","text":""},{"location":"reference/calcipy/scripts/#calcipy.scripts-functions","title":"Functions","text":""},{"location":"reference/calcipy/scripts/#calcipy.scripts.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Run the customized Invoke Program.</p> Source code in <code>calcipy/scripts.py</code> <pre><code>def start() -&gt; None:  # pragma: no cover\n    \"\"\"Run the customized Invoke Program.\"\"\"\n    from .tasks import all_tasks  # noqa: PLC0415\n    start_program(__pkg_name__, __version__, all_tasks)\n</code></pre>"},{"location":"reference/calcipy/scripts/#calcipy.scripts.start_docs","title":"start_docs","text":"<pre><code>start_docs()\n</code></pre> <p>Run CLI with only the cl and doc namespaces.</p> Source code in <code>calcipy/scripts.py</code> <pre><code>def start_docs() -&gt; None:  # pragma: no cover\n    \"\"\"Run CLI with only the cl and doc namespaces.\"\"\"\n    from .tasks import cl, doc  # noqa: PLC0415\n    _start_subset([cl, doc])\n</code></pre>"},{"location":"reference/calcipy/scripts/#calcipy.scripts.start_lint","title":"start_lint","text":"<pre><code>start_lint()\n</code></pre> <p>Run CLI with only the lint namespace.</p> Source code in <code>calcipy/scripts.py</code> <pre><code>def start_lint() -&gt; None:  # pragma: no cover\n    \"\"\"Run CLI with only the lint namespace.\"\"\"\n    from .tasks import lint  # noqa: PLC0415\n    _start_subset([lint])\n</code></pre>"},{"location":"reference/calcipy/scripts/#calcipy.scripts.start_pack","title":"start_pack","text":"<pre><code>start_pack()\n</code></pre> <p>Run CLI with only the pack namespace.</p> Source code in <code>calcipy/scripts.py</code> <pre><code>def start_pack() -&gt; None:  # pragma: no cover\n    \"\"\"Run CLI with only the pack namespace.\"\"\"\n    from .tasks import pack  # noqa: PLC0415\n    _start_subset([pack])\n</code></pre>"},{"location":"reference/calcipy/scripts/#calcipy.scripts.start_tags","title":"start_tags","text":"<pre><code>start_tags()\n</code></pre> <p>Run CLI with only the tags namespace.</p> Source code in <code>calcipy/scripts.py</code> <pre><code>def start_tags() -&gt; None:  # pragma: no cover\n    \"\"\"Run CLI with only the tags namespace.\"\"\"\n    from .tasks import tags  # noqa: PLC0415\n    _start_subset([tags])\n</code></pre>"},{"location":"reference/calcipy/scripts/#calcipy.scripts.start_test","title":"start_test","text":"<pre><code>start_test()\n</code></pre> <p>Run CLI with only the test namespace.</p> Source code in <code>calcipy/scripts.py</code> <pre><code>def start_test() -&gt; None:  # pragma: no cover\n    \"\"\"Run CLI with only the test namespace.\"\"\"\n    from .tasks import test  # noqa: PLC0415\n    _start_subset([test])\n</code></pre>"},{"location":"reference/calcipy/scripts/#calcipy.scripts.start_types","title":"start_types","text":"<pre><code>start_types()\n</code></pre> <p>Run CLI with only the types namespace.</p> Source code in <code>calcipy/scripts.py</code> <pre><code>def start_types() -&gt; None:  # pragma: no cover\n    \"\"\"Run CLI with only the types namespace.\"\"\"\n    from .tasks import types  # noqa: PLC0415\n    _start_subset([types])\n</code></pre>"},{"location":"reference/calcipy/check_for_stale_packages/","title":"check_for_stale_packages","text":""},{"location":"reference/calcipy/check_for_stale_packages/#calcipy.check_for_stale_packages-functions","title":"Functions","text":""},{"location":"reference/calcipy/check_for_stale_packages/#calcipy.check_for_stale_packages.check_for_stale_packages","title":"check_for_stale_packages","text":"<pre><code>check_for_stale_packages(*, stale_months, path_lock=LOCK, path_cache=CALCIPY_CACHE)\n</code></pre> <p>Read the cached packaging information.</p> PARAMETER DESCRIPTION <code>stale_months</code> <p>cutoff in months for when a package might be stale enough to be a risk</p> <p> TYPE: <code>int</code> </p> Source code in <code>calcipy/check_for_stale_packages/_check_for_stale_packages.py</code> <pre><code>@beartype\ndef check_for_stale_packages(*, stale_months: int, path_lock: Path = LOCK, path_cache: Path = CALCIPY_CACHE) -&gt; bool:\n    \"\"\"Read the cached packaging information.\n\n    Args:\n        stale_months: cutoff in months for when a package might be stale enough to be a risk\n\n    \"\"\"\n    packages = _read_packages(path_lock)\n    cached_packages = _read_cache(path_cache)\n    if cached_packages and can_skip.can_skip(prerequisites=[path_lock], targets=[path_cache]):\n        packages = [*cached_packages.values()]\n    else:\n        packages = _collect_release_dates(packages, cached_packages)\n        _write_cache(packages, path_cache)\n    return _packages_are_stale(packages, stale_months=stale_months)\n</code></pre>"},{"location":"reference/calcipy/check_for_stale_packages/_check_for_stale_packages/","title":"_check_for_stale_packages","text":"<p>Check for stale packages.</p>"},{"location":"reference/calcipy/check_for_stale_packages/_check_for_stale_packages/#calcipy.check_for_stale_packages._check_for_stale_packages-attributes","title":"Attributes","text":""},{"location":"reference/calcipy/check_for_stale_packages/_check_for_stale_packages/#calcipy.check_for_stale_packages._check_for_stale_packages.CALCIPY_CACHE","title":"CALCIPY_CACHE  <code>module-attribute</code>","text":"<pre><code>CALCIPY_CACHE = Path('.calcipy_packaging.lock')\n</code></pre> <p>Path to the packaging lock file.</p>"},{"location":"reference/calcipy/check_for_stale_packages/_check_for_stale_packages/#calcipy.check_for_stale_packages._check_for_stale_packages-functions","title":"Functions","text":""},{"location":"reference/calcipy/check_for_stale_packages/_check_for_stale_packages/#calcipy.check_for_stale_packages._check_for_stale_packages.check_for_stale_packages","title":"check_for_stale_packages","text":"<pre><code>check_for_stale_packages(*, stale_months, path_lock=LOCK, path_cache=CALCIPY_CACHE)\n</code></pre> <p>Read the cached packaging information.</p> PARAMETER DESCRIPTION <code>stale_months</code> <p>cutoff in months for when a package might be stale enough to be a risk</p> <p> TYPE: <code>int</code> </p> Source code in <code>calcipy/check_for_stale_packages/_check_for_stale_packages.py</code> <pre><code>@beartype\ndef check_for_stale_packages(*, stale_months: int, path_lock: Path = LOCK, path_cache: Path = CALCIPY_CACHE) -&gt; bool:\n    \"\"\"Read the cached packaging information.\n\n    Args:\n        stale_months: cutoff in months for when a package might be stale enough to be a risk\n\n    \"\"\"\n    packages = _read_packages(path_lock)\n    cached_packages = _read_cache(path_cache)\n    if cached_packages and can_skip.can_skip(prerequisites=[path_lock], targets=[path_cache]):\n        packages = [*cached_packages.values()]\n    else:\n        packages = _collect_release_dates(packages, cached_packages)\n        _write_cache(packages, path_cache)\n    return _packages_are_stale(packages, stale_months=stale_months)\n</code></pre>"},{"location":"reference/calcipy/code_tag_collector/","title":"code_tag_collector","text":""},{"location":"reference/calcipy/code_tag_collector/#calcipy.code_tag_collector-functions","title":"Functions","text":""},{"location":"reference/calcipy/code_tag_collector/#calcipy.code_tag_collector.write_code_tag_file","title":"write_code_tag_file","text":"<pre><code>write_code_tag_file(\n    path_tag_summary, paths_source, base_dir, regex=\"\", tags=\"\", header=\"# Task Summary\\n\\nAuto-Generated by `calcipy`\"\n)\n</code></pre> <p>Create the code tag summary file.</p> PARAMETER DESCRIPTION <code>path_tag_summary</code> <p>Path to the output file</p> <p> TYPE: <code>Path</code> </p> <code>paths_source</code> <p>list of source files to parse</p> <p> TYPE: <code>List[Path]</code> </p> <code>base_dir</code> <p>base directory relative to the searched files</p> <p> TYPE: <code>Path</code> </p> <code>regex</code> <p>compiled regular expression. Expected to have matching groups <code>(tag, text)</code>. Default is CODE_TAG_RE with tags from tag_order</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>tags</code> <p>subset of all tags to include in the report and specified order. Default is COMMON_CODE_TAGS</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>header</code> <p>header text</p> <p> TYPE: <code>str</code> DEFAULT: <code>'# Task Summary\\n\\nAuto-Generated by `calcipy`'</code> </p> Source code in <code>calcipy/code_tag_collector/_collector.py</code> <pre><code>@beartype\ndef write_code_tag_file(\n    path_tag_summary: Path,\n    paths_source: List[Path],\n    base_dir: Path,\n    regex: str = '',\n    tags: str = '',\n    header: str = '# Task Summary\\n\\nAuto-Generated by `calcipy`',\n) -&gt; None:\n    \"\"\"Create the code tag summary file.\n\n    Args:\n        path_tag_summary: Path to the output file\n        paths_source: list of source files to parse\n        base_dir: base directory relative to the searched files\n        regex: compiled regular expression. Expected to have matching groups `(tag, text)`.\n            Default is CODE_TAG_RE with tags from tag_order\n        tags: subset of all tags to include in the report and specified order. Default is COMMON_CODE_TAGS\n        header: header text\n\n    \"\"\"\n    tag_order = [_t.strip() for _t in tags.split(',') if _t] or COMMON_CODE_TAGS\n    matcher = (regex or CODE_TAG_RE).format(tag='|'.join(tag_order))\n\n    matches = _search_files(paths_source, re.compile(matcher))\n    if report := _format_report(\n        base_dir, matches, tag_order=tag_order,\n    ).strip():\n        path_tag_summary.parent.mkdir(exist_ok=True, parents=True)\n        path_tag_summary.write_text(f'{header}\\n\\n{report}\\n\\n&lt;!-- {SKIP_PHRASE} --&gt;\\n')\n        logger.text('Created Code Tag Summary', path_tag_summary=path_tag_summary)\n    elif path_tag_summary.is_file():\n        path_tag_summary.unlink()\n</code></pre>"},{"location":"reference/calcipy/code_tag_collector/_collector/","title":"_collector","text":"<p>Collect code tags and output for review in a single location.</p>"},{"location":"reference/calcipy/code_tag_collector/_collector/#calcipy.code_tag_collector._collector-attributes","title":"Attributes","text":""},{"location":"reference/calcipy/code_tag_collector/_collector/#calcipy.code_tag_collector._collector.CODE_TAG_RE","title":"CODE_TAG_RE  <code>module-attribute</code>","text":"<pre><code>CODE_TAG_RE = '((^|\\\\s|\\\\(|\"|\\\\\\')(?P&lt;tag&gt;{tag})(:| -)([^\\\\r\\\\n]))(?P&lt;text&gt;.+)'\n</code></pre> <p>Default code tag regex with <code>tag</code> and <code>text</code> matching groups.</p> <p>Requires formatting with list of tags: <code>CODE_TAG_RE.format(tag='|'.join(tag_list))</code></p> <p>Commonly, the <code>tag_list</code> could be <code>COMMON_CODE_TAGS</code></p>"},{"location":"reference/calcipy/code_tag_collector/_collector/#calcipy.code_tag_collector._collector.COMMON_CODE_TAGS","title":"COMMON_CODE_TAGS  <code>module-attribute</code>","text":"<pre><code>COMMON_CODE_TAGS = ['FIXME', 'TODO', 'PLANNED', 'HACK', 'REVIEW', 'TBD', 'DEBUG']\n</code></pre> <p>Most common code tags.</p> <p>FYI and NOTE are excluded to not be tracked in the Code Summary.</p>"},{"location":"reference/calcipy/code_tag_collector/_collector/#calcipy.code_tag_collector._collector.SKIP_PHRASE","title":"SKIP_PHRASE  <code>module-attribute</code>","text":"<pre><code>SKIP_PHRASE = 'calcipy_skip_tags'\n</code></pre> <p>String that indicates the file should be excluded from the tag search.</p>"},{"location":"reference/calcipy/code_tag_collector/_collector/#calcipy.code_tag_collector._collector-functions","title":"Functions","text":""},{"location":"reference/calcipy/code_tag_collector/_collector/#calcipy.code_tag_collector._collector.github_blame_url","title":"github_blame_url","text":"<pre><code>github_blame_url(clone_uri)\n</code></pre> <p>Format the blame URL.</p> PARAMETER DESCRIPTION <code>clone_uri</code> <p>git remote URI</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>str</code> <p><code>repo_url</code></p> <p> TYPE: <code>str</code> </p> Source code in <code>calcipy/code_tag_collector/_collector.py</code> <pre><code>@beartype\ndef github_blame_url(clone_uri: str) -&gt; str:\n    \"\"\"Format the blame URL.\n\n    Args:\n        clone_uri: git remote URI\n\n    Returns:\n       str: `repo_url`\n\n    \"\"\"\n    # Could be ssh or http (with or without .git)\n    # &gt; git@github.com:KyleKing/calcipy.git\n    # &gt; https://github.com/KyleKing/calcipy.git\n    if matches := re.compile(_GITHUB_ORIGIN).match(clone_uri):\n        github_url = 'https://github.com/'\n        return f\"{github_url}{matches['owner']}/{matches['repository']}\"\n    return ''\n</code></pre>"},{"location":"reference/calcipy/code_tag_collector/_collector/#calcipy.code_tag_collector._collector.write_code_tag_file","title":"write_code_tag_file","text":"<pre><code>write_code_tag_file(\n    path_tag_summary, paths_source, base_dir, regex=\"\", tags=\"\", header=\"# Task Summary\\n\\nAuto-Generated by `calcipy`\"\n)\n</code></pre> <p>Create the code tag summary file.</p> PARAMETER DESCRIPTION <code>path_tag_summary</code> <p>Path to the output file</p> <p> TYPE: <code>Path</code> </p> <code>paths_source</code> <p>list of source files to parse</p> <p> TYPE: <code>List[Path]</code> </p> <code>base_dir</code> <p>base directory relative to the searched files</p> <p> TYPE: <code>Path</code> </p> <code>regex</code> <p>compiled regular expression. Expected to have matching groups <code>(tag, text)</code>. Default is CODE_TAG_RE with tags from tag_order</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>tags</code> <p>subset of all tags to include in the report and specified order. Default is COMMON_CODE_TAGS</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>header</code> <p>header text</p> <p> TYPE: <code>str</code> DEFAULT: <code>'# Task Summary\\n\\nAuto-Generated by `calcipy`'</code> </p> Source code in <code>calcipy/code_tag_collector/_collector.py</code> <pre><code>@beartype\ndef write_code_tag_file(\n    path_tag_summary: Path,\n    paths_source: List[Path],\n    base_dir: Path,\n    regex: str = '',\n    tags: str = '',\n    header: str = '# Task Summary\\n\\nAuto-Generated by `calcipy`',\n) -&gt; None:\n    \"\"\"Create the code tag summary file.\n\n    Args:\n        path_tag_summary: Path to the output file\n        paths_source: list of source files to parse\n        base_dir: base directory relative to the searched files\n        regex: compiled regular expression. Expected to have matching groups `(tag, text)`.\n            Default is CODE_TAG_RE with tags from tag_order\n        tags: subset of all tags to include in the report and specified order. Default is COMMON_CODE_TAGS\n        header: header text\n\n    \"\"\"\n    tag_order = [_t.strip() for _t in tags.split(',') if _t] or COMMON_CODE_TAGS\n    matcher = (regex or CODE_TAG_RE).format(tag='|'.join(tag_order))\n\n    matches = _search_files(paths_source, re.compile(matcher))\n    if report := _format_report(\n        base_dir, matches, tag_order=tag_order,\n    ).strip():\n        path_tag_summary.parent.mkdir(exist_ok=True, parents=True)\n        path_tag_summary.write_text(f'{header}\\n\\n{report}\\n\\n&lt;!-- {SKIP_PHRASE} --&gt;\\n')\n        logger.text('Created Code Tag Summary', path_tag_summary=path_tag_summary)\n    elif path_tag_summary.is_file():\n        path_tag_summary.unlink()\n</code></pre>"},{"location":"reference/calcipy/dot_dict/","title":"dot_dict","text":""},{"location":"reference/calcipy/dot_dict/#calcipy.dot_dict-functions","title":"Functions","text":""},{"location":"reference/calcipy/dot_dict/_dot_dict/","title":"_dot_dict","text":"<p>Dotted dictionary for consistent interface.</p> <p>Consider moving to Corallium, but I don\u2019t have any uses for it yet.</p>"},{"location":"reference/calcipy/dot_dict/_dot_dict/#calcipy.dot_dict._dot_dict-attributes","title":"Attributes","text":""},{"location":"reference/calcipy/dot_dict/_dot_dict/#calcipy.dot_dict._dot_dict.DdictType","title":"DdictType  <code>module-attribute</code>","text":"<pre><code>DdictType = Union[Dict[str, Any], Box]\n</code></pre> <p>Return type from <code>ddict()</code>.</p>"},{"location":"reference/calcipy/dot_dict/_dot_dict/#calcipy.dot_dict._dot_dict-functions","title":"Functions","text":""},{"location":"reference/calcipy/dot_dict/_dot_dict/#calcipy.dot_dict._dot_dict.ddict","title":"ddict","text":"<pre><code>ddict(**kwargs)\n</code></pre> <p>Return a dotted dictionary that can also be accessed normally.</p> <ul> <li>Currently uses <code>python-box</code></li> <li>Could consider <code>cleverdict</code> which had updates as recently as 2022</li> <li>There are numerous other variations that haven\u2019t been updated since 2020, such as <code>munch</code>, <code>bunch</code>, <code>ddict</code></li> </ul> PARAMETER DESCRIPTION <code>**kwargs</code> <p>keyword arguments formatted into dictionary</p> <p> TYPE: <code>Dict[str, Any]</code> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>DdictType</code> <p>dotted dictionary</p> <p> TYPE: <code>DdictType</code> </p> Source code in <code>calcipy/dot_dict/_dot_dict.py</code> <pre><code>@beartype\ndef ddict(**kwargs: Dict[str, Any]) -&gt; DdictType:\n    \"\"\"Return a dotted dictionary that can also be accessed normally.\n\n    - Currently uses `python-box`\n    - Could consider `cleverdict` which had updates as recently as 2022\n    - There are numerous other variations that haven't been updated since 2020, such as `munch`, `bunch`, `ddict`\n\n    Args:\n        **kwargs: keyword arguments formatted into dictionary\n\n    Returns:\n        DdictType: dotted dictionary\n\n    \"\"\"\n    return Box(kwargs)\n</code></pre>"},{"location":"reference/calcipy/experiments/","title":"experiments","text":""},{"location":"reference/calcipy/experiments/bump_programmatically/","title":"bump_programmatically","text":"<p>Experiment with bumping the git tag using <code>griffe</code>.</p>"},{"location":"reference/calcipy/experiments/bump_programmatically/#calcipy.experiments.bump_programmatically-functions","title":"Functions","text":""},{"location":"reference/calcipy/experiments/bump_programmatically/#calcipy.experiments.bump_programmatically.bump_tag","title":"bump_tag","text":"<pre><code>bump_tag(*, pkg_name, tag, tag_prefix)\n</code></pre> <p>Make a SemVer minor bump using <code>griffe</code> if there were any breaking changes.</p> <p>Major versions must be bumped manually</p> Source code in <code>calcipy/experiments/bump_programmatically.py</code> <pre><code>@beartype\ndef bump_tag(*, pkg_name: str, tag: str, tag_prefix: str) -&gt; str:\n    \"\"\"Make a SemVer minor bump using `griffe` if there were any breaking changes.\n\n    Major versions must be bumped manually\n\n    \"\"\"\n    previous = griffe.load_git(pkg_name, ref=tag)\n    current = griffe.load(pkg_name)\n\n    breakages = [*griffe.find_breaking_changes(previous, current)]\n    for breakage in breakages:\n        try:\n            logger.text(breakage._explain_oneline())  # noqa: SLF001\n        except BuiltinModuleError:  # noqa: PERF203\n            logger.warning(str(breakage))\n        except Exception:\n            logger.exception(str(breakage))\n\n    try:\n        ver = semver.Version.parse(tag.replace(tag_prefix, ''))\n    except ValueError:\n        logger.exception('Failed to parse tag', tag=tag)\n        return ''\n    new_ver = ver.bump_minor() if any(breakages) else ver.bump_patch()\n    return f'{tag_prefix}{new_ver}'\n</code></pre>"},{"location":"reference/calcipy/experiments/check_duplicate_test_names/","title":"check_duplicate_test_names","text":"<p>Experiment with checking for duplicate test names.</p>"},{"location":"reference/calcipy/experiments/check_duplicate_test_names/#calcipy.experiments.check_duplicate_test_names-functions","title":"Functions","text":""},{"location":"reference/calcipy/experiments/check_duplicate_test_names/#calcipy.experiments.check_duplicate_test_names.run","title":"run","text":"<pre><code>run(test_path)\n</code></pre> <p>Check for duplicates in the test suite.</p> <p>Inspired by: https://stackoverflow.com/a/67840804/3219667</p> Source code in <code>calcipy/experiments/check_duplicate_test_names.py</code> <pre><code>@beartype\ndef run(test_path: Path) -&gt; List[str]:  # noqa: C901,CAC001  # pylint: disable=too-complex\n    \"\"\"Check for duplicates in the test suite.\n\n    Inspired by: https://stackoverflow.com/a/67840804/3219667\n\n    \"\"\"\n    summary = set()\n    duplicates = []\n\n    for path_test in test_path.rglob('test_*.py'):  # pylint: disable=too-many-nested-blocks\n        logger.info(path_test.as_posix())\n        parsed_ast = ast.parse(path_test.read_text())\n\n        for node in parsed_ast.body:\n            if isinstance(node, ast.FunctionDef):\n                if node.name in summary and node.name.startswith('test_'):\n                    duplicates.append(node.name)\n                summary.add(node.name)\n                _show_info(node)\n            elif isinstance(node, ast.ClassDef):\n                logger.info('Class name', name=node.name)\n                for method in node.body:\n                    if isinstance(method, ast.FunctionDef):\n                        _show_info(method)\n\n        for node in ast.walk(parsed_ast):  # type: ignore[assignment]\n            if (\n                isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef))\n                and node.name not in summary\n            ):\n                logger.info('Found new function(s) through walking')\n                _show_info(node)\n                summary.add(node.name)\n\n    if duplicates:\n        logger.error('Found Duplicates', duplicates=duplicates)\n    return duplicates\n</code></pre>"},{"location":"reference/calcipy/md_writer/","title":"md_writer","text":""},{"location":"reference/calcipy/md_writer/#calcipy.md_writer-functions","title":"Functions","text":""},{"location":"reference/calcipy/md_writer/#calcipy.md_writer.write_autoformatted_md_sections","title":"write_autoformatted_md_sections","text":"<pre><code>write_autoformatted_md_sections(handler_lookup=None, paths_md=None)\n</code></pre> <p>Populate the auto-formatted sections of markdown files with user-configured logic.</p> Source code in <code>calcipy/md_writer/_writer.py</code> <pre><code>@beartype\ndef write_autoformatted_md_sections(\n    handler_lookup: Optional[HandlerLookupT] = None,\n    paths_md: Optional[List[Path]] = None,\n) -&gt; None:\n    \"\"\"Populate the auto-formatted sections of markdown files with user-configured logic.\"\"\"\n    _lookup: HandlerLookupT = handler_lookup or {\n        'COVERAGE ': _handle_coverage,\n        'SOURCE_FILE=': _handle_source_file,\n    }\n\n    paths = paths_md or find_project_files_by_suffix(get_project_path()).get('md') or []\n    for path_md in paths:\n        logger.text_debug('Processing', path_md=path_md)\n        if md_lines := _ReplacementMachine().parse(read_lines(path_md), _lookup, path_md):\n            path_md.write_text('\\n'.join(md_lines) + '\\n', encoding='utf-8')\n</code></pre>"},{"location":"reference/calcipy/md_writer/_writer/","title":"_writer","text":"<p>Markdown Machine.</p>"},{"location":"reference/calcipy/md_writer/_writer/#calcipy.md_writer._writer-attributes","title":"Attributes","text":""},{"location":"reference/calcipy/md_writer/_writer/#calcipy.md_writer._writer.HandlerLookupT","title":"HandlerLookupT  <code>module-attribute</code>","text":"<pre><code>HandlerLookupT = Dict[str, Callable[[str, Path], List[str]]]\n</code></pre> <p>Handler Lookup.</p>"},{"location":"reference/calcipy/md_writer/_writer/#calcipy.md_writer._writer-functions","title":"Functions","text":""},{"location":"reference/calcipy/md_writer/_writer/#calcipy.md_writer._writer.write_autoformatted_md_sections","title":"write_autoformatted_md_sections","text":"<pre><code>write_autoformatted_md_sections(handler_lookup=None, paths_md=None)\n</code></pre> <p>Populate the auto-formatted sections of markdown files with user-configured logic.</p> Source code in <code>calcipy/md_writer/_writer.py</code> <pre><code>@beartype\ndef write_autoformatted_md_sections(\n    handler_lookup: Optional[HandlerLookupT] = None,\n    paths_md: Optional[List[Path]] = None,\n) -&gt; None:\n    \"\"\"Populate the auto-formatted sections of markdown files with user-configured logic.\"\"\"\n    _lookup: HandlerLookupT = handler_lookup or {\n        'COVERAGE ': _handle_coverage,\n        'SOURCE_FILE=': _handle_source_file,\n    }\n\n    paths = paths_md or find_project_files_by_suffix(get_project_path()).get('md') or []\n    for path_md in paths:\n        logger.text_debug('Processing', path_md=path_md)\n        if md_lines := _ReplacementMachine().parse(read_lines(path_md), _lookup, path_md):\n            path_md.write_text('\\n'.join(md_lines) + '\\n', encoding='utf-8')\n</code></pre>"},{"location":"reference/calcipy/noxfile/","title":"noxfile","text":""},{"location":"reference/calcipy/noxfile/#calcipy.noxfile-functions","title":"Functions","text":""},{"location":"reference/calcipy/noxfile/_noxfile/","title":"_noxfile","text":"<p>nox-poetry configuration file.</p> <p>Useful snippets from docs</p> <pre><code>poetry run nox -l\npoetry run nox --list-sessions\n\npoetry run nox -s build_check-3.8 build_dist-3.8 tests-3.8\npoetry run nox --session tests-3.11\n\npoetry run nox --python 3.8\n\npoetry run nox -k \"not build_check and not build_dist\"\n</code></pre> <p>Useful nox snippets</p> <pre><code># Example conditionally skipping a session\nif not session.interactive:\n    session.skip('Cannot run detect-secrets audit in non-interactive shell')\n\n# Install pinned version\nsession.install('detect-secrets==1.0.3')\n\n# Example capturing STDOUT into a file (could do the same for stderr)\npath_stdout = Path('.stdout.txt').resolve()\nwith open(path_stdout, 'w') as out:\n    session.run(*shlex.split('echo Hello World!'), stdout=out)\n</code></pre>"},{"location":"reference/calcipy/noxfile/_noxfile/#calcipy.noxfile._noxfile-functions","title":"Functions","text":""},{"location":"reference/calcipy/noxfile/_noxfile/#calcipy.noxfile._noxfile.build_check","title":"build_check","text":"<pre><code>build_check(session)\n</code></pre> <p>Check that the built output meets all checks.</p> Source code in <code>calcipy/noxfile/_noxfile.py</code> <pre><code>@nox_poetry_session(python=_get_pythons()[-1:], reuse_venv=True)\ndef build_check(session: NPSession) -&gt; None:  # pragma: no cover\n    \"\"\"Check that the built output meets all checks.\"\"\"\n    # Build sdist and fix return URI, which will have file://...#egg=calcipy\n    sdist_uri = session.poetry.build_package(distribution_format=DistributionFormat.SDIST)\n    path_sdist = Path(url2pathname(urlparse(sdist_uri).path))\n    logger.text_debug('Fixed sdist URI', sdist_uri=sdist_uri, path_sdist=path_sdist)\n    # Check with pyroma\n    session.install('pyroma&gt;=4.0', '--upgrade')\n    # required for \"poetry.core.masonry.api\" build backend\n    session.run('python', '-m', 'pip', 'install', 'poetry&gt;=1.3', stdout=True)\n    session.run('pyroma', '--file', path_sdist.as_posix(), '--min=9', stdout=True)\n</code></pre>"},{"location":"reference/calcipy/noxfile/_noxfile/#calcipy.noxfile._noxfile.build_dist","title":"build_dist","text":"<pre><code>build_dist(session)\n</code></pre> <p>Build and test the project files within a controlled environment for repeatability.</p> Source code in <code>calcipy/noxfile/_noxfile.py</code> <pre><code>@nox_session(python=_get_pythons()[-1:], reuse_venv=False)\ndef build_dist(session: Union[NoxSession, NPSession]) -&gt; None:  # pragma: no cover\n    \"\"\"Build and test the project files within a controlled environment for repeatability.\"\"\"\n    dist_path = Path('dist')\n    if_found_unlink(dist_path)\n\n    # Support 'corallium' by re-implementing \"session.poetry.build_package()\", from:\n    # https://github.com/cjolowicz/nox-poetry/blob/5772b66ebff8d5a3351a08ed402d3d31e48be5f8/src/nox_poetry/sessions.py#L233-L255\n    # https://github.com/cjolowicz/nox-poetry/blob/5772b66ebff8d5a3351a08ed402d3d31e48be5f8/src/nox_poetry/poetry.py#L111-L154\n    output = session.run(*shlex.split('poetry build --format=wheel --no-ansi'),\n                         external=True, silent=True)\n    output = cast(str, output)\n    wheel = dist_path / output.split()[-1]\n    path_wheel = wheel.resolve().as_uri()\n\n    logger.text('Created wheel', path_wheel=path_wheel)\n    # Install the wheel and check that imports without any of the optional dependencies\n    session.install(path_wheel)\n    session.run(*shlex.split('python scripts/check_imports.py'), stdout=True)\n</code></pre>"},{"location":"reference/calcipy/noxfile/_noxfile/#calcipy.noxfile._noxfile.tests","title":"tests","text":"<pre><code>tests(session)\n</code></pre> <p>Run doit test task for specified python versions.</p> Source code in <code>calcipy/noxfile/_noxfile.py</code> <pre><code>@nox_session(python=_get_pythons(), reuse_venv=True)\ndef tests(session: Union[NoxSession, NPSession]) -&gt; None:  # pragma: no cover\n    \"\"\"Run doit test task for specified python versions.\"\"\"\n    _install_local(session, ['ddict', 'doc', 'lint', 'nox', 'stale', 'tags', 'test'])\n    session.run(*shlex.split('pytest ./tests'), stdout=True, env={'RUNTIME_TYPE_CHECKING_MODE': 'WARNING'})\n</code></pre>"},{"location":"reference/calcipy/tasks/","title":"tasks","text":""},{"location":"reference/calcipy/tasks/_invoke/","title":"_invoke","text":"<p>Extend Invoke for Calcipy.</p>"},{"location":"reference/calcipy/tasks/_invoke/#calcipy.tasks._invoke-classes","title":"Classes","text":""},{"location":"reference/calcipy/tasks/_invoke/#calcipy.tasks._invoke.Collection","title":"Collection","text":"<p>               Bases: <code>Collection</code></p> Source code in <code>calcipy/tasks/_invoke.py</code> <pre><code>class Collection(InvokeCollection):\n\n    @classmethod\n    def from_module(\n        cls,\n        module: ModuleType,\n        name: Optional[str] = None,\n        config: Optional[Dict[str, Any]] = None,\n        loaded_from: Optional[str] = None,\n        auto_dash_names: Optional[bool] = None,\n    ) -&gt; 'InvokeCollection':\n        \"\"\"Extend search for a namespace, Task, or deferred task.\"\"\"\n        collection = super().from_module(\n            module=module,\n            name=name,\n            config=config,\n            loaded_from=loaded_from,\n            auto_dash_names=auto_dash_names,\n        )\n\n        # If tasks were not loaded from a namespace or otherwise found\n        if not collection.task_names:\n            # Look for any decorated, but deferred \"Tasks\"\n            for task in (fxn for fxn in vars(module).values() if hasattr(fxn, TASK_ARGS_ATTR)):\n                collection.add_task(task)\n\n        return collection\n\n    def add_task(\n        self,\n        task: DeferedTask,\n        name: Optional[str] = None,\n        aliases: Optional[Tuple[str, ...]] = None,\n        default: Optional[bool] = None,\n    ) -&gt; None:\n        \"\"\"Extend for deferred tasks.\"\"\"\n        super().add_task(task=_build_task(task), name=name, aliases=aliases, default=default)\n</code></pre>"},{"location":"reference/calcipy/tasks/_invoke/#calcipy.tasks._invoke.Collection-functions","title":"Functions","text":""},{"location":"reference/calcipy/tasks/_invoke/#calcipy.tasks._invoke.Collection.add_task","title":"add_task","text":"<pre><code>add_task(task, name=None, aliases=None, default=None)\n</code></pre> <p>Extend for deferred tasks.</p> Source code in <code>calcipy/tasks/_invoke.py</code> <pre><code>def add_task(\n    self,\n    task: DeferedTask,\n    name: Optional[str] = None,\n    aliases: Optional[Tuple[str, ...]] = None,\n    default: Optional[bool] = None,\n) -&gt; None:\n    \"\"\"Extend for deferred tasks.\"\"\"\n    super().add_task(task=_build_task(task), name=name, aliases=aliases, default=default)\n</code></pre>"},{"location":"reference/calcipy/tasks/_invoke/#calcipy.tasks._invoke.Collection.from_module","title":"from_module  <code>classmethod</code>","text":"<pre><code>from_module(module, name=None, config=None, loaded_from=None, auto_dash_names=None)\n</code></pre> <p>Extend search for a namespace, Task, or deferred task.</p> Source code in <code>calcipy/tasks/_invoke.py</code> <pre><code>@classmethod\ndef from_module(\n    cls,\n    module: ModuleType,\n    name: Optional[str] = None,\n    config: Optional[Dict[str, Any]] = None,\n    loaded_from: Optional[str] = None,\n    auto_dash_names: Optional[bool] = None,\n) -&gt; 'InvokeCollection':\n    \"\"\"Extend search for a namespace, Task, or deferred task.\"\"\"\n    collection = super().from_module(\n        module=module,\n        name=name,\n        config=config,\n        loaded_from=loaded_from,\n        auto_dash_names=auto_dash_names,\n    )\n\n    # If tasks were not loaded from a namespace or otherwise found\n    if not collection.task_names:\n        # Look for any decorated, but deferred \"Tasks\"\n        for task in (fxn for fxn in vars(module).values() if hasattr(fxn, TASK_ARGS_ATTR)):\n            collection.add_task(task)\n\n    return collection\n</code></pre>"},{"location":"reference/calcipy/tasks/_invoke/#calcipy.tasks._invoke.GlobalTaskOptions","title":"GlobalTaskOptions","text":"<p>               Bases: <code>BaseModel</code></p> <p>Global Task Options.</p> Source code in <code>calcipy/tasks/_invoke.py</code> <pre><code>class GlobalTaskOptions(BaseModel):\n    \"\"\"Global Task Options.\"\"\"\n\n    working_dir: Path = Field(default_factory=Path.cwd)\n    \"\"\"Working directory for the program to use globally.\"\"\"\n\n    file_args: List[Path] = Field(default_factory=list)\n    \"\"\"List of Paths to modify.\"\"\"\n\n    verbose: PositiveInt = Field(default=0, le=3)\n    \"\"\"Verbosity level.\"\"\"\n\n    keep_going: bool = False\n    \"\"\"Continue task execution regardless of failure.\"\"\"\n</code></pre>"},{"location":"reference/calcipy/tasks/_invoke/#calcipy.tasks._invoke.GlobalTaskOptions-attributes","title":"Attributes","text":""},{"location":"reference/calcipy/tasks/_invoke/#calcipy.tasks._invoke.GlobalTaskOptions.file_args","title":"file_args  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>file_args = Field(default_factory=list)\n</code></pre> <p>List of Paths to modify.</p>"},{"location":"reference/calcipy/tasks/_invoke/#calcipy.tasks._invoke.GlobalTaskOptions.keep_going","title":"keep_going  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>keep_going = False\n</code></pre> <p>Continue task execution regardless of failure.</p>"},{"location":"reference/calcipy/tasks/_invoke/#calcipy.tasks._invoke.GlobalTaskOptions.verbose","title":"verbose  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>verbose = Field(default=0, le=3)\n</code></pre> <p>Verbosity level.</p>"},{"location":"reference/calcipy/tasks/_invoke/#calcipy.tasks._invoke.GlobalTaskOptions.working_dir","title":"working_dir  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>working_dir = Field(default_factory=cwd)\n</code></pre> <p>Working directory for the program to use globally.</p>"},{"location":"reference/calcipy/tasks/all_tasks/","title":"all_tasks","text":"<p>Tasks can be imported piecemeal or imported in their entirety from here.</p>"},{"location":"reference/calcipy/tasks/all_tasks/#calcipy.tasks.all_tasks-attributes","title":"Attributes","text":""},{"location":"reference/calcipy/tasks/all_tasks/#calcipy.tasks.all_tasks.TaskList","title":"TaskList  <code>module-attribute</code>","text":"<pre><code>TaskList = List[Union[Call, DeferedTask]]\n</code></pre> <p>List of wrapped or normal task functions.</p>"},{"location":"reference/calcipy/tasks/all_tasks/#calcipy.tasks.all_tasks-classes","title":"Classes","text":""},{"location":"reference/calcipy/tasks/all_tasks/#calcipy.tasks.all_tasks-functions","title":"Functions","text":""},{"location":"reference/calcipy/tasks/all_tasks/#calcipy.tasks.all_tasks.main","title":"main","text":"<pre><code>main(_ctx)\n</code></pre> <p>Main task pipeline.</p> Source code in <code>calcipy/tasks/all_tasks.py</code> <pre><code>@task(post=with_progress(_MAIN_TASKS))\ndef main(_ctx: Context) -&gt; None:\n    \"\"\"Main task pipeline.\"\"\"\n</code></pre>"},{"location":"reference/calcipy/tasks/all_tasks/#calcipy.tasks.all_tasks.other","title":"other","text":"<pre><code>other(_ctx)\n</code></pre> <p>Run tasks that are otherwise not exercised in main.</p> Source code in <code>calcipy/tasks/all_tasks.py</code> <pre><code>@task(post=with_progress(_OTHER_TASKS))\ndef other(_ctx: Context) -&gt; None:\n    \"\"\"Run tasks that are otherwise not exercised in main.\"\"\"\n</code></pre>"},{"location":"reference/calcipy/tasks/all_tasks/#calcipy.tasks.all_tasks.progress","title":"progress","text":"<pre><code>progress(_ctx, *, index, total)\n</code></pre> <p>Progress Task.</p> Source code in <code>calcipy/tasks/all_tasks.py</code> <pre><code>@task(\n    help={\n        'index': 'Current index (0-indexed)',\n        'total': 'Total steps',\n    },\n    show_task_info=False,\n)\ndef progress(_ctx: Context, *, index: int, total: int) -&gt; None:\n    \"\"\"Progress Task.\"\"\"\n    logger.text('Progress', is_header=True, index=index + 1, total=total)\n</code></pre>"},{"location":"reference/calcipy/tasks/all_tasks/#calcipy.tasks.all_tasks.release","title":"release","text":"<pre><code>release(ctx, *, suffix=None)\n</code></pre> <p>Release pipeline.</p> Source code in <code>calcipy/tasks/all_tasks.py</code> <pre><code>@task(\n    help=cl.bump.help,  # pyright: ignore[reportFunctionMemberAccess]\n    post=with_progress(\n        [\n            pack.lock,\n            doc.build,\n            doc.deploy,\n            pack.publish,\n        ],\n        offset=1,\n    ),\n)\ndef release(ctx: Context, *, suffix: cl.SuffixT = None) -&gt; None:\n    \"\"\"Release pipeline.\"\"\"\n    cl.bumpz(ctx, suffix=suffix)\n</code></pre>"},{"location":"reference/calcipy/tasks/all_tasks/#calcipy.tasks.all_tasks.summary","title":"summary","text":"<pre><code>summary(_ctx, *, message)\n</code></pre> <p>Summary Task.</p> Source code in <code>calcipy/tasks/all_tasks.py</code> <pre><code>@task(\n    help={\n        'message': 'String message to display',\n    },\n    show_task_info=False,\n)\ndef summary(_ctx: Context, *, message: str) -&gt; None:\n    \"\"\"Summary Task.\"\"\"\n    logger.text(message, is_header=True)\n</code></pre>"},{"location":"reference/calcipy/tasks/all_tasks/#calcipy.tasks.all_tasks.with_progress","title":"with_progress","text":"<pre><code>with_progress(items, offset=0)\n</code></pre> <p>Inject intermediary \u2018progress\u2019 tasks.</p> PARAMETER DESCRIPTION <code>items</code> <p>list of tasks</p> <p> TYPE: <code>Any</code> </p> <code>offset</code> <p>Optional offset to shift counters</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> Source code in <code>calcipy/tasks/all_tasks.py</code> <pre><code>@beartype\ndef with_progress(items: Any, offset: int = 0) -&gt; TaskList:\n    \"\"\"Inject intermediary 'progress' tasks.\n\n    Args:\n        items: list of tasks\n        offset: Optional offset to shift counters\n\n    \"\"\"\n    task_items = [_build_task(_t) for _t in items]\n    message = 'Running tasks: ' + ', '.join([str(_t.__name__) for _t in task_items])\n    tasks: TaskList = [summary.with_kwargs(message=message)]  # pyright: ignore[reportFunctionMemberAccess]\n\n    total = len(task_items) + offset\n    for idx, item in enumerate(task_items):\n        tasks += [\n            progress.with_kwargs(index=idx + offset, total=total),  # pyright: ignore[reportFunctionMemberAccess]\n            item,\n        ]\n    return tasks\n</code></pre>"},{"location":"reference/calcipy/tasks/cl/","title":"cl","text":"<p>Changelog CLI.</p>"},{"location":"reference/calcipy/tasks/cl/#calcipy.tasks.cl-attributes","title":"Attributes","text":""},{"location":"reference/calcipy/tasks/cl/#calcipy.tasks.cl.SuffixT","title":"SuffixT  <code>module-attribute</code>","text":"<pre><code>SuffixT = Optional[Literal['alpha', 'beta', 'rc']]\n</code></pre> <p>Prerelease Suffix Type.</p>"},{"location":"reference/calcipy/tasks/cl/#calcipy.tasks.cl-functions","title":"Functions","text":""},{"location":"reference/calcipy/tasks/cl/#calcipy.tasks.cl.bump","title":"bump","text":"<pre><code>bump(ctx, *, suffix=None)\n</code></pre> <p>Bumps project version based on commits &amp; settings in pyproject.toml.</p> Source code in <code>calcipy/tasks/cl.py</code> <pre><code>@task(\n    pre=[write],\n    help={\n        'suffix': 'Specify prerelease suffix for version bump (alpha, beta, rc)',\n    },\n)\ndef bump(ctx: Context, *, suffix: SuffixT = None) -&gt; None:\n    \"\"\"Bumps project version based on commits &amp; settings in pyproject.toml.\"\"\"\n    bumpz(ctx, suffix=suffix)\n</code></pre>"},{"location":"reference/calcipy/tasks/cl/#calcipy.tasks.cl.bumpz","title":"bumpz","text":"<pre><code>bumpz(ctx, *, suffix=None)\n</code></pre> <p>Bumps project version based on commits &amp; settings in pyproject.toml.</p> Source code in <code>calcipy/tasks/cl.py</code> <pre><code>@beartype\ndef bumpz(ctx: Context, *, suffix: SuffixT = None) -&gt; None:\n    \"\"\"Bumps project version based on commits &amp; settings in pyproject.toml.\"\"\"\n    check_installed(ctx, executable='gh', message=GH_MESSAGE)\n\n    opt_cz_args = f' --prerelease={suffix}' if suffix else ''\n    run(ctx, f'{python_dir()}/cz bump{opt_cz_args} --annotated-tag --no-verify --gpg-sign')\n\n    run(ctx, 'git push origin --tags --no-verify')\n\n    get_last_tag = 'git tag --list --sort=-creatordate | head -n 1'\n    opt_gh_args = ' --prerelease' if suffix else ''\n    run(ctx, f'gh release create --generate-notes $({get_last_tag}){opt_gh_args}')\n</code></pre>"},{"location":"reference/calcipy/tasks/cl/#calcipy.tasks.cl.write","title":"write","text":"<pre><code>write(ctx)\n</code></pre> <p>Write a Changelog file with the raw Git history.</p> <p>Resources:</p> <ul> <li>https://keepachangelog.com/en/1.0.0/</li> <li>https://www.conventionalcommits.org/en/v1.0.0/</li> <li>https://writingfordevelopers.substack.com/p/how-to-write-a-commit-message</li> <li>https://chris.beams.io/posts/git-commit/</li> <li>https://semver.org/</li> <li>https://calver.org/</li> </ul> RETURNS DESCRIPTION <code>None</code> <p>List[DoitAction]: doit actions</p> Source code in <code>calcipy/tasks/cl.py</code> <pre><code>@task()\ndef write(ctx: Context) -&gt; None:\n    \"\"\"Write a Changelog file with the raw Git history.\n\n    Resources:\n\n    - https://keepachangelog.com/en/1.0.0/\n    - https://www.conventionalcommits.org/en/v1.0.0/\n    - https://writingfordevelopers.substack.com/p/how-to-write-a-commit-message\n    - https://chris.beams.io/posts/git-commit/\n    - https://semver.org/\n    - https://calver.org/\n\n    Returns:\n        List[DoitAction]: doit actions\n\n    \"\"\"\n    run(ctx, f'{python_dir()}/cz changelog')\n    path_cl = get_project_path() / 'CHANGELOG.md'\n    if not path_cl.is_file():\n        msg = f'Could not locate the changelog at: {path_cl}'\n        raise FileNotFoundError(msg)\n    path_cl.replace(get_doc_subdir() / path_cl.name)\n</code></pre>"},{"location":"reference/calcipy/tasks/defaults/","title":"defaults","text":"<p>Calcipy-Invoke Defaults.</p>"},{"location":"reference/calcipy/tasks/defaults/#calcipy.tasks.defaults-classes","title":"Classes","text":""},{"location":"reference/calcipy/tasks/defaults/#calcipy.tasks.defaults-functions","title":"Functions","text":""},{"location":"reference/calcipy/tasks/defaults/#calcipy.tasks.defaults.from_ctx","title":"from_ctx","text":"<pre><code>from_ctx(ctx, group, key)\n</code></pre> <p>Safely extract the value from the context or the defaults.</p> <p>Instead of <code>ctx.tests.out_dir</code> use <code>from_ctx(ctx, 'test', 'out_dir')</code></p> Source code in <code>calcipy/tasks/defaults.py</code> <pre><code>@beartype\ndef from_ctx(ctx: Context, group: str, key: str) -&gt; str:\n    \"\"\"Safely extract the value from the context or the defaults.\n\n    Instead of `ctx.tests.out_dir` use `from_ctx(ctx, 'test', 'out_dir')`\n\n    \"\"\"\n    with suppress(KeyError):\n        return str(ctx.config[group][key])\n    return str(DEFAULTS[group][key])\n</code></pre>"},{"location":"reference/calcipy/tasks/defaults/#calcipy.tasks.defaults.new_collection","title":"new_collection","text":"<pre><code>new_collection()\n</code></pre> <p>Initialize a collection with the combination of merged and project-specific defaults.</p> Source code in <code>calcipy/tasks/defaults.py</code> <pre><code>@beartype\ndef new_collection() -&gt; Collection:\n    \"\"\"Initialize a collection with the combination of merged and project-specific defaults.\"\"\"\n    ns = Collection('')\n\n    # Merge default and user configuration\n    ns.configure(DEFAULTS)\n    config_path = Path('.calcipy.json')\n    if config_path.is_file():\n        ns.configure(json.loads(config_path.read_text(encoding='utf-8')))\n\n    return ns\n</code></pre>"},{"location":"reference/calcipy/tasks/doc/","title":"doc","text":"<p>Document CLI.</p>"},{"location":"reference/calcipy/tasks/doc/#calcipy.tasks.doc-functions","title":"Functions","text":""},{"location":"reference/calcipy/tasks/doc/#calcipy.tasks.doc.build","title":"build","text":"<pre><code>build(ctx)\n</code></pre> <p>Build documentation with mkdocs.</p> Source code in <code>calcipy/tasks/doc.py</code> <pre><code>@task()\ndef build(ctx: Context) -&gt; None:\n    \"\"\"Build documentation with mkdocs.\"\"\"\n    auto_doc_path = get_doc_subdir().parent / 'modules'\n    write_autoformatted_md_sections()\n    delete_dir(auto_doc_path)\n    _diagram_task(ctx, auto_doc_path)\n\n    # Find and trim trailing whitespace\n    for path_md in auto_doc_path.rglob('*.md'):\n        trim_trailing_whitespace(path_md)\n\n    run(ctx, f'{python_dir()}/mkdocs build --site-dir {get_out_dir()}')\n</code></pre>"},{"location":"reference/calcipy/tasks/doc/#calcipy.tasks.doc.deploy","title":"deploy","text":"<pre><code>deploy(ctx)\n</code></pre> <p>Deploy docs to the Github <code>gh-pages</code> branch.</p> Source code in <code>calcipy/tasks/doc.py</code> <pre><code>@task()\ndef deploy(ctx: Context) -&gt; None:\n    \"\"\"Deploy docs to the Github `gh-pages` branch.\"\"\"\n    if _is_mkdocs_local():  # pragma: no cover\n        raise NotImplementedError('Not yet configured to deploy documentation without \"use_directory_urls\"')\n\n    with suppress(UnexpectedExit):\n        run(ctx, 'pre-commit uninstall')  # To prevent pre-commit failures when mkdocs calls push\n    run(ctx, f'{python_dir()}/mkdocs gh-deploy --force')\n    with suppress(UnexpectedExit):\n        run(ctx, 'pre-commit install')  # Restore pre-commit\n</code></pre>"},{"location":"reference/calcipy/tasks/doc/#calcipy.tasks.doc.get_out_dir","title":"get_out_dir","text":"<pre><code>get_out_dir()\n</code></pre> <p>Retrieve the mkdocs-specified site directory.</p> Source code in <code>calcipy/tasks/doc.py</code> <pre><code>@beartype\ndef get_out_dir() -&gt; Path:\n    \"\"\"Retrieve the mkdocs-specified site directory.\"\"\"\n    mkdocs_config = read_yaml_file(get_project_path() / MKDOCS_CONFIG)\n    return Path(mkdocs_config.get('site_dir', 'releases/site'))\n</code></pre>"},{"location":"reference/calcipy/tasks/doc/#calcipy.tasks.doc.watch","title":"watch","text":"<pre><code>watch(ctx)\n</code></pre> <p>Serve local documentation for local editing.</p> Source code in <code>calcipy/tasks/doc.py</code> <pre><code>@task()\ndef watch(ctx: Context) -&gt; None:\n    \"\"\"Serve local documentation for local editing.\"\"\"\n    if _is_mkdocs_local():  # pragma: no cover\n        path_doc_index = get_out_dir() / 'index.html'\n        open_in_browser(path_doc_index)\n    else:  # pragma: no cover\n        webbrowser.open('http://localhost:8000')\n        run(ctx, f'{python_dir()}/mkdocs serve --dirtyreload')\n</code></pre>"},{"location":"reference/calcipy/tasks/executable_utils/","title":"executable_utils","text":"<p>Utilities for working in calcipy\u2019s python environment.</p>"},{"location":"reference/calcipy/tasks/executable_utils/#calcipy.tasks.executable_utils-functions","title":"Functions","text":""},{"location":"reference/calcipy/tasks/executable_utils/#calcipy.tasks.executable_utils.check_installed","title":"check_installed","text":"<pre><code>check_installed(ctx, executable, message)\n</code></pre> <p>If the required executable isn\u2019t present, raise a clear user error.</p> Source code in <code>calcipy/tasks/executable_utils.py</code> <pre><code>@beartype\ndef check_installed(ctx: Context, executable: str, message: str) -&gt; None:\n    \"\"\"If the required executable isn't present, raise a clear user error.\"\"\"\n    res = run(ctx, f'which {executable}', warn=True, hide=True)\n    if not res or res.exited == 1:\n        raise RuntimeError(message)\n</code></pre>"},{"location":"reference/calcipy/tasks/executable_utils/#calcipy.tasks.executable_utils.python_dir","title":"python_dir  <code>cached</code>","text":"<pre><code>python_dir()\n</code></pre> <p>Runs an executable from the currently active Python directory.</p> Source code in <code>calcipy/tasks/executable_utils.py</code> <pre><code>@lru_cache(maxsize=1)\ndef python_dir() -&gt; str:\n    \"\"\"Runs an executable from the currently active Python directory.\"\"\"\n    return str(resolve_python().parent)\n</code></pre>"},{"location":"reference/calcipy/tasks/executable_utils/#calcipy.tasks.executable_utils.python_m","title":"python_m  <code>cached</code>","text":"<pre><code>python_m()\n</code></pre> <p>Return the active python path and <code>-m</code> flag.</p> Source code in <code>calcipy/tasks/executable_utils.py</code> <pre><code>@lru_cache(maxsize=1)\ndef python_m() -&gt; str:\n    \"\"\"Return the active python path and `-m` flag.\"\"\"\n    return f'{resolve_python()} -m'\n</code></pre>"},{"location":"reference/calcipy/tasks/executable_utils/#calcipy.tasks.executable_utils.resolve_python","title":"resolve_python  <code>cached</code>","text":"<pre><code>resolve_python()\n</code></pre> <p>Resolve the user\u2019s Python path based on <code>sys</code>.</p> Source code in <code>calcipy/tasks/executable_utils.py</code> <pre><code>@lru_cache(maxsize=1)\ndef resolve_python() -&gt; Path:\n    \"\"\"Resolve the user's Python path based on `sys`.\"\"\"\n    python_path = Path(sys.executable)\n    with suppress(ValueError):\n        return python_path.relative_to(Path.cwd())\n    return python_path\n</code></pre>"},{"location":"reference/calcipy/tasks/lint/","title":"lint","text":"<p>Lint CLI.</p>"},{"location":"reference/calcipy/tasks/lint/#calcipy.tasks.lint-functions","title":"Functions","text":""},{"location":"reference/calcipy/tasks/lint/#calcipy.tasks.lint.check","title":"check","text":"<pre><code>check(ctx)\n</code></pre> <p>Run ruff as check-only.</p> Source code in <code>calcipy/tasks/lint.py</code> <pre><code>@task(default=True)\ndef check(ctx: Context) -&gt; None:\n    \"\"\"Run ruff as check-only.\"\"\"\n    _inner_task(ctx, command='ruff check')\n</code></pre>"},{"location":"reference/calcipy/tasks/lint/#calcipy.tasks.lint.fix","title":"fix","text":"<pre><code>fix(ctx)\n</code></pre> <p>Run ruff and apply fixes.</p> Source code in <code>calcipy/tasks/lint.py</code> <pre><code>@task()\ndef fix(ctx: Context) -&gt; None:\n    \"\"\"Run ruff and apply fixes.\"\"\"\n    _inner_task(ctx, command='ruff check', cli_args='--fix')\n</code></pre>"},{"location":"reference/calcipy/tasks/lint/#calcipy.tasks.lint.pre_commit","title":"pre_commit","text":"<pre><code>pre_commit(ctx, *, no_update=False)\n</code></pre> <p>Run pre-commit.</p> Source code in <code>calcipy/tasks/lint.py</code> <pre><code>@task(\n    help={\n        'no_update': 'Skip updating the pre-commit hooks',\n    },\n)\ndef pre_commit(ctx: Context, *, no_update: bool = False) -&gt; None:\n    \"\"\"Run pre-commit.\"\"\"\n    check_installed(ctx, executable='pre-commit', message=PRE_COMMIT_MESSAGE)\n\n    run(ctx, 'pre-commit install')\n    if not no_update:\n        run(ctx, 'pre-commit autoupdate')\n\n    stages_cli = ' '.join(f'--hook-stage {stg}' for stg in ALL_PRE_COMMIT_HOOK_STAGES)\n    run(ctx, f'pre-commit run --all-files {stages_cli}')\n</code></pre>"},{"location":"reference/calcipy/tasks/lint/#calcipy.tasks.lint.pylint","title":"pylint","text":"<pre><code>pylint(ctx, *, report=False)\n</code></pre> <p>Run pylint.</p> Source code in <code>calcipy/tasks/lint.py</code> <pre><code>@task(\n    help={\n        'report': 'if provided, show the pylint summary report',\n    },\n)\ndef pylint(ctx: Context, *, report: bool = False) -&gt; None:\n    \"\"\"Run pylint.\"\"\"\n    cli_args = '--report=y' if report else ''\n    _inner_task(ctx, command='pylint', cli_args=cli_args)\n</code></pre>"},{"location":"reference/calcipy/tasks/lint/#calcipy.tasks.lint.watch","title":"watch","text":"<pre><code>watch(ctx)\n</code></pre> <p>Run ruff as check-only.</p> Source code in <code>calcipy/tasks/lint.py</code> <pre><code>@task()\ndef watch(ctx: Context) -&gt; None:\n    \"\"\"Run ruff as check-only.\"\"\"\n    _inner_task(ctx, command='ruff check', cli_args='--watch --show-source')\n</code></pre>"},{"location":"reference/calcipy/tasks/nox/","title":"nox","text":"<p>Nox CLI.</p>"},{"location":"reference/calcipy/tasks/nox/#calcipy.tasks.nox-functions","title":"Functions","text":""},{"location":"reference/calcipy/tasks/nox/#calcipy.tasks.nox.noxfile","title":"noxfile","text":"<pre><code>noxfile(ctx, *, session='')\n</code></pre> <p>Run nox from the local noxfile.</p> Source code in <code>calcipy/tasks/nox.py</code> <pre><code>@task(\n    default=True,\n    help={\n        'session': 'Optional session to run',\n    },\n)\ndef noxfile(ctx: Context, *, session: str = '') -&gt; None:\n    \"\"\"Run nox from the local noxfile.\"\"\"\n    cli_args = ['--session', session] if session else []\n    run(ctx, f'{python_dir()}/nox --error-on-missing-interpreters {\" \".join(cli_args)}')\n</code></pre>"},{"location":"reference/calcipy/tasks/pack/","title":"pack","text":"<p>Packaging CLI.</p>"},{"location":"reference/calcipy/tasks/pack/#calcipy.tasks.pack-functions","title":"Functions","text":""},{"location":"reference/calcipy/tasks/pack/#calcipy.tasks.pack.bump_tag","title":"bump_tag","text":"<pre><code>bump_tag(ctx, *, tag, tag_prefix='', pkg_name='')\n</code></pre> <p>Experiment with bumping the git tag using <code>griffe</code>.</p> <p>Example for <code>calcipy</code>:</p> <pre><code>./run pack.bump-tag --tag=\"$(git tag -l \"*\" | sort | head -n 5 | tail -n 1)\" --tag-prefix=\"\"\n</code></pre> Source code in <code>calcipy/tasks/pack.py</code> <pre><code>@task(\n    help={\n        'tag': 'Last tag, can be provided with `--tag=\"$(git tag -l \"v*\" | sort | tail -n 1)\"`',\n        'tag_prefix': 'Optional tag prefix, such as \"v\"',\n        'pkg_name': 'Optional package name. If not provided, will read the poetry pyproject.toml file',\n    },\n)\ndef bump_tag(ctx: Context, *, tag: str, tag_prefix: str = '', pkg_name: str = '') -&gt; None:  # noqa: ARG001\n    \"\"\"Experiment with bumping the git tag using `griffe`.\n\n    Example for `calcipy`:\n\n    ```sh\n    ./run pack.bump-tag --tag=\"$(git tag -l \"*\" | sort | head -n 5 | tail -n 1)\" --tag-prefix=\"\"\n    ```\n\n    \"\"\"\n    from ..experiments import bump_programmatically  # noqa: PLC0415\n\n    if not tag:\n        raise ValueError('tag must not be empty')\n    if not pkg_name:\n        poetry_config = file_helpers.read_pyproject()['tool']['poetry']\n        pkg_name = poetry_config['name']\n\n    new_version = bump_programmatically.bump_tag(\n        pkg_name=pkg_name,\n        tag=tag,\n        tag_prefix=tag_prefix,\n    )\n    logger.text(new_version)\n</code></pre>"},{"location":"reference/calcipy/tasks/pack/#calcipy.tasks.pack.check_licenses","title":"check_licenses","text":"<pre><code>check_licenses(ctx)\n</code></pre> <p>Check licenses for compatibility with <code>licensecheck</code>.</p> Source code in <code>calcipy/tasks/pack.py</code> <pre><code>@task()\ndef check_licenses(ctx: Context) -&gt; None:\n    \"\"\"Check licenses for compatibility with `licensecheck`.\"\"\"\n    res = run(ctx, 'which licensecheck', warn=True, hide=True)\n    if not res or res.exited == 1:\n        logger.warning('`licensecheck` not found. installing with pipx')\n        run(ctx, 'pipx install licensecheck')\n    run(ctx, 'licensecheck')\n</code></pre>"},{"location":"reference/calcipy/tasks/pack/#calcipy.tasks.pack.install_extras","title":"install_extras","text":"<pre><code>install_extras(ctx)\n</code></pre> <p>Run poetry install with all extras.</p> Source code in <code>calcipy/tasks/pack.py</code> <pre><code>@task()\ndef install_extras(ctx: Context) -&gt; None:\n    \"\"\"Run poetry install with all extras.\"\"\"\n    poetry_config = file_helpers.read_pyproject()['tool']['poetry']\n    extras = (poetry_config.get('extras') or {}).keys()\n    run(ctx, ' '.join(['poetry install --sync', *[f'--extras={ex}' for ex in extras]]))\n</code></pre>"},{"location":"reference/calcipy/tasks/pack/#calcipy.tasks.pack.lock","title":"lock","text":"<pre><code>lock(ctx)\n</code></pre> <p>Ensure poetry.lock is  up-to-date.</p> Source code in <code>calcipy/tasks/pack.py</code> <pre><code>@task()\ndef lock(ctx: Context) -&gt; None:\n    \"\"\"Ensure poetry.lock is  up-to-date.\"\"\"\n    if can_skip.can_skip(prerequisites=[PROJECT_TOML], targets=[LOCK]):\n        return  # Exit early\n\n    run(ctx, 'poetry lock --no-update')\n</code></pre>"},{"location":"reference/calcipy/tasks/pack/#calcipy.tasks.pack.publish","title":"publish","text":"<pre><code>publish(ctx, *, to_test_pypi=False)\n</code></pre> <p>Build the distributed format(s) and publish.</p> Source code in <code>calcipy/tasks/pack.py</code> <pre><code>@task(\n    help={\n        'to_test_pypi': 'Publish to the TestPyPi repository',\n    },\n)\ndef publish(ctx: Context, *, to_test_pypi: bool = False) -&gt; None:\n    \"\"\"Build the distributed format(s) and publish.\"\"\"\n    run(ctx, f'{python_dir()}/nox --error-on-missing-interpreters --session build_dist build_check')\n\n    cmd = 'poetry publish'\n    if to_test_pypi:\n        cmd += ' --repository testpypi'\n    run(ctx, cmd)\n</code></pre>"},{"location":"reference/calcipy/tasks/stale/","title":"stale","text":"<p>Stale Packages CLI.</p>"},{"location":"reference/calcipy/tasks/stale/#calcipy.tasks.stale-functions","title":"Functions","text":""},{"location":"reference/calcipy/tasks/stale/#calcipy.tasks.stale.check_for_stale_packages","title":"check_for_stale_packages","text":"<pre><code>check_for_stale_packages(ctx, *, stale_months=48)\n</code></pre> <p>Identify stale dependencies.</p> Source code in <code>calcipy/tasks/stale.py</code> <pre><code>@task(\n    default=True,\n    help={\n        'stale_months': 'Cutoff in months for when a package may be stale enough to be a risk',\n    },\n)\ndef check_for_stale_packages(ctx: Context, *, stale_months: int = 48) -&gt; None:  # noqa: ARG001\n    \"\"\"Identify stale dependencies.\"\"\"\n    cfsp(stale_months=stale_months)\n</code></pre>"},{"location":"reference/calcipy/tasks/tags/","title":"tags","text":"<p>Code Tag Collector CLI.</p>"},{"location":"reference/calcipy/tasks/tags/#calcipy.tasks.tags-functions","title":"Functions","text":""},{"location":"reference/calcipy/tasks/tags/#calcipy.tasks.tags.collect_code_tags","title":"collect_code_tags","text":"<pre><code>collect_code_tags(ctx, base_dir='.', doc_sub_dir='', filename=None, tag_order='', regex='', ignore_patterns='')\n</code></pre> <p>Create a <code>CODE_TAG_SUMMARY.md</code> with a table for TODO- and FIXME-style code comments.</p> Source code in <code>calcipy/tasks/tags.py</code> <pre><code>@task(\n    default=True,\n    help={\n        'base_dir': 'Working Directory',\n        'doc_sub_dir': 'Subdirectory for output of the code tag summary file',\n        'filename': 'Code Tag Summary Filename',\n        'tag_order': 'Ordered list of code tags to locate (Comma-separated)',\n        'regex': 'Custom Code Tag Regex. Must contain \"{tag}\"',\n        'ignore_patterns': 'Glob patterns to ignore files and directories when searching (Comma-separated)',\n    },\n)\ndef collect_code_tags(  # noqa: PLR0913,PLR0917\n    ctx: Context,\n    base_dir: str = '.',\n    doc_sub_dir: str = '',\n    filename: Optional[str] = None,\n    tag_order: str = '',\n    regex: str = '',\n    ignore_patterns: str = '',\n) -&gt; None:\n    \"\"\"Create a `CODE_TAG_SUMMARY.md` with a table for TODO- and FIXME-style code comments.\"\"\"\n    pth_base_dir = Path(base_dir).resolve()\n    pth_docs = pth_base_dir / doc_sub_dir if doc_sub_dir else get_doc_subdir()\n    if filename and '/' in filename:\n        raise RuntimeError('Unexpected slash in filename. You should consider setting `--doc-sub-dir` instead')\n    path_tag_summary = pth_docs / (filename or from_ctx(ctx, 'tags', 'filename'))\n    patterns = (ignore_patterns or from_ctx(ctx, 'tags', 'ignore_patterns')).split(',')\n    paths_source = find_project_files(pth_base_dir, ignore_patterns=[pattern for pattern in patterns if pattern])\n\n    write_code_tag_file(\n        path_tag_summary=path_tag_summary,\n        paths_source=paths_source,\n        base_dir=pth_base_dir,\n        regex=regex,\n        tags=tag_order,\n        header='# Collected Code Tags',\n    )\n</code></pre>"},{"location":"reference/calcipy/tasks/test/","title":"test","text":"<p>Test CLI.</p>"},{"location":"reference/calcipy/tasks/test/#calcipy.tasks.test-functions","title":"Functions","text":""},{"location":"reference/calcipy/tasks/test/#calcipy.tasks.test.check","title":"check","text":"<pre><code>check(_ctx)\n</code></pre> <p>Run pytest checks, such as identifying .</p> Source code in <code>calcipy/tasks/test.py</code> <pre><code>@task()\ndef check(_ctx: Context) -&gt; None:\n    \"\"\"Run pytest checks, such as identifying .\"\"\"\n    if duplciates := check_duplicate_test_names.run(Path('tests')):\n        raise RuntimeError(f'Duplicate test names found ({duplciates}). See above for details.')  # noqa: EM102\n</code></pre>"},{"location":"reference/calcipy/tasks/test/#calcipy.tasks.test.coverage","title":"coverage","text":"<pre><code>coverage(ctx, *, min_cover=0, out_dir=None, view=False)\n</code></pre> <p>Generate useful coverage outputs after running pytest.</p> <p>Creates <code>coverage.json</code> used in <code>doc.build</code></p> Source code in <code>calcipy/tasks/test.py</code> <pre><code>@task(\n    help={\n        'min_cover': 'Fail if coverage less than threshold',\n        'out_dir': 'Optional path to coverage directory. Typically \".cover\" or \"releases/tests\"',\n        'view': 'If True, open the created files',\n    },\n)\ndef coverage(ctx: Context, *, min_cover: int = 0, out_dir: Optional[str] = None, view: bool = False) -&gt; None:\n    \"\"\"Generate useful coverage outputs after running pytest.\n\n    Creates `coverage.json` used in `doc.build`\n\n    \"\"\"\n    pkg_name = read_package_name()\n    _inner_task(ctx, cli_args='', min_cover=min_cover,\n                command=f'coverage run --branch --source={pkg_name} --module pytest')\n\n    cov_dir = Path(out_dir or from_ctx(ctx, 'test', 'out_dir'))\n    cov_dir.mkdir(exist_ok=True, parents=True)\n    print()  # noqa: T201\n    for cli_args in (\n        'report --show-missing',  # Write to STDOUT\n        f'html --directory={cov_dir}',  # Write to HTML\n        'json',  # Create coverage.json file for \"_handle_coverage\"\n    ):\n        run(ctx, f'{python_dir()}/coverage {cli_args}')\n\n    if view:  # pragma: no cover\n        open_in_browser(cov_dir / 'index.html')\n</code></pre>"},{"location":"reference/calcipy/tasks/test/#calcipy.tasks.test.pytest","title":"pytest","text":"<pre><code>pytest(ctx, *, keyword='', marker='', min_cover=0)\n</code></pre> <p>Run pytest with default arguments.</p> <p>Additional arguments can be set in the environment variable \u2018PYTEST_ADDOPTS\u2019</p> Source code in <code>calcipy/tasks/test.py</code> <pre><code>@task(\n    default=True,\n    help={\n        'min_cover': 'Fail if coverage less than threshold',\n        **KM_HELP,\n    },\n)\ndef pytest(ctx: Context, *, keyword: str = '', marker: str = '', min_cover: int = 0) -&gt; None:\n    \"\"\"Run pytest with default arguments.\n\n    Additional arguments can be set in the environment variable 'PYTEST_ADDOPTS'\n\n    \"\"\"\n    pkg_name = read_package_name()\n    durations = '--durations=25 --durations-min=\"0.1\"'\n    _inner_task(ctx,\n                cli_args=f' --cov={pkg_name} --cov-branch --cov-report=term-missing {durations}',\n                keyword=keyword, marker=marker, min_cover=min_cover)\n</code></pre>"},{"location":"reference/calcipy/tasks/test/#calcipy.tasks.test.step","title":"step","text":"<pre><code>step(ctx, *, keyword='', marker='')\n</code></pre> <p>Run pytest optimized to stop on first error.</p> Source code in <code>calcipy/tasks/test.py</code> <pre><code>@task(help=KM_HELP)\ndef step(ctx: Context, *, keyword: str = '', marker: str = '') -&gt; None:\n    \"\"\"Run pytest optimized to stop on first error.\"\"\"\n    _inner_task(ctx, cli_args=_STEPWISE_ARGS, keyword=keyword, marker=marker)\n</code></pre>"},{"location":"reference/calcipy/tasks/test/#calcipy.tasks.test.watch","title":"watch","text":"<pre><code>watch(ctx, *, keyword='', marker='')\n</code></pre> <p>Run pytest with polling and optimized to stop on first error.</p> Source code in <code>calcipy/tasks/test.py</code> <pre><code>@task(help=KM_HELP)\ndef watch(ctx: Context, *, keyword: str = '', marker: str = '') -&gt; None:\n    \"\"\"Run pytest with polling and optimized to stop on first error.\"\"\"\n    _inner_task(ctx, cli_args=_STEPWISE_ARGS, keyword=keyword, marker=marker, command='ptw . --now')\n</code></pre>"},{"location":"reference/calcipy/tasks/types/","title":"types","text":"<p>Types CLI.</p>"},{"location":"reference/calcipy/tasks/types/#calcipy.tasks.types-functions","title":"Functions","text":""},{"location":"reference/calcipy/tasks/types/#calcipy.tasks.types.basedpyright","title":"basedpyright","text":"<pre><code>basedpyright(ctx)\n</code></pre> <p>Run basedpyright.</p> Source code in <code>calcipy/tasks/types.py</code> <pre><code>@task()\ndef basedpyright(ctx: Context) -&gt; None:\n    \"\"\"Run basedpyright.\"\"\"\n    _inner_task(ctx, command=f'{python_dir()}/basedpyright')\n</code></pre>"},{"location":"reference/calcipy/tasks/types/#calcipy.tasks.types.mypy","title":"mypy","text":"<pre><code>mypy(ctx)\n</code></pre> <p>Run mypy.</p> Source code in <code>calcipy/tasks/types.py</code> <pre><code>@task()\ndef mypy(ctx: Context) -&gt; None:\n    \"\"\"Run mypy.\"\"\"\n    _inner_task(ctx, command=f'{python_dir()}/mypy')\n</code></pre>"},{"location":"reference/calcipy/tasks/types/#calcipy.tasks.types.pyright","title":"pyright","text":"<pre><code>pyright(ctx)\n</code></pre> <p>Run pyright.</p> Source code in <code>calcipy/tasks/types.py</code> <pre><code>@task()\ndef pyright(ctx: Context) -&gt; None:\n    \"\"\"Run pyright.\"\"\"\n    check_installed(ctx, executable='pyright', message=PYRIGHT_MESSAGE)\n    _inner_task(ctx, command='pyright')\n</code></pre>"}]}