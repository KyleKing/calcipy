{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"calcipy","text":"<p><code>calcipy</code> is a Python package that implements best practices such as code style (linting, auto-fixes), documentation, CI/CD, and logging. Like the calcium carbonate in hard coral, packages can be built on the <code>calcipy</code> foundation.</p> <p><code>calcipy</code> has some configurability, but is tailored for my particular use cases. If you want the same sort of functionality, there are a number of alternatives to consider:</p> <ul> <li>pyscaffold is a much more mature project that aims for the same goals, but with a slightly different approach and tech stack (tox vs. nox, cookiecutter vs. copier, etc.)</li> <li>tidypy, pylama, and codecheck offer similar functionality of bundling and running static checkers, but makes far fewer assumptions</li> <li>pytoil is a general CLI tool for developer automation</li> <li>And many more such as pyta, prospector, wemake-python-styleguide / cjolowicz/cookiecutter-hypermodern-python, formate, johnthagen/python-blueprint, oxsecurity/megalinter, etc.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Calcipy needs a few static files managed using copier and a template project: kyleking/calcipy_template</p> <p>You can quickly use the template to create a new project or add calcipy to an existing one:</p> <pre><code># Install copier. pipx is recommended\npipx install copier\n\n# To create a new project\ncopier copy gh:KyleKing/calcipy_template new_project\ncd new_project\n\n# Or convert/update an existing one\ncd my_project\ncopier copy gh:KyleKing/calcipy_template .\ncopier update\n</code></pre> <p>See ./Advanced_Configuration.md for documentation on the configurable aspects of <code>calcipy</code></p>"},{"location":"#calcipy-cli","title":"Calcipy CLI","text":"<p>Additionally, <code>calcipy</code> can be run as a CLI application without adding the package as a dependency.</p> <p>Quick Start:</p> <pre><code>pipx install calcipy\n\n# Use 'tags' to create a CODE_TAG_SUMMARY of the specified directory\ncalcipy tags --help\ncalcipy tags --base-dir=~/path/to/my_project\n\n# See additional documentation from the CLI help\n&gt; calcipy\n\nSubcommands:\n\nmain                                     Main task pipeline.\nother                                    Run tasks that are otherwise not exercised in main.\nrelease                                  Release pipeline.\ncl.bump                                  Bumps project version based on commits &amp; settings in pyproject.toml.\ncl.write                                 Write a Changelog file with the raw Git history.\ndoc.build                                Build documentation with mkdocs.\ndoc.deploy                               Deploy docs to the Github `gh-pages` branch.\ndoc.watch                                Serve local documentation for local editing.\nlint.autopep8                            Run autopep8.\nlint.check (lint)                        Run ruff as check-only.\nlint.fix                                 Run ruff and apply fixes.\nlint.flake8                              Run ruff and apply fixes.\nlint.pre-commit                          Run pre-commit.\nlint.pylint                              Run ruff and apply fixes.\nlint.security                            Attempt to identify possible security vulnerabilities.\nlint.watch                               Run ruff as check-only.\nnox.noxfile (nox)                        Run nox from the local noxfile.\npack.check-licenses                      Check licenses for compatibility with `licensecheck`.\npack.lock                                Ensure poetry.lock is  up-to-date.\npack.publish                             Build the distributed format(s) and publish.\nstale.check-for-stale-packages (stale)   Identify stale dependencies.\ntags.collect-code-tags (tags)            Create a `CODE_TAG_SUMMARY.md` with a table for TODO- and FIXME-style code comments.\ntest.coverage                            Generate useful coverage outputs after running pytest.\ntest.pytest (test)                       Run pytest with default arguments.\ntest.step                                Run pytest optimized to stop on first error.\ntest.watch                               Run pytest with polling and optimized to stop on first error.\ntypes.mypy                               Run mypy.\ntypes.pyright                            Run pyright.\n\nGlobal Task Options:\n\nworking_dir   Set the cwd for the program. Example: \"../run --working-dir .. lint test\"\n*file_args    List of Paths available globally to all tasks. Will resolve paths with working_dir\nverbose       Globally configure logger verbosity (-vvv for most verbose)\n</code></pre>"},{"location":"#calcipy-pre-commit","title":"Calcipy Pre-Commit","text":"<p><code>calcipy</code> can also be used as a <code>pre-commit</code> task by adding the below snippet to your <code>pre-commit</code> file:</p> <pre><code>repos:\n- repo: https://github.com/KyleKing/calcipy\nrev: main\nhooks:\n- id: tags\n- id: lint-fix\n- id: types\n</code></pre>"},{"location":"#project-status","title":"Project Status","text":"<p>See the <code>Open Issues</code> and/or the CODE_TAG_SUMMARY. For release history, see the CHANGELOG.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome pull requests! For your pull request to be accepted smoothly, we suggest that you first open a GitHub issue to discuss your idea. For resources on getting started with the code base, see the below documentation:</p> <ul> <li>DEVELOPER_GUIDE</li> <li>STYLE_GUIDE</li> </ul>"},{"location":"#code-of-conduct","title":"Code of Conduct","text":"<p>We follow the Contributor Covenant Code of Conduct.</p>"},{"location":"#open-source-status","title":"Open Source Status","text":"<p>We try to reasonably meet most aspects of the \u201cOpenSSF scorecard\u201d from Open Source Insights</p>"},{"location":"#responsible-disclosure","title":"Responsible Disclosure","text":"<p>If you have any security issue to report, please contact the project maintainers privately. You can reach us at dev.act.kyle@gmail.com.</p>"},{"location":"#license","title":"License","text":"<p>LICENSE</p>"},{"location":"docs/Advanced_Documentation/","title":"Docs","text":"<p>Developer documentation</p>"},{"location":"docs/CHANGELOG/","title":"CHANGELOG","text":""},{"location":"docs/CHANGELOG/#unreleased","title":"Unreleased","text":""},{"location":"docs/CODE_TAG_SUMMARY/","title":"Collected Code Tags","text":"Type Comment Last Edit Source File TODO https://github.com/pappasam/toml-sort/issues/42 2023-02-19 .pre-commit-config.yaml:73 TODO Consider adding a configuration item for ignore_patterns 2023-02-19 calcipy/file_search.py:82 TODO Look into running tasks from within other tasks to support \u2018\u2013continue\u2019 and more readable logs \u2013&gt; 2023-02-19 docs/docs/MIGRATION.md:112 TODO Capture logging output and check\u2026 2023-02-19 tests/check_for_stale_packages/test_check_for_stale_packages.py:63 TODO Capture logging output and check\u2026 2023-02-19 tests/check_for_stale_packages/test_check_for_stale_packages.py:87 TODO Is there an easier way to maintain pytest parameter IDs? 2023-02-17 tests/tasks/test_test.py:13 PLANNED Convert to hypothesis test! 2023-02-19 tests/test_dot_dict.py:9 <p>Found code tags for TODO (6), PLANNED (1)</p>"},{"location":"docs/DEVELOPER_GUIDE/","title":"Developer Notes","text":""},{"location":"docs/DEVELOPER_GUIDE/#local-development","title":"Local Development","text":"<pre><code>git clone https://github.com/kyleking/calcipy.git\ncd calcipy\npoetry install --sync -E ddict -E doc -E flake8 -E lint -E nox -E pylint -E stale -E tags -E test -E types\n\n# See the available tasks\npoetry run calcipy\n# Or use a local 'run' file (so that 'calcipy' can be extended)\n./run\n\n# Run the default task list (lint, auto-format, test coverage, etc.)\n./run main\n\n# Make code changes and run specific tasks as needed:\n./run lint.fix test\n</code></pre>"},{"location":"docs/DEVELOPER_GUIDE/#publishing","title":"Publishing","text":"<p>For testing, create an account on TestPyPi. Replace <code>...</code> with the API token generated on TestPyPi or PyPi respectively</p> <pre><code>poetry config repositories.testpypi https://test.pypi.org/legacy/\npoetry config pypi-token.testpypi ...\n\n./run main pack.publish --to-test-pypi\n# If you didn't configure a token, you will need to provide your username and password to publish\n</code></pre> <p>To publish to the real PyPi</p> <pre><code>poetry config pypi-token.pypi ...\n./run release\n\n# Or for a pre-release\n./run release --suffix=rc\n</code></pre>"},{"location":"docs/DEVELOPER_GUIDE/#current-status","title":"Current Status","text":"File Statements Missing Excluded Coverage <code>calcipy/__init__.py</code> 2 0 0 100.0% <code>calcipy/can_skip.py</code> 18 1 0 94.4% <code>calcipy/check_for_stale_packages/__init__.py</code> 4 2 0 50.0% <code>calcipy/check_for_stale_packages/_check_for_stale_packages.py</code> 109 9 3 91.7% <code>calcipy/cli.py</code> 89 26 0 70.8% <code>calcipy/code_tag_collector/__init__.py</code> 4 2 0 50.0% <code>calcipy/code_tag_collector/_collector.py</code> 127 19 0 85.0% <code>calcipy/dot_dict/__init__.py</code> 4 2 0 50.0% <code>calcipy/dot_dict/_dot_dict.py</code> 8 0 0 100.0% <code>calcipy/file_search.py</code> 38 0 2 100.0% <code>calcipy/invoke_helpers.py</code> 31 3 0 90.3% <code>calcipy/md_writer/__init__.py</code> 4 2 0 50.0% <code>calcipy/md_writer/_writer.py</code> 95 7 0 92.6% <code>calcipy/noxfile/__init__.py</code> 4 2 0 50.0% <code>calcipy/noxfile/_noxfile.py</code> 52 2 31 96.2% <code>calcipy/scripts.py</code> 10 10 23 0.0% <code>calcipy/tasks/__init__.py</code> 0 0 0 100.0% <code>calcipy/tasks/all_tasks.py</code> 43 2 0 95.3% <code>calcipy/tasks/cl.py</code> 26 6 0 76.9% <code>calcipy/tasks/defaults.py</code> 19 0 0 100.0% <code>calcipy/tasks/doc.py</code> 42 17 5 59.5% <code>calcipy/tasks/lint.py</code> 54 1 0 98.1% <code>calcipy/tasks/nox.py</code> 8 0 0 100.0% <code>calcipy/tasks/pack.py</code> 26 4 0 84.6% <code>calcipy/tasks/stale.py</code> 8 2 0 75.0% <code>calcipy/tasks/tags.py</code> 15 0 0 100.0% <code>calcipy/tasks/test.py</code> 37 1 2 97.3% <code>calcipy/tasks/types.py</code> 15 0 0 100.0% Totals 892 120 66 86.5% <p>Generated on: 2023-03-01</p>"},{"location":"docs/MIGRATION/","title":"Migration Guide","text":""},{"location":"docs/MIGRATION/#calcipy-100","title":"<code>calcipy 1.0.0</code>","text":""},{"location":"docs/MIGRATION/#background","title":"Background","text":"<p>calcipy <code>v1</code> was a complete rewrite to switch from <code>doit</code> to <code>invoke</code>:</p> <ul> <li>with <code>invoke</code>, tasks can be run from anywhere without a <code>dodo.py</code> file</li> <li>tasks can be loaded lazily, which means that some performance gains are possible</li> <li>since there is no shared state file, tasks can be more easily run from pre-commit or generally in parallel</li> </ul> <p><code>doit</code> excelled at clearly delineated task output and run summary, but <code>invoke</code> isn\u2019t designed that way. I would like to improve the CLI output, but the benefits are worth this tradeoff.</p> <p>calcipy <code>v0</code> was built on doit and thus required a <code>dodo.py</code> file. I began adding <code>cement</code> to support a separate CLI for <code>calcipy</code> installed with <code>pipx</code>, but that required a lot of boilerplate code. With <code>doit</code>, the string command needed to be complete at task evaluation rather than runtime, so globbing files couldn\u2019t be resolved lazily.</p>"},{"location":"docs/MIGRATION/#migration","title":"Migration","text":"<p>While refactoring, the global configuration was mostly removed (<code>DoitGlobals</code>) along with a few tasks, but the main functionality is still present. Any project dependent on <code>calcipy</code> will need substantial changes. The easiest way to start migrating is to run <code>copier copy gh:KyleKing/calcipy_template .</code> for calcipy_template</p>"},{"location":"docs/MIGRATION/#speed-test","title":"Speed Test","text":"<p>It turns out that switching to <code>invoke</code> appears to have only saved 100ms</p> <pre><code>&gt; hyperfine -m 20 --warmup 5 \"poetry run python -c 'print(1)'\"\nBenchmark 1: poetry run python -c 'print(1)'\nTime (mean \u00b1 \u03c3):     377.9 ms \u00b1   3.1 ms    [User: 235.0 ms, System: 61.8 ms]\nRange (min \u2026 max):   372.7 ms \u2026 384.0 ms    20 runs\n&gt; hyperfine -m 20 --warmup 5 ./run\nBenchmark 1: ./run\nTime (mean \u00b1 \u03c3):     936.0 ms \u00b1  26.9 ms    [User: 1548.2 ms, System: 1687.7 ms]\nRange (min \u2026 max):   896.4 ms \u2026 1009.4 ms    20 runs\n&gt; hyperfine -m 20 --warmup 5 \"poetry run calcipy_tags\"\nBenchmark 1: poetry run calcipy_tags\nTime (mean \u00b1 \u03c3):     618.5 ms \u00b1  29.7 ms    [User: 1536.8 ms, System: 1066.2 ms]\nRange (min \u2026 max):   578.2 ms \u2026 694.9 ms    20 runs\n&gt; hyperfine -m 20 --warmup 5 \"poetry run doit list\"\nBenchmark 1: poetry run doit list\nTime (mean \u00b1 \u03c3):      1.002 s \u00b1  0.015 s    [User: 1.643 s, System: 1.682 s]\nRange (min \u2026 max):    0.974 s \u2026  1.023 s    20 runs\n</code></pre> <p>Additionally, the major decrease in dependencies will make install and update actions much faster. With the recommended extras installed, <code>calcipy-v1</code> has 124 dependencies (with all extras, 164) vs. <code>calcipy-v0</code>\u2018s 259. Counted with: <code>cat .calcipy_packaging.lock | jq 'keys' | wc -l</code></p>"},{"location":"docs/MIGRATION/#code-comparison","title":"Code Comparison","text":"<p>Accounting for code extracted to <code>corallium</code>, the overall number of lines decreased from 1772 to 1550 or only 12%, while increasing the CLI and <code>pre-commit</code> capabilities.</p> <pre><code>~/calcipy-v0 &gt; cloc calcipy\n-------------------------------------------------------------------------------\nLanguage                     files          blank        comment           code\n-------------------------------------------------------------------------------\nPython                          26            942           1075           1772\n-------------------------------------------------------------------------------\nSUM:                            26            942           1075           1772\n-------------------------------------------------------------------------------\n~/calcipy &gt; cloc calcipy\n-------------------------------------------------------------------------------\nLanguage                     files          blank        comment           code\n-------------------------------------------------------------------------------\nPython                          27            454            438           1185\n-------------------------------------------------------------------------------\nSUM:                            27            454            438           1185\n-------------------------------------------------------------------------------\n~/corallium &gt; cloc corallium\n-------------------------------------------------------------------------------\nLanguage                     files          blank        comment           code\n-------------------------------------------------------------------------------\nPython                           7            176            149            365\n-------------------------------------------------------------------------------\nSUM:                             7            176            149            365\n-------------------------------------------------------------------------------\n\n~/calcipy &gt; cloc tests\n-------------------------------------------------------------------------------\nLanguage                     files          blank        comment           code\n-------------------------------------------------------------------------------\nYAML                             2              0              0            580\nPython                          19            176             68            578\nJSON                             2              0              0             60\nMarkdown                         3              9             10              8\nText                             1              0              0              2\n-------------------------------------------------------------------------------\nSUM:                            27            185             78           1228\n-------------------------------------------------------------------------------\n~/calcipy-v0 &gt; cloc tests\n-------------------------------------------------------------------------------\nLanguage                     files          blank        comment           code\n-------------------------------------------------------------------------------\nJSON                            30              0              0            762\nYAML                             2              0              0            580\nPython                          24            314            186            578\nMarkdown                         3              9             10              8\n-------------------------------------------------------------------------------\nSUM:                            59            323            196           1928\n-------------------------------------------------------------------------------\n~/corallium &gt; cloc tests\n-------------------------------------------------------------------------------\nLanguage                     files          blank        comment           code\n-------------------------------------------------------------------------------\nPython                           6             36             15             69\nMarkdown                         1              1              0              2\n-------------------------------------------------------------------------------\nSUM:                             7             37             15             71\n-------------------------------------------------------------------------------\n</code></pre>"},{"location":"docs/MIGRATION/#doit-output","title":"doit output","text":"<p>I would like to restore the <code>doit</code> task summary, but <code>invoke</code>\u2018s architecture doesn\u2019t really make this possible. The <code>--continue</code> option was extremely useful, but that also might not be achievable.</p> <pre><code>&gt; poetry run doit run\n.  format_recipes &gt; [\nPython: function format_recipes\n]\n2023-02-19 10:40:23.954 | INFO     | recipes.formatter:_write_toc:287 - Creating TOC for: ./recipes/docs/breakfast\n2023-02-19 10:40:23.957 | INFO     | recipes.formatter:_write_toc:287 - Creating TOC for: ./recipes/docs/rice\n2023-02-19 10:40:23.959 | INFO     | recipes.formatter:_write_toc:287 - Creating TOC for: ./recipes/docs/meals\n2023-02-19 10:40:23.964 | INFO     | recipes.formatter:_write_toc:287 - Creating TOC for: ./recipes/docs/seafood\n2023-02-19 10:40:23.967 | INFO     | recipes.formatter:_write_toc:287 - Creating TOC for: ./recipes/docs/pizza\n2023-02-19 10:40:23.969 | INFO     | recipes.formatter:_write_toc:287 - Creating TOC for: ./recipes/docs/poultry\n2023-02-19 10:40:23.972 | INFO     | recipes.formatter:_write_toc:287 - Creating TOC for: ./recipes/docs/sushi\n.  collect_code_tags &gt; [\nPython: function write_code_tag_file\n]\n.  cl_write &gt; [\nCmd: poetry run cz changelog\n        Python: function _move_cl\n]\n.  lock &gt; [\nCmd: poetry lock --no-update\n]\nResolving dependencies...\n.  nox_coverage &gt; [\nCmd: poetry run nox --error-on-missing-interpreters --session coverage\n]\n...\n\ndoit&gt; Summary:\ndoit&gt; format_recipes was successful\ndoit&gt; collect_code_tags was successful\ndoit&gt; cl_write was successful\ndoit&gt; lock was successful\ndoit&gt; nox_coverage was successful\ndoit&gt; auto_format was successful\ndoit&gt; document was successful\ndoit&gt; check_for_stale_packages was successful\ndoit&gt; pre_commit_hooks failed (red)\ndoit&gt; lint_project was not run\ndoit&gt; static_checks was not run\ndoit&gt; security_checks was not run\ndoit&gt; check_types was not run\n</code></pre>"},{"location":"docs/STYLE_GUIDE/","title":"Personal Style Guides","text":""},{"location":"docs/STYLE_GUIDE/#git","title":"Git","text":"<p>We use Commitizen to manage both an auto-generated Changelog and incrementing the release version following semver. For both of these automated outputs to work well, please follow the Conventional Commits style, which is described in more detail below.</p>"},{"location":"docs/STYLE_GUIDE/#commitizen-types-and-scopes","title":"Commitizen Types and Scopes","text":"<p><code>type(scope): description</code></p> <ul> <li>Types<ul> <li>fix: A bug fix</li> <li>feat: A new feature</li> <li>docs: Documentation-only changes (code comments, separate docs)</li> <li>style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons)</li> <li>perf: A code change that improves performance</li> <li>refactor: A change to production code that is not a fix, feat, or perf</li> <li>test: Adding missing or correcting existing tests</li> <li>build: Changes that affect the build system or external dependencies</li> <li>ci: Changes to our CI configuration files and scripts</li> <li>A <code>!</code> can be used to indicate a breaking change (<code>refactor!: drop support for Node 6</code>)</li> <li>SemVer Rules<ul> <li>Based on commit type, the version will be auto-incremented: <code>fix : PATCH // feat : MINOR // BREAKING CHANGE : MAJOR</code></li> </ul> </li> </ul> </li> <li>Scopes<ul> <li>A Class, File name, Issue Number, other appropriate noun. As examples: <code>build(poetry): bump requests to v3</code> or <code>style(#32): add missing type annotations</code></li> </ul> </li> <li>Tips<ul> <li>What if a commit fits multiple types?<ul> <li>Go back and make multiple commits whenever possible. Part of the benefit of Conventional Commits is the focus on more organized and intentional changes</li> </ul> </li> <li>Use <code>git rebase -i</code> to fix commit names prior to merging if incorrect types/scopes are used</li> </ul> </li> </ul>"},{"location":"docs/STYLE_GUIDE/#git-description-guidelines","title":"Git Description Guidelines","text":"<ul> <li>Commit message guidelines<ul> <li>Full sentence with verb (lowercase) and concise description. Below are modified examples for Conventional Commits<ul> <li><code>fix(roles): bug in admin role permissions</code></li> <li><code>feat(ui): implement new button design</code></li> <li><code>build(pip): upgrade package to remove vulnerabilities</code></li> <li><code>refactor: file structure to improve code readability</code></li> <li><code>perf(cli): rewrite methods</code></li> <li><code>feat(api): endpoints to implement new customer dashboard</code></li> </ul> </li> </ul> </li> <li>How to write a good commit message<ul> <li>A diff will tell you what changed, but only the commit message can properly tell you why.</li> <li>Keep in mind: This has all been said before.</li> <li>From the seven rules of a great Git commit message:<ul> <li> <ol> <li>Try for 50 characters, but consider 72 the hard limit</li> </ol> </li> <li> <ol> <li>Use the body to explain what and why vs. how</li> </ol> </li> </ul> </li> </ul> </li> </ul>"},{"location":"docs/STYLE_GUIDE/#issue-labels-and-milestones","title":"Issue Labels and Milestones","text":"<p>Personal Guide</p> <ul> <li>For Issue Labels, see labels.yml</li> <li>Milestones<ul> <li>Current Tasks: main milestone (name could change based on a specific project, sprint, or month)</li> <li>Next Tasks</li> <li>Blue Sky</li> </ul> </li> </ul> Research <ul> <li>[Sane Github Labels](https://medium.com/@dave_lunny/sane-github-labels-c5d2e6004b63) and see [sensible-github-labels](https://github.com/Relequestual/sensible-github-labels) for full descriptions of each</li> <ul> <li>\u201cit is much more helpful to see the status and type of all issues at a glance.\u201d</li> <li>One of each:</li> <ul> <li>Status: \u2026</li> <ul><li>Abandoned, Accepted, Available, Blocked, Completed, In Progress, On Hold, Pending, Review Needed, Revision Needed</li></ul> <li>Type: \u2026</li> <ul><li>Bug, Maintenance, Question, Enhancement</li></ul> <li>Priority: \u2026</li> <ul><li>Critical, High, Medium, Low</li></ul> </ul> </ul> <li>[Britecharts](https://britecharts.github.io/britecharts/github-labels.html)</li> <ul> <li>Status: \u2026</li> <ul> <li>On Review \u2013 Request that we are pondering if including or not</li> <li>Needs Reproducing \u2013 For bugs that need to be reproduced in order to get fixed</li> <li>Needs Design \u2013 Feature that needs a design</li> <li>Ready to Go \u2013 Issue that has been defined and is ready to get started with</li> <li>In Progress \u2013 Issue that is being worked on right now.</li> <li>Completed \u2013 Finished feature or fix</li> </ul> <li>Type: \u2026</li> <ul> <li>Bug \u2013 An unexpected problem or unintended behavior</li> <li>Feature \u2013 A new feature request</li> <li>Maintenance \u2013 A regular maintenance chore or task, including refactors, build system, CI, performance improvements</li> <li>Documentation \u2013 A documentation improvement task</li> <li>Question \u2013 An issue or PR that needs more information or a user question</li> </ul> <li>Not Included</li> <ul> <li>Priority: They would add complexity and overhead due to the discussions, but could help with the roadmap</li> <li>Technology Labels: It can create too much overhead, as properly tag with technologies all the issues could be time consuming</li> </ul> </ul> </ul> <li>[Ian Bicking Blog](https://www.ianbicking.org/blog/2014/03/use-github-issues-to-organize-a-project.html)</li> <ul> <li>Milestone Overview</li> <ul> <li>What are we doing right now?</li> <li>What aren\u2019t we doing right now?</li> <ul> <li>2a. Stuff we\u2019ll probably do soon</li> <li>2b. Stuff we probably won\u2019t do soon</li> </ul> <li>What aren\u2019t we sure about?</li> </ul> <li>Milestone Descriptions</li> <ul> <li>Stuff we are doing right now: this is the \u201cmain\u201d milestone. We give it a name (like Alpha 2 or Strawberry Rhubarb Pie) and we write down what we are trying to accomplish with the milestone. We create a new milestone when we are ready for the next iteration.</li> <li>Stuff we\u2019ll probably do soon: this is a standing \u201c**Next Tasks**\u201d milestone. We never change or rename this milestone.</li> <ul><li>We use a permanent \u201cNext Tasks\u201d milestone (as opposed to renaming it to \u201cAlpha 3\u201d or actual-next-iteration milestone) because we don\u2019t want to presume or default to including something in the real next iteration. When we\u2019re ready to start planning the next iteration we\u2019ll create a new milestone, and only deliberately move things into that milestone.</li></ul> <li>Stuff we probably won\u2019t do soon: this is a standing \u201c**Blue Sky**\u201d milestone. We refer to these tickets and sometimes look through them, but they are easy to ignore, somewhat intentionally ignored.</li> <li>What aren\u2019t we sure about?: issues with no milestone.</li> </ul> <li>Label: \u201cNeeds Discussion\u201d - (addressed in a triage meeting) - use liberally for either big or small tickets</li> <li>\u201cIt\u2019s better to give people more power: it\u2019s actually helpful if people can overreach because it is an opportunity to establish where the limits really are and what purpose those limits have\u201d</li> </ul>"},{"location":"docs/STYLE_GUIDE/#external-links","title":"External Links","text":"<p>TODO: Revisit</p> <ul> <li>Git: The Simple Guide</li> <li>Commit Messages and why use the present tense</li> <li>Github\u2019s Advice on Github</li> <li>Most Comprehensive Guide</li> <li>Git Pro Book (free)<ul> <li>Bash Tab-Completion Snippet</li> </ul> </li> </ul>"},{"location":"docs/STYLE_GUIDE/#python","title":"Python","text":"<p>TODO: Revisit</p> <ul> <li>Python Style Guides<ul> <li>https://gist.github.com/sloria/7001839</li> <li>http://www.nilunder.com/blog/2013/08/03/pythonic-sensibilities/</li> <li>https://innoq.github.io/cards42org_en/</li> <li>https://docs.openstack.org/hacking/latest/user/hacking.html#styleguide</li> <li>https://www.python.org/doc/humor/</li> <li>https://docs.python-guide.org/writing/reading/</li> <li>https://realpython.com/python-refactoring/</li> </ul> </li> </ul>"},{"location":"docs/STYLE_GUIDE/#adrs","title":"ADRs","text":"<p>TODO: Revisit</p> <ul> <li>Examples<ul> <li>https://github.com/pawamoy/mkdocstrings/issues/28</li> </ul> </li> </ul> <p>&lt;\u2013 Links \u2013&gt;</p>"},{"location":"modules/calcipy/_code_diagrams/","title":"Code Diagrams","text":"<p>Auto-generated with <code>pylint-pyreverse</code></p>"},{"location":"modules/calcipy/_code_diagrams/#packages","title":"Packages","text":"<p>Full Size</p>"},{"location":"modules/calcipy/_code_diagrams/#classes","title":"Classes","text":"<p>Full Size</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>calcipy     * can_skip     * check_for_stale_packages         * _check_for_stale_packages     * cli     * code_tag_collector         * _collector     * dot_dict         * _dot_dict     * file_search     * invoke_helpers     * md_writer         * _writer     * noxfile         * _noxfile     * scripts     * tasks         * all_tasks         * cl         * defaults         * doc         * lint         * nox         * pack         * stale         * tags         * test         * types</li> </ul>"},{"location":"reference/calcipy/","title":"calcipy","text":"<p>calcipy.</p>"},{"location":"reference/calcipy/can_skip/","title":"can_skip","text":"<p>Support can-skip logic from Make.</p>"},{"location":"reference/calcipy/can_skip/#calcipy.can_skip-functions","title":"Functions","text":""},{"location":"reference/calcipy/can_skip/#calcipy.can_skip.can_skip","title":"can_skip","text":"<pre><code>can_skip(*, prerequisites, targets)\n</code></pre> <p>Generic make-style task skipping logic based on file <code>mtime</code>.</p> <p>Example use with Invoke, but can be used anywhere:</p> <pre><code>@task\ndef test(ctx: Context) -&gt; None:\nif can_skip(prerequisites=[*Path('src').rglob('*.py')], targets=[Path('.coverage.xml')]):\nreturn  # Exit early\n...  # Task code\n</code></pre> Source code in <code>calcipy/can_skip.py</code> <pre><code>@beartype\ndef can_skip(*, prerequisites: List[Path], targets: List[Path]) -&gt; bool:\n\"\"\"Generic make-style task skipping logic based on file `mtime`.\n    Example use with Invoke, but can be used anywhere:\n    ```py\n    @task\n    def test(ctx: Context) -&gt; None:\n        if can_skip(prerequisites=[*Path('src').rglob('*.py')], targets=[Path('.coverage.xml')]):\n            return  # Exit early\n        ...  # Task code\n    ```\n    \"\"\"\nts_prerequisites = [pth.stat().st_mtime for pth in prerequisites]\nif not ts_prerequisites:\nraise ValueError('Required files do not exist', prerequisites)\nts_targets = [pth.stat().st_mtime for pth in targets]\nif ts_targets and min(ts_targets) &gt; max(ts_prerequisites):\nlogger.warning('Skipping because targets are newer', targets=targets)\nreturn True\nreturn False\n</code></pre>"},{"location":"reference/calcipy/can_skip/#calcipy.can_skip.dont_skip","title":"dont_skip","text":"<pre><code>dont_skip(*, prerequisites, targets)\n</code></pre> <p>To use for testing with mock; always returns False.</p> Source code in <code>calcipy/can_skip.py</code> <pre><code>@beartype\ndef dont_skip(*, prerequisites: List[Path], targets: List[Path]) -&gt; bool:\n\"\"\"To use for testing with mock; always returns False.\"\"\"\nlogger.debug('Mocking can_skip', prerequisites=prerequisites, targets=targets)\nreturn False\n</code></pre>"},{"location":"reference/calcipy/cli/","title":"cli","text":"<p>Extend Invoke for Calcipy.</p>"},{"location":"reference/calcipy/cli/#calcipy.cli-classes","title":"Classes","text":""},{"location":"reference/calcipy/cli/#calcipy.cli.CalcipyConfig","title":"CalcipyConfig","text":"<p>         Bases: <code>Config</code></p> <p>Opinionated Config with better defaults.</p> Source code in <code>calcipy/cli.py</code> <pre><code>class CalcipyConfig(Config):  # type: ignore[misc]\n\"\"\"Opinionated Config with better defaults.\"\"\"\n@staticmethod\ndef global_defaults() -&gt; Dict:  # type: ignore[type-arg]\n\"\"\"Override the global defaults.\"\"\"\ninvoke_defaults = Config.global_defaults()\ncalcipy_defaults = {\n'run': {\n'echo': True,\n'echo_format': '\\033[2;3;37mRunning: {command}\\033[0m',\n'pty': use_pty(),\n},\n}\nreturn merge_dicts(invoke_defaults, calcipy_defaults)  # type: ignore[no-any-return]\n</code></pre>"},{"location":"reference/calcipy/cli/#calcipy.cli.CalcipyConfig-functions","title":"Functions","text":""},{"location":"reference/calcipy/cli/#calcipy.cli.CalcipyConfig.global_defaults","title":"global_defaults  <code>staticmethod</code>","text":"<pre><code>global_defaults()\n</code></pre> <p>Override the global defaults.</p> Source code in <code>calcipy/cli.py</code> <pre><code>@staticmethod\ndef global_defaults() -&gt; Dict:  # type: ignore[type-arg]\n\"\"\"Override the global defaults.\"\"\"\ninvoke_defaults = Config.global_defaults()\ncalcipy_defaults = {\n'run': {\n'echo': True,\n'echo_format': '\\033[2;3;37mRunning: {command}\\033[0m',\n'pty': use_pty(),\n},\n}\nreturn merge_dicts(invoke_defaults, calcipy_defaults)  # type: ignore[no-any-return]\n</code></pre>"},{"location":"reference/calcipy/cli/#calcipy.cli.GlobalTaskOptions","title":"GlobalTaskOptions","text":"<p>         Bases: <code>BaseModel</code></p> <p>Global Task Options.</p> Source code in <code>calcipy/cli.py</code> <pre><code>class GlobalTaskOptions(BaseModel):\n\"\"\"Global Task Options.\"\"\"\nworking_dir: Path = Field(default_factory=Path.cwd)\n\"\"\"Working directory for the program to use globally.\"\"\"\nfile_args: List[Path] = Field(default_factory=list)\n\"\"\"List of Paths to modify.\"\"\"\nverbose: PositiveInt = Field(default=0, lte=3)\n\"\"\"Verbosity level.\"\"\"\n</code></pre>"},{"location":"reference/calcipy/cli/#calcipy.cli.GlobalTaskOptions-attributes","title":"Attributes","text":""},{"location":"reference/calcipy/cli/#calcipy.cli.GlobalTaskOptions.file_args","title":"file_args  <code>class-attribute</code>","text":"<pre><code>file_args: List[Path] = Field(default_factory=list)\n</code></pre> <p>List of Paths to modify.</p>"},{"location":"reference/calcipy/cli/#calcipy.cli.GlobalTaskOptions.verbose","title":"verbose  <code>class-attribute</code>","text":"<pre><code>verbose: PositiveInt = Field(default=0, lte=3)\n</code></pre> <p>Verbosity level.</p>"},{"location":"reference/calcipy/cli/#calcipy.cli.GlobalTaskOptions.working_dir","title":"working_dir  <code>class-attribute</code>","text":"<pre><code>working_dir: Path = Field(default_factory=Path.cwd)\n</code></pre> <p>Working directory for the program to use globally.</p>"},{"location":"reference/calcipy/cli/#calcipy.cli-functions","title":"Functions","text":""},{"location":"reference/calcipy/cli/#calcipy.cli.start_program","title":"start_program","text":"<pre><code>start_program(pkg_name, pkg_version, module=None, collection=None)\n</code></pre> <p>Run the customized Invoke Program.</p> <p>FYI: recommendation is to extend the <code>core_args</code> method, but this won\u2019t parse positional arguments: https://docs.pyinvoke.org/en/stable/concepts/library.html#modifying-core-parser-arguments</p> Source code in <code>calcipy/cli.py</code> <pre><code>@beartype\ndef start_program(\npkg_name: str,\npkg_version: str,\nmodule: Optional[ModuleType] = None,\ncollection: Optional[Collection] = None,\n) -&gt; None:\n\"\"\"Run the customized Invoke Program.\n    FYI: recommendation is to extend the `core_args` method, but this won't parse positional arguments:\n    https://docs.pyinvoke.org/en/stable/concepts/library.html#modifying-core-parser-arguments\n    \"\"\"\n# Manipulate 'sys.argv' to hide arguments that invoke can't parse\n_gto = GlobalTaskOptions()\nsys_argv: List[str] = sys.argv[:1]\nlast_argv = ''\nfor argv in sys.argv[1:]:\nif not last_argv.startswith('-') and Path(argv).is_file():\n_gto.file_args.append(Path(argv))\nelif argv in {'-v', '-vv', '-vvv', '--verbose'}:\n_gto.verbose = argv.count('v')\nelif last_argv in {'--working-dir'}:\n_gto.working_dir = Path(argv).resolve()\nelif argv not in {'--working-dir'}:\nsys_argv.append(argv)\nlast_argv = argv\n_gto.file_args = [\n_f if _f.is_absolute() else Path.cwd() / _f\nfor _f in _gto.file_args\n]\nsys.argv = sys_argv\nclass _CalcipyConfig(CalcipyConfig):\ngto: GlobalTaskOptions = _gto\n_CalcipyProgram(\nname=pkg_name,\nversion=pkg_version,\nnamespace=Collection.from_module(module) if module else collection,\nconfig_class=_CalcipyConfig,\n).run()\n</code></pre>"},{"location":"reference/calcipy/cli/#calcipy.cli.task","title":"task","text":"<pre><code>task(*task_args, show_task_info=True, **task_kwargs)\n</code></pre> <p>Wrapper to accept arguments for an invoke task.</p> Source code in <code>calcipy/cli.py</code> <pre><code>@beartype\ndef task(*task_args: Any, show_task_info: bool = True, **task_kwargs: Any) -&gt; Callable[[Any], Task]:\n\"\"\"Wrapper to accept arguments for an invoke task.\"\"\"\n@beartype\ndef wrapper(func: Any) -&gt; Task:  # noqa: ANN001\n\"\"\"Wraps the decorated task.\"\"\"\n@invoke_task(*task_args, **task_kwargs)  # type: ignore[misc]\n@beartype\n@wraps(func)\ndef inner(ctx: Context, *args: Any, **kwargs: Any) -&gt; Task:\n\"\"\"Wrap the task with settings configured in `gto` for working_dir and logging.\"\"\"\ntry:\nctx.config.gto\nexcept AttributeError:\nctx.config.gto = GlobalTaskOptions()\nos.chdir(ctx.config.gto.working_dir)\n_configure_logger(ctx)\nreturn _run_task(func, ctx, *args, show_task_info=show_task_info, **kwargs)\nreturn inner\nreturn wrapper\n</code></pre>"},{"location":"reference/calcipy/file_search/","title":"file_search","text":"<p>Find Files.</p>"},{"location":"reference/calcipy/file_search/#calcipy.file_search-functions","title":"Functions","text":""},{"location":"reference/calcipy/file_search/#calcipy.file_search.find_project_files","title":"find_project_files","text":"<pre><code>find_project_files(path_project, ignore_patterns)\n</code></pre> <p>Find project files in git version control.</p> <p>Note: uses the relative project directory and verifies that each file exists</p> PARAMETER DESCRIPTION <code>path_project</code> <p>Path to the project directory</p> <p> TYPE: <code>Path</code> </p> <code>ignore_patterns</code> <p>glob ignore patterns</p> <p> TYPE: <code>List[str]</code> </p> RETURNS DESCRIPTION <code>List[Path]</code> <p>Dict[str, List[Path]]: where keys are the suffix (without leading dot) and values the list of paths</p> Source code in <code>calcipy/file_search.py</code> <pre><code>@beartype\ndef find_project_files(path_project: Path, ignore_patterns: List[str]) -&gt; List[Path]:\n\"\"\"Find project files in git version control.\n    &gt; Note: uses the relative project directory and verifies that each file exists\n    Args:\n        path_project: Path to the project directory\n        ignore_patterns: glob ignore patterns\n    Returns:\n        Dict[str, List[Path]]: where keys are the suffix (without leading dot) and values the list of paths\n    \"\"\"\nfile_paths = []\nrel_filepaths = _get_all_files(cwd=path_project)\nfiltered_rel_files = _filter_files(rel_filepaths=rel_filepaths, ignore_patterns=ignore_patterns)\nfor rel_file in filtered_rel_files:\npath_file = path_project / rel_file\nif path_file.is_file():\nfile_paths.append(path_file)\nelse:  # pragma: no cover\nlogger.warning('Could not find the specified file', path_file=path_file)\nreturn file_paths\n</code></pre>"},{"location":"reference/calcipy/file_search/#calcipy.file_search.find_project_files_by_suffix","title":"find_project_files_by_suffix","text":"<pre><code>find_project_files_by_suffix(path_project, *, ignore_patterns=None)\n</code></pre> <p>Find project files in git version control.</p> <p>Note: uses the relative project directory and verifies that each file exists</p> PARAMETER DESCRIPTION <code>path_project</code> <p>Path to the project directory</p> <p> TYPE: <code>Path</code> </p> <code>ignore_patterns</code> <p>glob ignore patterns</p> <p> TYPE: <code>Optional[List[str]]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Dict[str, List[Path]]</code> <p>Dict[str, List[Path]]: where keys are the suffix (without leading dot) and values the list of paths</p> Source code in <code>calcipy/file_search.py</code> <pre><code>@beartype\ndef find_project_files_by_suffix(\npath_project: Path, *, ignore_patterns: Optional[List[str]] = None,\n) -&gt; Dict[str, List[Path]]:\n\"\"\"Find project files in git version control.\n    &gt; Note: uses the relative project directory and verifies that each file exists\n    Args:\n        path_project: Path to the project directory\n        ignore_patterns: glob ignore patterns\n    Returns:\n        Dict[str, List[Path]]: where keys are the suffix (without leading dot) and values the list of paths\n    \"\"\"\nfile_lookup = defaultdict(list)\nfor path_file in find_project_files(path_project, ignore_patterns or []):\nfile_lookup[path_file.suffix.lstrip('.')].append(path_file)\nreturn dict(file_lookup)\n</code></pre>"},{"location":"reference/calcipy/invoke_helpers/","title":"invoke_helpers","text":"<p>Invoke Helpers.</p>"},{"location":"reference/calcipy/invoke_helpers/#calcipy.invoke_helpers-functions","title":"Functions","text":""},{"location":"reference/calcipy/invoke_helpers/#calcipy.invoke_helpers.get_doc_subdir","title":"get_doc_subdir","text":"<pre><code>get_doc_subdir(path_project=None)\n</code></pre> <p>Retrieve the documentation directory from the copier answer file.</p> PARAMETER DESCRIPTION <code>path_project</code> <p>Path to the project directory with contains <code>.copier-answers.yml</code></p> <p> TYPE: <code>Optional[Path]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Path</code> <p>to the source documentation directory</p> <p> TYPE: <code>Path</code> </p> Source code in <code>calcipy/invoke_helpers.py</code> <pre><code>@beartype\ndef get_doc_subdir(path_project: Optional[Path] = None) -&gt; Path:\n\"\"\"Retrieve the documentation directory from the copier answer file.\n    Args:\n        path_project: Path to the project directory with contains `.copier-answers.yml`\n    Returns:\n        Path: to the source documentation directory\n    \"\"\"\npath_copier = (path_project or get_project_path()) / COPIER_ANSWERS\ndoc_dir = read_yaml_file(path_copier).get('doc_dir', 'docs')\nreturn path_copier.parent / doc_dir / 'docs'  # type: ignore[no-any-return]\n</code></pre>"},{"location":"reference/calcipy/invoke_helpers/#calcipy.invoke_helpers.get_project_path","title":"get_project_path  <code>cached</code>","text":"<pre><code>get_project_path()\n</code></pre> <p>Retrieve the <code>cwd</code>.</p> Source code in <code>calcipy/invoke_helpers.py</code> <pre><code>@lru_cache(maxsize=1)\n@beartype\ndef get_project_path() -&gt; Path:\n\"\"\"Retrieve the `cwd`.\"\"\"\nreturn Path.cwd()\n</code></pre>"},{"location":"reference/calcipy/invoke_helpers/#calcipy.invoke_helpers.run","title":"run","text":"<pre><code>run(ctx, *run_args, **run_kwargs)\n</code></pre> <p>Wrap invoke.run to run within the <code>working_dir</code>.</p> Source code in <code>calcipy/invoke_helpers.py</code> <pre><code>@beartype\ndef run(ctx: Context, *run_args: Any, **run_kwargs: Any) -&gt; Result:\n\"\"\"Wrap invoke.run to run within the `working_dir`.\"\"\"\nworking_dir = '.'\nwith suppress(AttributeError):\nworking_dir = ctx.config.gto.working_dir\nwith ctx.cd(working_dir):\nreturn ctx.run(*run_args, **run_kwargs)\n</code></pre>"},{"location":"reference/calcipy/invoke_helpers/#calcipy.invoke_helpers.use_pty","title":"use_pty  <code>cached</code>","text":"<pre><code>use_pty()\n</code></pre> <p>Returns False on Windows and some CI environments.</p> Source code in <code>calcipy/invoke_helpers.py</code> <pre><code>@lru_cache(maxsize=1)\n@beartype\ndef use_pty() -&gt; bool:\n\"\"\"Returns False on Windows and some CI environments.\"\"\"\nif platform.system() == 'Windows':\nreturn False\nreturn not environ.get('GITHUB_ACTION')\n</code></pre>"},{"location":"reference/calcipy/scripts/","title":"scripts","text":"<p>Start the command line program.</p>"},{"location":"reference/calcipy/scripts/#calcipy.scripts-functions","title":"Functions","text":""},{"location":"reference/calcipy/scripts/#calcipy.scripts.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Run the customized Invoke Program.</p> Source code in <code>calcipy/scripts.py</code> <pre><code>@beartype\ndef start() -&gt; None:  # pragma: no cover\n\"\"\"Run the customized Invoke Program.\"\"\"\nfrom .tasks import all_tasks\nstart_program(__pkg_name__, __version__, all_tasks)\n</code></pre>"},{"location":"reference/calcipy/scripts/#calcipy.scripts.start_lint","title":"start_lint","text":"<pre><code>start_lint()\n</code></pre> <p>Run CLI with only the lint namespace.</p> Source code in <code>calcipy/scripts.py</code> <pre><code>@beartype\ndef start_lint() -&gt; None:  # pragma: no cover\n\"\"\"Run CLI with only the lint namespace.\"\"\"\nfrom .tasks import lint\n_start_subset([lint])\n</code></pre>"},{"location":"reference/calcipy/scripts/#calcipy.scripts.start_tags","title":"start_tags","text":"<pre><code>start_tags()\n</code></pre> <p>Run CLI with only the tags namespace.</p> Source code in <code>calcipy/scripts.py</code> <pre><code>@beartype\ndef start_tags() -&gt; None:  # pragma: no cover\n\"\"\"Run CLI with only the tags namespace.\"\"\"\nfrom .tasks import tags\n_start_subset([tags])\n</code></pre>"},{"location":"reference/calcipy/scripts/#calcipy.scripts.start_types","title":"start_types","text":"<pre><code>start_types()\n</code></pre> <p>Run CLI with only the types namespace.</p> Source code in <code>calcipy/scripts.py</code> <pre><code>@beartype\ndef start_types() -&gt; None:  # pragma: no cover\n\"\"\"Run CLI with only the types namespace.\"\"\"\nfrom .tasks import types\n_start_subset([types])\n</code></pre>"},{"location":"reference/calcipy/check_for_stale_packages/","title":"check_for_stale_packages","text":""},{"location":"reference/calcipy/check_for_stale_packages/#calcipy.check_for_stale_packages-functions","title":"Functions","text":""},{"location":"reference/calcipy/check_for_stale_packages/_check_for_stale_packages/","title":"_check_for_stale_packages","text":"<p>Check for stale packages.</p>"},{"location":"reference/calcipy/check_for_stale_packages/_check_for_stale_packages/#calcipy.check_for_stale_packages._check_for_stale_packages-attributes","title":"Attributes","text":""},{"location":"reference/calcipy/check_for_stale_packages/_check_for_stale_packages/#calcipy.check_for_stale_packages._check_for_stale_packages.CALCIPY_CACHE","title":"CALCIPY_CACHE  <code>module-attribute</code>","text":"<pre><code>CALCIPY_CACHE = Path('.calcipy_packaging.lock')\n</code></pre> <p>Path to the packaging lock file.</p>"},{"location":"reference/calcipy/check_for_stale_packages/_check_for_stale_packages/#calcipy.check_for_stale_packages._check_for_stale_packages-functions","title":"Functions","text":""},{"location":"reference/calcipy/check_for_stale_packages/_check_for_stale_packages/#calcipy.check_for_stale_packages._check_for_stale_packages.check_for_stale_packages","title":"check_for_stale_packages","text":"<pre><code>check_for_stale_packages(*, stale_months, path_lock=LOCK, path_cache=CALCIPY_CACHE)\n</code></pre> <p>Read the cached packaging information.</p> PARAMETER DESCRIPTION <code>stale_months</code> <p>cutoff in months for when a package might be stale enough to be a risk</p> <p> TYPE: <code>int</code> </p> Source code in <code>calcipy/check_for_stale_packages/_check_for_stale_packages.py</code> <pre><code>@beartype\ndef check_for_stale_packages(*, stale_months: int, path_lock: Path = LOCK, path_cache: Path = CALCIPY_CACHE) -&gt; bool:\n\"\"\"Read the cached packaging information.\n    Args:\n        stale_months: cutoff in months for when a package might be stale enough to be a risk\n    \"\"\"\npackages = _read_packages(path_lock)\ncached_packages = _read_cache(path_cache)\nif can_skip.can_skip(prerequisites=[path_lock], targets=[path_cache]):\npackages = [*cached_packages.values()]\nelse:\npackages = _collect_release_dates(packages, cached_packages)\n_write_cache(packages, path_cache)\nreturn _packages_are_stale(packages, stale_months=stale_months)\n</code></pre>"},{"location":"reference/calcipy/code_tag_collector/","title":"code_tag_collector","text":""},{"location":"reference/calcipy/code_tag_collector/#calcipy.code_tag_collector-functions","title":"Functions","text":""},{"location":"reference/calcipy/code_tag_collector/_collector/","title":"_collector","text":"<p>Collect code tags and output for review in a single location.</p>"},{"location":"reference/calcipy/code_tag_collector/_collector/#calcipy.code_tag_collector._collector-attributes","title":"Attributes","text":""},{"location":"reference/calcipy/code_tag_collector/_collector/#calcipy.code_tag_collector._collector.CODE_TAG_RE","title":"CODE_TAG_RE  <code>module-attribute</code>","text":"<pre><code>CODE_TAG_RE = '((^|\\\\s|\\\\(|\"|\\\\\\')(?P&lt;tag&gt;{tag})(:| -)([^\\\\r\\\\n]))(?P&lt;text&gt;.+)'\n</code></pre> <p>Default code tag regex with <code>tag</code> and <code>text</code> matching groups.</p> <p>Requires formatting with list of tags: <code>CODE_TAG_RE.format(tag='|'.join(tag_list))</code></p> <p>Commonly, the <code>tag_list</code> could be <code>COMMON_CODE_TAGS</code></p>"},{"location":"reference/calcipy/code_tag_collector/_collector/#calcipy.code_tag_collector._collector.COMMON_CODE_TAGS","title":"COMMON_CODE_TAGS  <code>module-attribute</code>","text":"<pre><code>COMMON_CODE_TAGS = ['FIXME', 'TODO', 'PLANNED', 'HACK', 'REVIEW', 'TBD', 'DEBUG']\n</code></pre> <p>Most common code tags.</p> <p>FYI and NOTE are excluded to not be tracked in the Code Summary.</p>"},{"location":"reference/calcipy/code_tag_collector/_collector/#calcipy.code_tag_collector._collector.SKIP_PHRASE","title":"SKIP_PHRASE  <code>module-attribute</code>","text":"<pre><code>SKIP_PHRASE = 'calcipy_skip_tags'\n</code></pre> <p>String that indicates the file should be excluded from the tag search.</p>"},{"location":"reference/calcipy/code_tag_collector/_collector/#calcipy.code_tag_collector._collector-functions","title":"Functions","text":""},{"location":"reference/calcipy/code_tag_collector/_collector/#calcipy.code_tag_collector._collector.write_code_tag_file","title":"write_code_tag_file","text":"<pre><code>write_code_tag_file(\npath_tag_summary, paths_source, base_dir, regex=\"\", tags=\"\", header=\"# Task Summary\\n\\nAuto-Generated by `calcipy`\"\n)\n</code></pre> <p>Create the code tag summary file.</p> PARAMETER DESCRIPTION <code>path_tag_summary</code> <p>Path to the output file</p> <p> TYPE: <code>Path</code> </p> <code>paths_source</code> <p>list of source files to parse</p> <p> TYPE: <code>List[Path]</code> </p> <code>base_dir</code> <p>base directory relative to the searched files</p> <p> TYPE: <code>Path</code> </p> <code>regex_compiled</code> <p>compiled regular expression. Expected to have matching groups <code>(tag, text)</code>. Default is CODE_TAG_RE with tags from tag_order</p> <p> </p> <code>tag_order</code> <p>subset of all tags to include in the report and specified order. Default is COMMON_CODE_TAGS</p> <p> </p> <code>header</code> <p>header text</p> <p> TYPE: <code>str</code> DEFAULT: <code>'# Task Summary\\n\\nAuto-Generated by `calcipy`'</code> </p> Source code in <code>calcipy/code_tag_collector/_collector.py</code> <pre><code>@beartype\ndef write_code_tag_file(\npath_tag_summary: Path,\npaths_source: List[Path],\nbase_dir: Path,\nregex: str = '',\ntags: str = '',\nheader: str = '# Task Summary\\n\\nAuto-Generated by `calcipy`',\n) -&gt; None:\n\"\"\"Create the code tag summary file.\n    Args:\n        path_tag_summary: Path to the output file\n        paths_source: list of source files to parse\n        base_dir: base directory relative to the searched files\n        regex_compiled: compiled regular expression. Expected to have matching groups `(tag, text)`.\n            Default is CODE_TAG_RE with tags from tag_order\n        tag_order: subset of all tags to include in the report and specified order. Default is COMMON_CODE_TAGS\n        header: header text\n    \"\"\"\ntag_order = [_t.strip() for _t in tags.split(',') if _t] or COMMON_CODE_TAGS\nregex_compiled = re.compile((regex or CODE_TAG_RE).format(tag='|'.join(tag_order)))\nmatches = _search_files(paths_source, regex_compiled)\nif report := _format_report(\nbase_dir, matches, tag_order=tag_order,\n).strip():\npath_tag_summary.write_text(f'{header}\\n\\n{report}\\n\\n&lt;!-- {SKIP_PHRASE} --&gt;\\n')\nlogger.text('Created Code Tag Summary', path_tag_summary=path_tag_summary)\nelif path_tag_summary.is_file():\npath_tag_summary.unlink()\n</code></pre>"},{"location":"reference/calcipy/dot_dict/","title":"dot_dict","text":""},{"location":"reference/calcipy/dot_dict/#calcipy.dot_dict-functions","title":"Functions","text":""},{"location":"reference/calcipy/dot_dict/_dot_dict/","title":"_dot_dict","text":"<p>Dotted dictionary for consistent interface.</p> <p>Consider moving to Corallium, but I don\u2019t have any uses for it yet.</p>"},{"location":"reference/calcipy/dot_dict/_dot_dict/#calcipy.dot_dict._dot_dict-attributes","title":"Attributes","text":""},{"location":"reference/calcipy/dot_dict/_dot_dict/#calcipy.dot_dict._dot_dict.DDICT_TYPE","title":"DDICT_TYPE  <code>module-attribute</code>","text":"<pre><code>DDICT_TYPE = Union[Dict[str, Any], Box]\n</code></pre> <p>Return type from <code>ddict()</code>.</p>"},{"location":"reference/calcipy/dot_dict/_dot_dict/#calcipy.dot_dict._dot_dict-functions","title":"Functions","text":""},{"location":"reference/calcipy/dot_dict/_dot_dict/#calcipy.dot_dict._dot_dict.ddict","title":"ddict","text":"<pre><code>ddict(**kwargs)\n</code></pre> <p>Return a dotted dictionary that can also be accessed normally.</p> <ul> <li>Currently uses <code>python-box</code></li> <li>Could consider <code>cleveridct</code> which had updates as recently as 2022</li> <li>There are numerous other variations that haven\u2019t been updated since 2020, such as <code>munch</code>, <code>bunch</code>, <code>ddict</code></li> </ul> PARAMETER DESCRIPTION <code>**kwargs</code> <p>keyword arguments formatted into dictionary</p> <p> TYPE: <code>Dict[str, Any]</code> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>DDICT_TYPE</code> <p>dotted dictionary</p> <p> TYPE: <code>DDICT_TYPE</code> </p> Source code in <code>calcipy/dot_dict/_dot_dict.py</code> <pre><code>@beartype\ndef ddict(**kwargs: Dict[str, Any]) -&gt; DDICT_TYPE:\n\"\"\"Return a dotted dictionary that can also be accessed normally.\n    - Currently uses `python-box`\n    - Could consider `cleveridct` which had updates as recently as 2022\n    - There are numerous other variations that haven't been updated since 2020, such as `munch`, `bunch`, `ddict`\n    Args:\n        **kwargs: keyword arguments formatted into dictionary\n    Returns:\n        DDICT_TYPE: dotted dictionary\n    \"\"\"\nreturn Box(kwargs)\n</code></pre>"},{"location":"reference/calcipy/md_writer/","title":"md_writer","text":""},{"location":"reference/calcipy/md_writer/#calcipy.md_writer-functions","title":"Functions","text":""},{"location":"reference/calcipy/md_writer/_writer/","title":"_writer","text":"<p>Markdown Machine.</p>"},{"location":"reference/calcipy/md_writer/_writer/#calcipy.md_writer._writer-attributes","title":"Attributes","text":""},{"location":"reference/calcipy/md_writer/_writer/#calcipy.md_writer._writer.HandlerLookupT","title":"HandlerLookupT  <code>module-attribute</code>","text":"<pre><code>HandlerLookupT = Dict[str, Callable[[str, Path], List[str]]]\n</code></pre> <p>Handler Lookup.</p>"},{"location":"reference/calcipy/md_writer/_writer/#calcipy.md_writer._writer-functions","title":"Functions","text":""},{"location":"reference/calcipy/md_writer/_writer/#calcipy.md_writer._writer.write_autoformatted_md_sections","title":"write_autoformatted_md_sections","text":"<pre><code>write_autoformatted_md_sections(handler_lookup=None, paths_md=None)\n</code></pre> <p>Populate the auto-formatted sections of markdown files with user-configured logic.</p> Source code in <code>calcipy/md_writer/_writer.py</code> <pre><code>@beartype\ndef write_autoformatted_md_sections(\nhandler_lookup: Optional[HandlerLookupT] = None,\npaths_md: Optional[List[Path]] = None,\n) -&gt; None:\n\"\"\"Populate the auto-formatted sections of markdown files with user-configured logic.\"\"\"\n_lookup: HandlerLookupT = handler_lookup or {\n'COVERAGE ': _handle_coverage,\n'SOURCE_FILE=': _handle_source_file,\n}\npaths = paths_md or find_project_files_by_suffix(get_project_path()).get('md') or []\nfor path_md in paths:\nlogger.text_debug('Processing', path_md=path_md)\nif md_lines := _ReplacementMachine().parse(read_lines(path_md), _lookup, path_md):\npath_md.write_text('\\n'.join(md_lines) + '\\n')\n</code></pre>"},{"location":"reference/calcipy/noxfile/","title":"noxfile","text":""},{"location":"reference/calcipy/noxfile/#calcipy.noxfile-functions","title":"Functions","text":""},{"location":"reference/calcipy/noxfile/_noxfile/","title":"_noxfile","text":"<p>nox-poetry configuration file.</p> <p>Useful snippets from docs</p> <pre><code>poetry run nox -l\npoetry run nox --list-sessions\n\npoetry run nox -s build_check-3.8 build_dist-3.8 tests-3.8\npoetry run nox --session tests-3.11\n\npoetry run nox --python 3.8\n\npoetry run nox -k \"not build_check and not build_dist\"\n</code></pre> <p>Useful nox snippets</p> <pre><code># Example conditionally skipping a session\nif not session.interactive:\nsession.skip('Cannot run detect-secrets audit in non-interactive shell')\n# Install pinned version\nsession.install('detect-secrets==1.0.3')\n# Example capturing STDOUT into a file (could do the same for stderr)\npath_stdout = Path('.stdout.txt').resolve()\nwith open(path_stdout, 'w') as out:\nsession.run(*shlex.split('echo Hello World!'), stdout=out)\n</code></pre>"},{"location":"reference/calcipy/noxfile/_noxfile/#calcipy.noxfile._noxfile-attributes","title":"Attributes","text":""},{"location":"reference/calcipy/noxfile/_noxfile/#calcipy.noxfile._noxfile.BASE_NOX_COMMAND","title":"BASE_NOX_COMMAND  <code>module-attribute</code>","text":"<pre><code>BASE_NOX_COMMAND = 'poetry run nox --error-on-missing-interpreters'\n</code></pre> <p>Reused base arguments to nox.</p>"},{"location":"reference/calcipy/noxfile/_noxfile/#calcipy.noxfile._noxfile-functions","title":"Functions","text":""},{"location":"reference/calcipy/noxfile/_noxfile/#calcipy.noxfile._noxfile.build_check","title":"build_check","text":"<pre><code>build_check(session)\n</code></pre> <p>Check that the built output meets all checks.</p> Source code in <code>calcipy/noxfile/_noxfile.py</code> <pre><code>@nox_poetry_session(python=_get_pythons()[-1:], reuse_venv=True)\ndef build_check(session: NPSession) -&gt; None:  # pragma: no cover\n\"\"\"Check that the built output meets all checks.\"\"\"\n# Build sdist and fix return URI, which will have file://...#egg=calcipy\nsdist_uri = session.poetry.build_package(distribution_format=DistributionFormat.SDIST)\npath_sdist = Path(url2pathname(urlparse(sdist_uri).path))\nlogger.text_debug('Fixed sdist URI', sdist_uri=sdist_uri, path_sdist=path_sdist)\n# Check with pyroma\nsession.install('pyroma&gt;=4.0', '--upgrade')\n# required for \"poetry.core.masonry.api\" build backend\nsession.run('python', '-m', 'pip', 'install', 'poetry&gt;=1.3', stdout=True)\nsession.run('pyroma', '--file', path_sdist.as_posix(), '--min=9', stdout=True)\n</code></pre>"},{"location":"reference/calcipy/noxfile/_noxfile/#calcipy.noxfile._noxfile.build_dist","title":"build_dist","text":"<pre><code>build_dist(session)\n</code></pre> <p>Build and test the project files within a controlled environment for repeatability.</p> Source code in <code>calcipy/noxfile/_noxfile.py</code> <pre><code>@nox_session(python=_get_pythons()[-1:], reuse_venv=False)\ndef build_dist(session: Union[NoxSession, NPSession]) -&gt; None:  # pragma: no cover\n\"\"\"Build and test the project files within a controlled environment for repeatability.\"\"\"\ndist_path = Path('dist')\nif_found_unlink(dist_path)\n# Support 'corallium' by re-implementing \"session.poetry.build_package()\", from:\n# https://github.com/cjolowicz/nox-poetry/blob/5772b66ebff8d5a3351a08ed402d3d31e48be5f8/src/nox_poetry/sessions.py#L233-L255\n# https://github.com/cjolowicz/nox-poetry/blob/5772b66ebff8d5a3351a08ed402d3d31e48be5f8/src/nox_poetry/poetry.py#L111-L154\noutput = session.run(*shlex.split('poetry build --format=wheel --no-ansi'),\nexternal=True, silent=True, stderr=None)\noutput = cast(str, output)\nwheel = dist_path / output.split()[-1]\npath_wheel = wheel.resolve().as_uri()\nlogger.text('Created wheel', path_wheel=path_wheel)\n# Install the wheel and check that imports without any of the optional dependencies\nsession.install(path_wheel)\nsession.run(*shlex.split('python scripts/check_imports.py'), stdout=True)\n</code></pre>"},{"location":"reference/calcipy/noxfile/_noxfile/#calcipy.noxfile._noxfile.tests","title":"tests","text":"<pre><code>tests(session)\n</code></pre> <p>Run doit test task for specified python versions.</p> Source code in <code>calcipy/noxfile/_noxfile.py</code> <pre><code>@nox_session(python=_get_pythons(), reuse_venv=True)\ndef tests(session: Union[NoxSession, NPSession]) -&gt; None:  # pragma: no cover\n\"\"\"Run doit test task for specified python versions.\"\"\"\n_install_local(session, ['ddict', 'doc', 'lint', 'nox', 'stale', 'tags', 'test'])\nsession.run(*shlex.split('pytest ./tests'), stdout=True)\n</code></pre>"},{"location":"reference/calcipy/tasks/","title":"tasks","text":""},{"location":"reference/calcipy/tasks/all_tasks/","title":"all_tasks","text":"<p>Tasks can be imported piecemeal or imported in their entirety from here.</p>"},{"location":"reference/calcipy/tasks/all_tasks/#calcipy.tasks.all_tasks-functions","title":"Functions","text":""},{"location":"reference/calcipy/tasks/all_tasks/#calcipy.tasks.all_tasks.main","title":"main","text":"<pre><code>main(_ctx)\n</code></pre> <p>Main task pipeline.</p> Source code in <code>calcipy/tasks/all_tasks.py</code> <pre><code>@task(post=with_progress(_MAIN_TASKS))\ndef main(_ctx: Context) -&gt; None:\n\"\"\"Main task pipeline.\"\"\"\n</code></pre>"},{"location":"reference/calcipy/tasks/all_tasks/#calcipy.tasks.all_tasks.other","title":"other","text":"<pre><code>other(_ctx)\n</code></pre> <p>Run tasks that are otherwise not exercised in main.</p> Source code in <code>calcipy/tasks/all_tasks.py</code> <pre><code>@task(post=with_progress(_OTHER_TASKS))  # pyright: ignore[reportGeneralTypeIssues]\ndef other(_ctx: Context) -&gt; None:\n\"\"\"Run tasks that are otherwise not exercised in main.\"\"\"\n</code></pre>"},{"location":"reference/calcipy/tasks/all_tasks/#calcipy.tasks.all_tasks.progress","title":"progress","text":"<pre><code>progress(_ctx, *, index, total)\n</code></pre> <p>Progress Task.</p> Source code in <code>calcipy/tasks/all_tasks.py</code> <pre><code>@task(\nhelp={\n'index': 'Current index (0-indexed)',\n'total': 'Total steps',\n},\nshow_task_info=False,\n)\ndef progress(_ctx: Context, *, index: int, total: int) -&gt; None:\n\"\"\"Progress Task.\"\"\"\nlogger.text('Progress', is_header=True, index=index + 1, total=total)\n</code></pre>"},{"location":"reference/calcipy/tasks/all_tasks/#calcipy.tasks.all_tasks.release","title":"release","text":"<pre><code>release(ctx, *, suffix=None)\n</code></pre> <p>Release pipeline.</p> Source code in <code>calcipy/tasks/all_tasks.py</code> <pre><code>@task(\nhelp=cl.bump.help,\npost=with_progress(\n[  # pyright: ignore[reportGeneralTypeIssues]\npack.lock,\ndoc.build,\ndoc.deploy,\npack.publish,\n],\noffset=1,\n),\n)\ndef release(ctx: Context, *, suffix: cl.SuffixT = None) -&gt; None:\n\"\"\"Release pipeline.\"\"\"\ncl.bumpz(ctx, suffix=suffix)\n</code></pre>"},{"location":"reference/calcipy/tasks/all_tasks/#calcipy.tasks.all_tasks.summary","title":"summary","text":"<pre><code>summary(_ctx, *, message)\n</code></pre> <p>Summary Task.</p> Source code in <code>calcipy/tasks/all_tasks.py</code> <pre><code>@task(\nhelp={\n'message': 'String message to display',\n},\nshow_task_info=False,\n)\ndef summary(_ctx: Context, *, message: str) -&gt; None:\n\"\"\"Summary Task.\"\"\"\nlogger.text(message, is_header=True)\n</code></pre>"},{"location":"reference/calcipy/tasks/all_tasks/#calcipy.tasks.all_tasks.with_progress","title":"with_progress","text":"<pre><code>with_progress(items, offset=0)\n</code></pre> <p>Inject intermediary \u2018progress\u2019 tasks.</p> PARAMETER DESCRIPTION <code>items</code> <p>list of tasks</p> <p> TYPE: <code>List[Union[Call, Task]]</code> </p> <code>offset</code> <p>Optional offset to shift counters</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> Source code in <code>calcipy/tasks/all_tasks.py</code> <pre><code>@beartype\ndef with_progress(\nitems: List[Union[Call, Task]],\noffset: int = 0,\n) -&gt; List[Union[Call, Task]]:\n\"\"\"Inject intermediary 'progress' tasks.\n    Args:\n        items: list of tasks\n        offset: Optional offset to shift counters\n    \"\"\"\nmessage = 'Running tasks: ' + ', '.join([str(_t.__name__) for _t in items])\ntasks = [call(summary, message=message)]\ntotal = len(items) + offset\nfor ix, item in enumerate(items):\ntasks.extend([call(progress, index=ix + offset, total=total), item])  # pyright: ignore[reportGeneralTypeIssues]\nreturn tasks  # pyright: ignore[reportGeneralTypeIssues]\n</code></pre>"},{"location":"reference/calcipy/tasks/cl/","title":"cl","text":"<p>Changelog CLI.</p>"},{"location":"reference/calcipy/tasks/cl/#calcipy.tasks.cl-attributes","title":"Attributes","text":""},{"location":"reference/calcipy/tasks/cl/#calcipy.tasks.cl.SuffixT","title":"SuffixT  <code>module-attribute</code>","text":"<pre><code>SuffixT = Optional[Literal['alpha', 'beta', 'rc']]\n</code></pre> <p>Prerelease Suffix Type.</p>"},{"location":"reference/calcipy/tasks/cl/#calcipy.tasks.cl-functions","title":"Functions","text":""},{"location":"reference/calcipy/tasks/cl/#calcipy.tasks.cl.bump","title":"bump","text":"<pre><code>bump(ctx, *, suffix=None)\n</code></pre> <p>Bumps project version based on commits &amp; settings in pyproject.toml.</p> Source code in <code>calcipy/tasks/cl.py</code> <pre><code>@task(\npre=[write],\nhelp={\n'suffix': 'Specify prerelease suffix for version bump (alpha, beta, rc)',\n},\n)\ndef bump(ctx: Context, *, suffix: SuffixT = None) -&gt; None:\n\"\"\"Bumps project version based on commits &amp; settings in pyproject.toml.\"\"\"\nbumpz(ctx, suffix=suffix)\n</code></pre>"},{"location":"reference/calcipy/tasks/cl/#calcipy.tasks.cl.bumpz","title":"bumpz","text":"<pre><code>bumpz(ctx, *, suffix=None)\n</code></pre> <p>Bumps project version based on commits &amp; settings in pyproject.toml.</p> Source code in <code>calcipy/tasks/cl.py</code> <pre><code>@beartype\ndef bumpz(ctx: Context, *, suffix: SuffixT = None) -&gt; None:\n\"\"\"Bumps project version based on commits &amp; settings in pyproject.toml.\"\"\"\nopt_cz_args = f' --prerelease={suffix}' if suffix else ''\nrun(ctx, f'poetry run cz bump{opt_cz_args} --annotated-tag --no-verify --gpg-sign')\nrun(ctx, 'git push origin --tags --no-verify')\nget_last_tag = 'git tag --list --sort=-creatordate | head -n 1'\nopt_gh_args = ' --prerelease' if suffix else ''\nrun(ctx, f'gh release create --generate-notes $({get_last_tag}){opt_gh_args}')\n</code></pre>"},{"location":"reference/calcipy/tasks/cl/#calcipy.tasks.cl.write","title":"write","text":"<pre><code>write(ctx)\n</code></pre> <p>Write a Changelog file with the raw Git history.</p> <p>Resources:</p> <ul> <li>https://keepachangelog.com/en/1.0.0/</li> <li>https://www.conventionalcommits.org/en/v1.0.0/</li> <li>https://writingfordevelopers.substack.com/p/how-to-write-a-commit-message</li> <li>https://chris.beams.io/posts/git-commit/</li> <li>https://semver.org/</li> <li>https://calver.org/</li> </ul> RETURNS DESCRIPTION <code>None</code> <p>List[DoitAction]: doit actions</p> Source code in <code>calcipy/tasks/cl.py</code> <pre><code>@task()\ndef write(ctx: Context) -&gt; None:\n\"\"\"Write a Changelog file with the raw Git history.\n    Resources:\n    - https://keepachangelog.com/en/1.0.0/\n    - https://www.conventionalcommits.org/en/v1.0.0/\n    - https://writingfordevelopers.substack.com/p/how-to-write-a-commit-message\n    - https://chris.beams.io/posts/git-commit/\n    - https://semver.org/\n    - https://calver.org/\n    Returns:\n        List[DoitAction]: doit actions\n    \"\"\"\nrun(ctx, 'poetry run cz changelog')\npath_cl = get_project_path() / 'CHANGELOG.md'\nif not path_cl.is_file():\nmsg = f'Could not locate the changelog at: {path_cl}'\nraise FileNotFoundError(msg)\npath_cl.replace(get_doc_subdir() / path_cl.name)\n</code></pre>"},{"location":"reference/calcipy/tasks/defaults/","title":"defaults","text":"<p>Calcipy-Invoke Defaults.</p>"},{"location":"reference/calcipy/tasks/defaults/#calcipy.tasks.defaults-functions","title":"Functions","text":""},{"location":"reference/calcipy/tasks/defaults/#calcipy.tasks.defaults.from_ctx","title":"from_ctx","text":"<pre><code>from_ctx(ctx, group, key)\n</code></pre> <p>Safely extract the value from the context or the defaults.</p> <p>Reference with <code>ctx.tests.out_dir</code> or <code>from_ctx(ctx, 'test', 'out_dir')</code></p> Source code in <code>calcipy/tasks/defaults.py</code> <pre><code>@beartype\ndef from_ctx(ctx: Context, group: str, key: str) -&gt; str:\n\"\"\"Safely extract the value from the context or the defaults.\n    Reference with `ctx.tests.out_dir` or `from_ctx(ctx, 'test', 'out_dir')`\n    \"\"\"\nwith suppress(KeyError):\nreturn str(ctx.config[group][key])\nreturn str(DEFAULTS[group][key])\n</code></pre>"},{"location":"reference/calcipy/tasks/defaults/#calcipy.tasks.defaults.new_collection","title":"new_collection","text":"<pre><code>new_collection()\n</code></pre> <p>Initialize a collection with the combination of merged and project-specific defaults.</p> Source code in <code>calcipy/tasks/defaults.py</code> <pre><code>@beartype\ndef new_collection() -&gt; Collection:\n\"\"\"Initialize a collection with the combination of merged and project-specific defaults.\"\"\"\nns = Collection('')\n# Merge default and user configuration\nns.configure(DEFAULTS)\nconfig_path = Path('.calcipy.json')\nif config_path.is_file():\nns.configure(json.loads(config_path.read_text(encoding='utf-8')))\nreturn ns\n</code></pre>"},{"location":"reference/calcipy/tasks/doc/","title":"doc","text":"<p>Document CLI.</p>"},{"location":"reference/calcipy/tasks/doc/#calcipy.tasks.doc-functions","title":"Functions","text":""},{"location":"reference/calcipy/tasks/doc/#calcipy.tasks.doc.build","title":"build","text":"<pre><code>build(ctx)\n</code></pre> <p>Build documentation with mkdocs.</p> Source code in <code>calcipy/tasks/doc.py</code> <pre><code>@task()\ndef build(ctx: Context) -&gt; None:\n\"\"\"Build documentation with mkdocs.\"\"\"\nauto_doc_path = get_doc_subdir().parent / 'modules'\nwrite_autoformatted_md_sections()\ndelete_dir(auto_doc_path)\n_diagram_task(ctx, auto_doc_path)\n# Find and trim trailing whitespace\nfor path_md in auto_doc_path.rglob('*.md'):\ntrim_trailing_whitespace(path_md)\nrun(ctx, f'poetry run mkdocs build --site-dir {get_out_dir()}')\n</code></pre>"},{"location":"reference/calcipy/tasks/doc/#calcipy.tasks.doc.deploy","title":"deploy","text":"<pre><code>deploy(ctx)\n</code></pre> <p>Deploy docs to the Github <code>gh-pages</code> branch.</p> Source code in <code>calcipy/tasks/doc.py</code> <pre><code>@task()\ndef deploy(ctx: Context) -&gt; None:\n\"\"\"Deploy docs to the Github `gh-pages` branch.\"\"\"\nif _is_mkdocs_local():  # pragma: no cover\nraise NotImplementedError('Not yet configured to deploy documentation without \"use_directory_urls\"')\nrun(ctx, 'pre-commit uninstall || true')  # To prevent pre-commit failures when mkdocs calls push\nrun(ctx, 'poetry run mkdocs gh-deploy --force')\nrun(ctx, 'pre-commit install || true')  # Restore pre-commit\n</code></pre>"},{"location":"reference/calcipy/tasks/doc/#calcipy.tasks.doc.get_out_dir","title":"get_out_dir","text":"<pre><code>get_out_dir()\n</code></pre> <p>Retrieve the mkdocs-specified site directory.</p> Source code in <code>calcipy/tasks/doc.py</code> <pre><code>@beartype\ndef get_out_dir() -&gt; Path:\n\"\"\"Retrieve the mkdocs-specified site directory.\"\"\"\nmkdocs_config = read_yaml_file(get_project_path() / MKDOCS_CONFIG)\nreturn Path(mkdocs_config.get('site_dir', 'releases/site'))\n</code></pre>"},{"location":"reference/calcipy/tasks/doc/#calcipy.tasks.doc.watch","title":"watch","text":"<pre><code>watch(ctx)\n</code></pre> <p>Serve local documentation for local editing.</p> Source code in <code>calcipy/tasks/doc.py</code> <pre><code>@task()\ndef watch(ctx: Context) -&gt; None:\n\"\"\"Serve local documentation for local editing.\"\"\"\nif _is_mkdocs_local():  # pragma: no cover\npath_doc_index = get_out_dir() / 'index.html'\nopen_in_browser(path_doc_index)\nelse:\nwebbrowser.open('http://localhost:8000')\nrun(ctx, 'poetry run mkdocs serve --dirtyreload')\n</code></pre>"},{"location":"reference/calcipy/tasks/lint/","title":"lint","text":"<p>Lint CLI.</p>"},{"location":"reference/calcipy/tasks/lint/#calcipy.tasks.lint-functions","title":"Functions","text":""},{"location":"reference/calcipy/tasks/lint/#calcipy.tasks.lint.autopep8","title":"autopep8","text":"<pre><code>autopep8(ctx)\n</code></pre> <p>Run autopep8.</p> <p>FYI: This is temporary until ruff implements white space rules https://github.com/charliermarsh/ruff/issues/970</p> Source code in <code>calcipy/tasks/lint.py</code> <pre><code>@task()\ndef autopep8(ctx: Context) -&gt; None:\n\"\"\"Run autopep8.\n    FYI: This is temporary until ruff implements white space rules\n    https://github.com/charliermarsh/ruff/issues/970\n    \"\"\"\ncli_args = ' --aggressive --recursive --in-place --max-line-length=120'\n_inner_task(ctx, cli_args=cli_args, command='python -m autopep8')\n</code></pre>"},{"location":"reference/calcipy/tasks/lint/#calcipy.tasks.lint.check","title":"check","text":"<pre><code>check(ctx)\n</code></pre> <p>Run ruff as check-only.</p> Source code in <code>calcipy/tasks/lint.py</code> <pre><code>@task(default=True)\ndef check(ctx: Context) -&gt; None:\n\"\"\"Run ruff as check-only.\"\"\"\n_inner_task(ctx, cli_args='')\n</code></pre>"},{"location":"reference/calcipy/tasks/lint/#calcipy.tasks.lint.fix","title":"fix","text":"<pre><code>fix(ctx)\n</code></pre> <p>Run ruff and apply fixes.</p> Source code in <code>calcipy/tasks/lint.py</code> <pre><code>@task(pre=[autopep8])\ndef fix(ctx: Context) -&gt; None:\n\"\"\"Run ruff and apply fixes.\"\"\"\n_inner_task(ctx, cli_args=' --fix')\n</code></pre>"},{"location":"reference/calcipy/tasks/lint/#calcipy.tasks.lint.flake8","title":"flake8","text":"<pre><code>flake8(ctx)\n</code></pre> <p>Run flake8.</p> Source code in <code>calcipy/tasks/lint.py</code> <pre><code>@task()\ndef flake8(ctx: Context) -&gt; None:\n\"\"\"Run flake8.\"\"\"\n_inner_task(ctx, cli_args='', command='python -m flake8')\n</code></pre>"},{"location":"reference/calcipy/tasks/lint/#calcipy.tasks.lint.pre_commit","title":"pre_commit","text":"<pre><code>pre_commit(ctx, *, no_update=False)\n</code></pre> <p>Run pre-commit.</p> Source code in <code>calcipy/tasks/lint.py</code> <pre><code>@task(\nhelp={\n'no_update': 'Skip updating the pre-commit hooks',\n},\n)\ndef pre_commit(ctx: Context, *, no_update: bool = False) -&gt; None:\n\"\"\"Run pre-commit.\"\"\"\nrun(ctx, 'pre-commit install')\nif not no_update:\nrun(ctx, 'pre-commit autoupdate')\nall_hook_stages = [\n'commit', 'merge-commit', 'push', 'prepare-commit-msg', 'commit-msg', 'post-checkout',\n'post-commit', 'post-merge', 'post-rewrite', 'manual',\n]\nstages_cli = ' '.join(f'--hook-stage {stg}' for stg in all_hook_stages)\nrun(ctx, f'pre-commit run --all-files {stages_cli}')\n</code></pre>"},{"location":"reference/calcipy/tasks/lint/#calcipy.tasks.lint.pylint","title":"pylint","text":"<pre><code>pylint(ctx, *, report=False)\n</code></pre> <p>Run pylint.</p> Source code in <code>calcipy/tasks/lint.py</code> <pre><code>@task(\nhelp={\n'report': 'if provided, show the pylint summary report',\n},\n)\ndef pylint(ctx: Context, *, report: bool = False) -&gt; None:\n\"\"\"Run pylint.\"\"\"\ncli_args = ' --report=y' if report else ''\n_inner_task(ctx, cli_args=cli_args, command='python -m pylint')\n</code></pre>"},{"location":"reference/calcipy/tasks/lint/#calcipy.tasks.lint.security","title":"security","text":"<pre><code>security(ctx)\n</code></pre> <p>Attempt to identify possible security vulnerabilities.</p> Source code in <code>calcipy/tasks/lint.py</code> <pre><code>@task()\ndef security(ctx: Context) -&gt; None:\n\"\"\"Attempt to identify possible security vulnerabilities.\"\"\"\nlogger.text('Note: Selectively override bandit with \"# nosec\"', is_header=True)\npkg_name = read_package_name()\nrun(ctx, f'poetry run bandit --recursive {pkg_name}')\n# See additional semgrep rules at:\n#   https://semgrep.dev/explore\n#   https://github.com/returntocorp/semgrep-rules/tree/develop/python\n#   https://awesomeopensource.com/project/returntocorp/semgrep-rules?categorypage=45\nsemgrep_configs = ' '.join([\n'--config=p/ci',\n'--config=p/default',\n'--config=p/security-audit',\n'--config=r/bash',\n'--config=r/contrib',\n'--config=r/fingerprints',\n'--config=r/generic',\n'--config=r/json',\n'--config=r/python',\n'--config=r/terraform',\n'--config=r/yaml',\n])\nlogger.text('Note: Selectively override semgrep with \"# nosem\"', is_header=True)\nrun(ctx, f'poetry run semgrep ci --autofix {semgrep_configs}')\n</code></pre>"},{"location":"reference/calcipy/tasks/lint/#calcipy.tasks.lint.watch","title":"watch","text":"<pre><code>watch(ctx)\n</code></pre> <p>Run ruff as check-only.</p> Source code in <code>calcipy/tasks/lint.py</code> <pre><code>@task()\ndef watch(ctx: Context) -&gt; None:\n\"\"\"Run ruff as check-only.\"\"\"\n_inner_task(ctx, cli_args=' --watch --show-source')\n</code></pre>"},{"location":"reference/calcipy/tasks/nox/","title":"nox","text":"<p>Nox CLI.</p>"},{"location":"reference/calcipy/tasks/nox/#calcipy.tasks.nox-attributes","title":"Attributes","text":""},{"location":"reference/calcipy/tasks/nox/#calcipy.tasks.nox-functions","title":"Functions","text":""},{"location":"reference/calcipy/tasks/nox/#calcipy.tasks.nox.noxfile","title":"noxfile","text":"<pre><code>noxfile(ctx, *, session='')\n</code></pre> <p>Run nox from the local noxfile.</p> Source code in <code>calcipy/tasks/nox.py</code> <pre><code>@task(\ndefault=True,\nhelp={\n'session': 'Optional session to run',\n},\n)\ndef noxfile(ctx: Context, *, session: str = '') -&gt; None:\n\"\"\"Run nox from the local noxfile.\"\"\"\ncli_args = ['--session', session] if session else []\nrun(ctx, f'{BASE_NOX_COMMAND} {\" \".join(cli_args)}')\n</code></pre>"},{"location":"reference/calcipy/tasks/pack/","title":"pack","text":"<p>Packaging CLI.</p>"},{"location":"reference/calcipy/tasks/pack/#calcipy.tasks.pack-attributes","title":"Attributes","text":""},{"location":"reference/calcipy/tasks/pack/#calcipy.tasks.pack-functions","title":"Functions","text":""},{"location":"reference/calcipy/tasks/pack/#calcipy.tasks.pack.check_licenses","title":"check_licenses","text":"<pre><code>check_licenses(ctx)\n</code></pre> <p>Check licenses for compatibility with <code>licensecheck</code>.</p> Source code in <code>calcipy/tasks/pack.py</code> <pre><code>@task()\ndef check_licenses(ctx: Context) -&gt; None:\n\"\"\"Check licenses for compatibility with `licensecheck`.\"\"\"\nres = run(ctx, 'which licensecheck', warn=True, hide=True)\nif res.exited == 1:\nlogger.warning('`licensecheck` not found. installing with pipx')\nrun(ctx, 'pipx install licensecheck')\nrun(ctx, 'licensecheck')\n</code></pre>"},{"location":"reference/calcipy/tasks/pack/#calcipy.tasks.pack.lock","title":"lock","text":"<pre><code>lock(ctx)\n</code></pre> <p>Ensure poetry.lock is  up-to-date.</p> Source code in <code>calcipy/tasks/pack.py</code> <pre><code>@task()\ndef lock(ctx: Context) -&gt; None:\n\"\"\"Ensure poetry.lock is  up-to-date.\"\"\"\nif can_skip.can_skip(prerequisites=[PROJECT_TOML], targets=[LOCK]):\nreturn  # Exit early\nrun(ctx, 'poetry lock --no-update')\n</code></pre>"},{"location":"reference/calcipy/tasks/pack/#calcipy.tasks.pack.publish","title":"publish","text":"<pre><code>publish(ctx, *, to_test_pypi=False)\n</code></pre> <p>Build the distributed format(s) and publish.</p> Source code in <code>calcipy/tasks/pack.py</code> <pre><code>@task(\nhelp={\n'to_test_pypi': 'Publish to the TestPyPi repository',\n},\n)\ndef publish(ctx: Context, *, to_test_pypi: bool = False) -&gt; None:\n\"\"\"Build the distributed format(s) and publish.\"\"\"\nrun(ctx, f'{BASE_NOX_COMMAND} --session build_dist build_check')\ncmd = 'poetry publish'\nif to_test_pypi:\ncmd += ' --repository testpypi'\nrun(ctx, cmd)\n</code></pre>"},{"location":"reference/calcipy/tasks/stale/","title":"stale","text":"<p>Stale Packages CLI.</p>"},{"location":"reference/calcipy/tasks/stale/#calcipy.tasks.stale-functions","title":"Functions","text":""},{"location":"reference/calcipy/tasks/stale/#calcipy.tasks.stale.check_for_stale_packages","title":"check_for_stale_packages","text":"<pre><code>check_for_stale_packages(ctx, *, stale_months=48)\n</code></pre> <p>Identify stale dependencies.</p> Source code in <code>calcipy/tasks/stale.py</code> <pre><code>@task(\ndefault=True,\nhelp={\n'stale_months': 'Cutoff in months for when a package may be stale enough to be a risk',\n},\n)\ndef check_for_stale_packages(ctx: Context, *, stale_months: int = 48) -&gt; None:\n\"\"\"Identify stale dependencies.\"\"\"\ncfsp(stale_months=stale_months)\nrun(ctx, 'poetry run pip-check --cmd=\"poetry run pip\" --hide-unchanged')\n</code></pre>"},{"location":"reference/calcipy/tasks/tags/","title":"tags","text":"<p>Code Tag Collector CLI.</p>"},{"location":"reference/calcipy/tasks/tags/#calcipy.tasks.tags-functions","title":"Functions","text":""},{"location":"reference/calcipy/tasks/tags/#calcipy.tasks.tags.collect_code_tags","title":"collect_code_tags","text":"<pre><code>collect_code_tags(ctx, base_dir='.', filename=None, tag_order='', regex='', ignore_patterns='')\n</code></pre> <p>Create a <code>CODE_TAG_SUMMARY.md</code> with a table for TODO- and FIXME-style code comments.</p> Source code in <code>calcipy/tasks/tags.py</code> <pre><code>@task(\ndefault=True,\nhelp={\n'base_dir': 'Working Directory',\n'filename': 'Code Tag Summary Filename',\n'tag_order': 'Ordered list of code tags to locate (Comma-separated)',\n'regex': 'Custom Code Tag Regex. Must contain \"{tag}\"',\n'ignore_patterns': 'Glob patterns to ignore files and directories when searching (Comma-separated)',\n},\n)\ndef collect_code_tags(\nctx: Context,\nbase_dir: str = '.',\nfilename: Optional[str] = None,\ntag_order: str = '',\nregex: str = '',\nignore_patterns: str = '',\n) -&gt; None:\n\"\"\"Create a `CODE_TAG_SUMMARY.md` with a table for TODO- and FIXME-style code comments.\"\"\"\npth_base_dir = Path(base_dir).resolve()\npath_tag_summary = get_doc_subdir() / (filename or from_ctx(ctx, 'tags', 'filename'))\npatterns = ignore_patterns.split(',') if ignore_patterns else []\npaths_source = find_project_files(pth_base_dir, ignore_patterns=patterns)\nwrite_code_tag_file(\npath_tag_summary=path_tag_summary,\npaths_source=paths_source,\nbase_dir=pth_base_dir,\nregex=regex,\ntags=tag_order,\nheader='# Collected Code Tags',\n)\n</code></pre>"},{"location":"reference/calcipy/tasks/test/","title":"test","text":"<p>Test CLI.</p>"},{"location":"reference/calcipy/tasks/test/#calcipy.tasks.test-functions","title":"Functions","text":""},{"location":"reference/calcipy/tasks/test/#calcipy.tasks.test.coverage","title":"coverage","text":"<pre><code>coverage(ctx, *, min_cover=0, out_dir=None, view=False)\n</code></pre> <p>Generate useful coverage outputs after running pytest.</p> <p>Creates <code>coverage.json</code> used in <code>doc.build</code></p> Source code in <code>calcipy/tasks/test.py</code> <pre><code>@task(\nhelp={\n'min_cover': 'Fail if coverage less than threshold',\n'out_dir': 'Optional path to coverage directory. Typically \".cover\" or \"releases/tests\"',\n'view': 'If True, open the created files',\n},\n)\ndef coverage(ctx: Context, *, min_cover: int = 0, out_dir: Optional[str] = None, view: bool = False) -&gt; None:\n\"\"\"Generate useful coverage outputs after running pytest.\n    Creates `coverage.json` used in `doc.build`\n    \"\"\"\npkg_name = read_package_name()\n_inner_task(ctx, cli_args='', min_cover=min_cover, command=f'coverage run --source={pkg_name} --module pytest')\ncov_dir = Path(out_dir or from_ctx(ctx, 'test', 'out_dir'))\ncov_dir.mkdir(exist_ok=True, parents=True)\nfor cmd in (\n'poetry run python -m coverage report --show-missing',  # Write to STDOUT\nf'poetry run python -m coverage html --directory={cov_dir}',  # Write to HTML\n'poetry run python -m coverage json',  # Create coverage.json file for \"_handle_coverage\"\n):\nrun(ctx, cmd)\nif view:  # pragma: no cover\nopen_in_browser(cov_dir / 'index.html')\n</code></pre>"},{"location":"reference/calcipy/tasks/test/#calcipy.tasks.test.pytest","title":"pytest","text":"<pre><code>pytest(ctx, *, keyword='', marker='', min_cover=0)\n</code></pre> <p>Run pytest with default arguments.</p> Source code in <code>calcipy/tasks/test.py</code> <pre><code>@task(\ndefault=True,\nhelp={\n'min_cover': 'Fail if coverage less than threshold',\n**KM_HELP,\n},\n)\ndef pytest(ctx: Context, *, keyword: str = '', marker: str = '', min_cover: int = 0) -&gt; None:\n\"\"\"Run pytest with default arguments.\"\"\"\npkg_name = read_package_name()\n_inner_task(ctx, cli_args=f' --cov={pkg_name} --cov-report=term-missing',\nkeyword=keyword, marker=marker, min_cover=min_cover)\n</code></pre>"},{"location":"reference/calcipy/tasks/test/#calcipy.tasks.test.step","title":"step","text":"<pre><code>step(ctx, *, keyword='', marker='')\n</code></pre> <p>Run pytest optimized to stop on first error.</p> Source code in <code>calcipy/tasks/test.py</code> <pre><code>@task(help=KM_HELP)\ndef step(ctx: Context, *, keyword: str = '', marker: str = '') -&gt; None:\n\"\"\"Run pytest optimized to stop on first error.\"\"\"\n_inner_task(ctx, cli_args=_STEPWISE_ARGS, keyword=keyword, marker=marker)\n</code></pre>"},{"location":"reference/calcipy/tasks/test/#calcipy.tasks.test.watch","title":"watch","text":"<pre><code>watch(ctx, *, keyword='', marker='')\n</code></pre> <p>Run pytest with polling and optimized to stop on first error.</p> Source code in <code>calcipy/tasks/test.py</code> <pre><code>@task(help=KM_HELP)\ndef watch(ctx: Context, *, keyword: str = '', marker: str = '') -&gt; None:\n\"\"\"Run pytest with polling and optimized to stop on first error.\"\"\"\n_inner_task(ctx, cli_args=_STEPWISE_ARGS, keyword=keyword, marker=marker, command='ptw . --now')\n</code></pre>"},{"location":"reference/calcipy/tasks/types/","title":"types","text":"<p>Types CLI.</p>"},{"location":"reference/calcipy/tasks/types/#calcipy.tasks.types-functions","title":"Functions","text":""},{"location":"reference/calcipy/tasks/types/#calcipy.tasks.types.mypy","title":"mypy","text":"<pre><code>mypy(ctx)\n</code></pre> <p>Run mypy.</p> Source code in <code>calcipy/tasks/types.py</code> <pre><code>@task()\ndef mypy(ctx: Context) -&gt; None:\n\"\"\"Run mypy.\"\"\"\n_inner_task(ctx, cli_args='', command='python -m mypy')\n</code></pre>"},{"location":"reference/calcipy/tasks/types/#calcipy.tasks.types.pyright","title":"pyright","text":"<pre><code>pyright(ctx)\n</code></pre> <p>Run pyright.</p> Source code in <code>calcipy/tasks/types.py</code> <pre><code>@task()\ndef pyright(ctx: Context) -&gt; None:\n\"\"\"Run pyright.\"\"\"\n_inner_task(ctx, cli_args='', command='pyright')\n</code></pre>"}]}