---
name: Setup Action
description: Run "poetry install"

inputs:
  os:
    default: ubuntu-22.04
  pipx-packages:
    default: ""
  poetry-version:
    default: 1.6.1
  python-version:
    required: true
  uses-nox:
    default: ""

env:
  POETRY_VIRTUALENVS_IN_PROJECT: true
  POETRY_NO_INTERACTION: 1

runs:
  using: composite
  steps:
    - name: Setup Local Variables
      id: variable-setup
      run: |
        echo "pipx-home=$PIPX_HOME" >> $GITHUB_OUTPUT
        echo "pipx-bin-dir=$PIPX_BIN_DIR" >> $GITHUB_OUTPUT
        echo "nox-dir=$PWD/.nox" >> $GITHUB_OUTPUT

        export SHORT_PYTHON_VERSION=$(echo '${{ inputs.python-version }}' | awk -F. '{print $1"."$2}')
        export CACHE_KEY_OS=${{ inputs.os }}-$SHORT_PYTHON_VERSION
        export BASE64_PIPX_ID=$(echo 'poetry==${{ inputs.poetry-version }} ${{ inputs.pipx-packages }}' | base64)
        echo "cache-key-pipx=pipx-$CACHE_KEY_OS-$BASE64_PIPX_ID" >> $GITHUB_OUTPUT
        echo "cache-key-nox=nox-$CACHE_KEY_OS" >> $GITHUB_OUTPUT
      shell: bash

    # https://pypa.github.io/pipx/how-pipx-works
    - name: Cache pipx
      id: cache-pipx
      uses: actions/cache@v3
      with:
        path: |
          ${{ steps.variable-setup.outputs.pipx-home }}
          ${{ steps.variable-setup.outputs.pipx-bin-dir }}
        key: ${{ steps.variable-setup.outputs.cache-key-pipx }}
    - name: Install Poetry ${{ inputs.poetry-version }} and '${{ inputs.pipx-packages }}'
      if: ${{ steps.cache-pipx.outputs.cache-hit != 'true' }}
      run: pipx install poetry==${{ inputs.poetry-version }} ${{ inputs.pipx-packages }}
      shell: bash

    - name: Setup Python ${{ inputs.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}
        cache: poetry

    - name: Cache .nox
      if: ${{ inputs.uses-nox == 'true' }}
      uses: actions/cache@v3
      with:
        path: ${{ steps.variable-setup.outputs.nox-dir }}
        key: ${{ steps.variable-setup.outputs.cache-key-nox }}-${{ hashFiles('**/poetry.lock') }}

    - name: Poetry Debug Info
      run: |-
        poetry debug info
        poetry config --list
      shell: bash

    - name: Install Project and Dependencies
      run: |-
        poetry install -E ddict -E doc -E flake8 -E lint -E nox -E pylint -E stale -E tags -E test -E types
      shell: bash
