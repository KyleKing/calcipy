# Docs: https://github.com/charliermarsh/ruff
# Tip: poetry run python -m ruff --explain RUF100

ignore = [
  'ANN002', # Missing type annotation for `*args`
  'ANN003', # Missing type annotation for `**kwargs`
  'ANN101', # Missing type annotation for `self` in method
  'BLE001', # Do not catch blind exception: `Exception`
  'D203', # "1 blank line required before class docstring" (Conflicts with D211)
  'D213', # "Multi-line docstring summary should start at the second line" (Conflicts with D212)
  'D4', # Numpy-Style Docstrings (e.g. "Section name should end with a newline ("Returns")")
  'EM101', # Exception must not use a string literal, assign to variable first
  'FBT002', # Boolean default value in function definition
  'N999', # Invalid module name: '_noxfile'
  'RUF100', # Unused noqa directive (remove once flake8 is fully replaced)
  'TCH002', # Move third-party import {} into a type-checking block
  'TCH003', # Move standard library import `pathlib.Path` into a type-checking block
  'TID252', # Relative imports from parent modules are banned
  'TRY003', # Avoid specifying long messages outside the exception class
]
line-length = 120
select = ['ALL']
target-version = 'py38'
unfixable = [
  'ERA001', # Commented out code
]

[flake8-quotes]
inline-quotes = 'single'

[flake8-tidy-imports.banned-api]
'invoke.task'.msg = 'Use shoal.cli.task instead.'
'typing.Any'.msg = 'Use beartype.typing.* instead.'
'typing.Callable'.msg = 'Use beartype.typing.* instead.'
'typing.Dict'.msg = 'Use beartype.typing.* instead.'
'typing.List'.msg = 'Use beartype.typing.* instead.'
'typing.Optional'.msg = 'Use beartype.typing.* instead.'
'typing.Protocol'.msg = 'Use beartype.typing.* instead.'
'typing.TypeVar'.msg = 'Use beartype.typing.* instead.'

[isort]
known-first-party = ['calcipy']

[per-file-ignores]
'*/__init__.py' = [
  'D104', # Missing docstring in public package
  'F401', # imported but unused; consider adding to __all__ or using a redundant alias
]
'scripts/*.py' = [
  'INP001', # File `scripts/*.py` is part of an implicit namespace package. Add an `__init__.py`.
]
'scripts/check_imports.py' = [
  'F401', # imported but unused; consider adding to __all__ or using a redundant alias
]
'tests/*.py' = [
  'ANN001', # Missing type annotation for function argument
  'ANN201', # Missing return type annotation for public function
  'D100', # Missing docstring in public module
  'D103', # Missing docstring in public function
  'PT004', # flake8-pytest-style: fixture does not return
  'S101', # Use of `assert` detected
]

[pylint]
max-args = 6

[pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
